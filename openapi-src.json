{
  "components": {
    "schemas": {
      "AccountAttachPaymentMethodRequestBody": {
        "type": "object",
        "description": "AccountAttachPaymentMethodRequestBody",
        "properties": {
          "payment_method_id": {
            "type": "string",
            "description": "Unique identifier for a Stripe payment method",
            "maxLength": 256
          }
        },
        "required": ["payment_method_id"]
      },
      "AccountAttachPaymentMethodResponse": {
        "type": "object",
        "description": "AccountAttachPaymentMethodResponse",
        "properties": {
          "card": {
            "type": "object",
            "description": "User credit card information",
            "properties": {
              "brand": { "type": "string", "description": "Brand" },
              "card_id": {
                "type": "string",
                "description": "Credit card ID",
                "maxLength": 64
              },
              "country": {
                "type": "string",
                "description": "Country",
                "maxLength": 128
              },
              "country_code": {
                "type": "string",
                "description": "Two letter ISO country code",
                "maxLength": 2
              },
              "exp_month": {
                "type": "integer",
                "description": "Expiration month",
                "minimum": 1,
                "maximum": 12
              },
              "exp_year": {
                "type": "integer",
                "description": "Expiration year",
                "minimum": 2015,
                "maximum": 2100
              },
              "last4": {
                "type": "string",
                "description": "Credit card last four digits"
              },
              "name": {
                "type": "string",
                "description": "Name on the credit card",
                "maxLength": 256
              },
              "organization_id": {
                "type": "string",
                "description": "Organization ID",
                "maxLength": 36
              },
              "projects": {
                "type": "array",
                "description": "List of projects the card is assigned to",
                "items": { "type": "string" }
              }
            },
            "required": [
              "brand",
              "card_id",
              "country",
              "country_code",
              "exp_month",
              "exp_year",
              "last4",
              "name",
              "projects"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["card"]
      },
      "AccountAuthenticationMethodCreateRequestBody": {
        "type": "object",
        "description": "AccountAuthenticationMethodCreateRequestBody",
        "properties": {
          "auth_token_extend_when_used": {
            "type": "boolean",
            "description": "Extend authentication token validity when used"
          },
          "auth_token_max_age_seconds": {
            "type": "integer",
            "description": "Auth Token Max Age Seconds",
            "minimum": 300,
            "maximum": 1296000
          },
          "authentication_method_name": {
            "type": "string",
            "description": "Authentication Method Name",
            "maxLength": 128
          },
          "authentication_method_type": {
            "type": "string",
            "description": "Authentication method type",
            "enum": ["internal", "saml"]
          },
          "auto_join_team_id": {
            "type": "string",
            "description": "Automatically add users to a team, when user signs up using this authentication method",
            "maxLength": 32
          },
          "auto_join_user_group_id": {
            "type": "string",
            "description": "Automatically add users to a group, when user signs up using this authentication method",
            "maxLength": 36
          },
          "linked_domains": {
            "type": "array",
            "description": "Linked Domains",
            "items": {
              "type": "object",
              "properties": {
                "domain_id": {
                  "type": "string",
                  "description": "Domain ID",
                  "maxLength": 36
                }
              },
              "required": ["domain_id"]
            }
          },
          "saml_assertion_signed_enabled": {
            "type": "boolean",
            "description": "Set to 'true' to enable WantAssertionsSigned"
          },
          "saml_authn_requests_signed_enabled": {
            "type": "boolean",
            "description": "Set to 'true' to enable AuthnRequestsSigned"
          },
          "saml_certificate": {
            "type": "string",
            "description": "Identity provider's certificate",
            "maxLength": 16384
          },
          "saml_digest_algorithm": {
            "type": "string",
            "description": "Digest algorithm. This is an advanced option that typically does not need to be set.",
            "enum": ["sha1", "sha256", "sha384", "sha512"]
          },
          "saml_entity_id": {
            "type": "string",
            "description": "Saml Entity ID",
            "maxLength": 2048
          },
          "saml_field_mapping": {
            "type": "object",
            "description": "SAMLFieldMapping",
            "properties": {
              "email": {
                "type": "string",
                "description": "Field name for user email",
                "maxLength": 256
              },
              "first_name": {
                "type": "string",
                "description": "Field name for user's first name",
                "maxLength": 256
              },
              "groups": {
                "type": "string",
                "description": "Field name for user's groups memberships. Contents of this field are used to handle group memberships when SCIM is not available and SAML is used to manage group memberships.",
                "maxLength": 256
              },
              "identity": {
                "type": "string",
                "description": "Field name for user's identity. This field must always exist in responses, and must be immutable and unique. Contents of this field are used to identify the user. Using user ID (such as unix user ID) is highly recommended, as email address may change, requiring relinking user to Aiven user.",
                "maxLength": 256
              },
              "last_name": {
                "type": "string",
                "description": "Field name for user's lastname",
                "maxLength": 256
              },
              "real_name": {
                "type": "string",
                "description": "Field name for user's full name. If specified, first_name and last_name mappings are ignored",
                "maxLength": 256
              }
            }
          },
          "saml_idp_login_allowed": {
            "type": "boolean",
            "description": "Set to 'true' to enable IdP initiated login"
          },
          "saml_idp_url": {
            "type": "string",
            "description": "Saml Idp Url",
            "maxLength": 2048
          },
          "saml_join_groups": {
            "type": "boolean",
            "description": "SAML join groups enabled"
          },
          "saml_requested_authn_context_enabled": {
            "type": "boolean",
            "description": "Set to 'false' to disable RequestedAuthnContext"
          },
          "saml_signature_algorithm": {
            "type": "string",
            "description": "SAMLSignatureAlgorithm",
            "enum": [
              "rsa-sha1",
              "dsa-sha1",
              "rsa-sha256",
              "rsa-sha384",
              "rsa-sha512"
            ]
          },
          "saml_variant": {
            "type": "string",
            "description": "SAMLVariant",
            "enum": ["adfs"]
          },
          "scim_enabled": { "type": "boolean", "description": "SCIM enabled" }
        },
        "required": ["authentication_method_name", "authentication_method_type"]
      },
      "AccountAuthenticationMethodCreateResponse": {
        "type": "object",
        "description": "AccountAuthenticationMethodCreateResponse",
        "properties": {
          "authentication_method": {
            "type": "object",
            "description": "AuthenticationMethod",
            "properties": {
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "auth_token_extend_when_used": {
                "type": "boolean",
                "description": "Extend authentication token validity when used"
              },
              "auth_token_max_age_seconds": {
                "type": "integer",
                "description": "Auth Token Max Age Seconds",
                "minimum": 300,
                "maximum": 1296000
              },
              "authentication_method_enabled": {
                "type": "boolean",
                "description": "If true, authentication method can be used to access account/projects in account. If false, authentication method can still be used to sign in"
              },
              "authentication_method_id": {
                "type": "string",
                "description": "Authentication Method ID"
              },
              "authentication_method_name": {
                "type": "string",
                "description": "Authentication Method Name",
                "maxLength": 128
              },
              "authentication_method_type": {
                "type": "string",
                "description": "Authentication method type",
                "enum": ["internal", "saml"]
              },
              "auto_join_team_id": {
                "type": "string",
                "description": "Automatically add users to a team, when user signs up using this authentication method",
                "maxLength": 32
              },
              "auto_join_user_group_id": {
                "type": "string",
                "description": "Automatically add users to a group, when user signs up using this authentication method",
                "maxLength": 36
              },
              "create_time": {
                "type": "string",
                "description": "Create Time",
                "maxLength": 36
              },
              "delete_time": {
                "type": "string",
                "description": "Delete Time",
                "maxLength": 36
              },
              "organization_id": {
                "type": "string",
                "description": "Organization ID",
                "maxLength": 36
              },
              "saml_acs_url": {
                "type": "string",
                "description": "Saml Acs Url",
                "maxLength": 2048
              },
              "saml_assertion_signed_enabled": {
                "type": "boolean",
                "description": "Set to 'true' to enable WantAssertionsSigned"
              },
              "saml_authn_requests_signed_enabled": {
                "type": "boolean",
                "description": "Set to 'true' to enable AuthnRequestsSigned"
              },
              "saml_cert": {
                "type": "string",
                "description": "SAMLVariant",
                "enum": ["adfs"]
              },
              "saml_certificate": {
                "type": "string",
                "description": "Identity provider's certificate",
                "maxLength": 16384
              },
              "saml_certificate_issuer": {
                "type": "string",
                "description": "Saml Certificate Issuer"
              },
              "saml_certificate_not_valid_after": {
                "type": "string",
                "description": "Saml Certificate Not Valid After",
                "maxLength": 36
              },
              "saml_certificate_not_valid_before": {
                "type": "string",
                "description": "Saml Certificate Not Valid Before",
                "maxLength": 36
              },
              "saml_certificate_subject": {
                "type": "string",
                "description": "Saml Certificate Subject"
              },
              "saml_digest_algorithm": {
                "type": "string",
                "description": "Digest algorithm. This is an advanced option that typically does not need to be set.",
                "enum": ["sha1", "sha256", "sha384", "sha512"]
              },
              "saml_entity_id": {
                "type": "string",
                "description": "Saml Entity ID",
                "maxLength": 2048
              },
              "saml_field_mapping": {
                "type": "object",
                "description": "SAMLFieldMapping",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Field name for user email",
                    "maxLength": 256
                  },
                  "first_name": {
                    "type": "string",
                    "description": "Field name for user's first name",
                    "maxLength": 256
                  },
                  "groups": {
                    "type": "string",
                    "description": "Field name for user's groups memberships. Contents of this field are used to handle group memberships when SCIM is not available and SAML is used to manage group memberships.",
                    "maxLength": 256
                  },
                  "identity": {
                    "type": "string",
                    "description": "Field name for user's identity. This field must always exist in responses, and must be immutable and unique. Contents of this field are used to identify the user. Using user ID (such as unix user ID) is highly recommended, as email address may change, requiring relinking user to Aiven user.",
                    "maxLength": 256
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Field name for user's lastname",
                    "maxLength": 256
                  },
                  "real_name": {
                    "type": "string",
                    "description": "Field name for user's full name. If specified, first_name and last_name mappings are ignored",
                    "maxLength": 256
                  }
                }
              },
              "saml_idp_login_allowed": {
                "type": "boolean",
                "description": "Set to 'true' to enable IdP initiated login"
              },
              "saml_idp_url": {
                "type": "string",
                "description": "Saml Idp Url",
                "maxLength": 2048
              },
              "saml_join_groups": {
                "type": "boolean",
                "description": "SAML join groups enabled"
              },
              "saml_metadata_url": {
                "type": "string",
                "description": "Saml Metadata Url",
                "maxLength": 2048
              },
              "saml_requested_authn_context_enabled": {
                "type": "boolean",
                "description": "Set to 'false' to disable RequestedAuthnContext"
              },
              "saml_signature_algorithm": {
                "type": "string",
                "description": "SAMLSignatureAlgorithm",
                "enum": [
                  "rsa-sha1",
                  "dsa-sha1",
                  "rsa-sha256",
                  "rsa-sha384",
                  "rsa-sha512"
                ]
              },
              "saml_sp_certificate": {
                "type": "string",
                "description": "Saml Sp Certificate",
                "maxLength": 16384
              },
              "saml_variant": {
                "type": "string",
                "description": "SAMLVariant",
                "enum": ["adfs"]
              },
              "scim_enabled": {
                "type": "boolean",
                "description": "SCIM API enabled"
              },
              "scim_url": {
                "type": "string",
                "description": "Scim Url",
                "maxLength": 2048
              },
              "state": {
                "type": "string",
                "description": "AuthenticationMethodState",
                "enum": ["active", "deleted", "pending_configuration"]
              },
              "update_time": {
                "type": "string",
                "description": "Update Time",
                "maxLength": 36
              }
            },
            "required": [
              "account_id",
              "authentication_method_enabled",
              "authentication_method_id",
              "authentication_method_type",
              "auto_join_team_id",
              "auto_join_user_group_id",
              "create_time",
              "delete_time",
              "state",
              "update_time"
            ]
          }
        },
        "required": ["authentication_method"]
      },
      "AccountAuthenticationMethodDeleteResponse": {
        "type": "object",
        "description": "AccountAuthenticationMethodDeleteResponse",
        "properties": {
          "message": {
            "type": "string",
            "description": "Response message field"
          }
        },
        "required": ["message"]
      },
      "AccountAuthenticationMethodGetResponse": {
        "type": "object",
        "description": "AccountAuthenticationMethodGetResponse",
        "properties": {
          "authentication_method": {
            "type": "object",
            "description": "AuthenticationMethod",
            "properties": {
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "auth_token_extend_when_used": {
                "type": "boolean",
                "description": "Extend authentication token validity when used"
              },
              "auth_token_max_age_seconds": {
                "type": "integer",
                "description": "Auth Token Max Age Seconds",
                "minimum": 300,
                "maximum": 1296000
              },
              "authentication_method_enabled": {
                "type": "boolean",
                "description": "If true, authentication method can be used to access account/projects in account. If false, authentication method can still be used to sign in"
              },
              "authentication_method_id": {
                "type": "string",
                "description": "Authentication Method ID"
              },
              "authentication_method_name": {
                "type": "string",
                "description": "Authentication Method Name",
                "maxLength": 128
              },
              "authentication_method_type": {
                "type": "string",
                "description": "Authentication method type",
                "enum": ["internal", "saml"]
              },
              "auto_join_team_id": {
                "type": "string",
                "description": "Automatically add users to a team, when user signs up using this authentication method",
                "maxLength": 32
              },
              "auto_join_user_group_id": {
                "type": "string",
                "description": "Automatically add users to a group, when user signs up using this authentication method",
                "maxLength": 36
              },
              "create_time": {
                "type": "string",
                "description": "Create Time",
                "maxLength": 36
              },
              "delete_time": {
                "type": "string",
                "description": "Delete Time",
                "maxLength": 36
              },
              "organization_id": {
                "type": "string",
                "description": "Organization ID",
                "maxLength": 36
              },
              "saml_acs_url": {
                "type": "string",
                "description": "Saml Acs Url",
                "maxLength": 2048
              },
              "saml_assertion_signed_enabled": {
                "type": "boolean",
                "description": "Set to 'true' to enable WantAssertionsSigned"
              },
              "saml_authn_requests_signed_enabled": {
                "type": "boolean",
                "description": "Set to 'true' to enable AuthnRequestsSigned"
              },
              "saml_cert": {
                "type": "string",
                "description": "SAMLVariant",
                "enum": ["adfs"]
              },
              "saml_certificate": {
                "type": "string",
                "description": "Identity provider's certificate",
                "maxLength": 16384
              },
              "saml_certificate_issuer": {
                "type": "string",
                "description": "Saml Certificate Issuer"
              },
              "saml_certificate_not_valid_after": {
                "type": "string",
                "description": "Saml Certificate Not Valid After",
                "maxLength": 36
              },
              "saml_certificate_not_valid_before": {
                "type": "string",
                "description": "Saml Certificate Not Valid Before",
                "maxLength": 36
              },
              "saml_certificate_subject": {
                "type": "string",
                "description": "Saml Certificate Subject"
              },
              "saml_digest_algorithm": {
                "type": "string",
                "description": "Digest algorithm. This is an advanced option that typically does not need to be set.",
                "enum": ["sha1", "sha256", "sha384", "sha512"]
              },
              "saml_entity_id": {
                "type": "string",
                "description": "Saml Entity ID",
                "maxLength": 2048
              },
              "saml_field_mapping": {
                "type": "object",
                "description": "SAMLFieldMapping",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Field name for user email",
                    "maxLength": 256
                  },
                  "first_name": {
                    "type": "string",
                    "description": "Field name for user's first name",
                    "maxLength": 256
                  },
                  "groups": {
                    "type": "string",
                    "description": "Field name for user's groups memberships. Contents of this field are used to handle group memberships when SCIM is not available and SAML is used to manage group memberships.",
                    "maxLength": 256
                  },
                  "identity": {
                    "type": "string",
                    "description": "Field name for user's identity. This field must always exist in responses, and must be immutable and unique. Contents of this field are used to identify the user. Using user ID (such as unix user ID) is highly recommended, as email address may change, requiring relinking user to Aiven user.",
                    "maxLength": 256
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Field name for user's lastname",
                    "maxLength": 256
                  },
                  "real_name": {
                    "type": "string",
                    "description": "Field name for user's full name. If specified, first_name and last_name mappings are ignored",
                    "maxLength": 256
                  }
                }
              },
              "saml_idp_login_allowed": {
                "type": "boolean",
                "description": "Set to 'true' to enable IdP initiated login"
              },
              "saml_idp_url": {
                "type": "string",
                "description": "Saml Idp Url",
                "maxLength": 2048
              },
              "saml_join_groups": {
                "type": "boolean",
                "description": "SAML join groups enabled"
              },
              "saml_metadata_url": {
                "type": "string",
                "description": "Saml Metadata Url",
                "maxLength": 2048
              },
              "saml_requested_authn_context_enabled": {
                "type": "boolean",
                "description": "Set to 'false' to disable RequestedAuthnContext"
              },
              "saml_signature_algorithm": {
                "type": "string",
                "description": "SAMLSignatureAlgorithm",
                "enum": [
                  "rsa-sha1",
                  "dsa-sha1",
                  "rsa-sha256",
                  "rsa-sha384",
                  "rsa-sha512"
                ]
              },
              "saml_sp_certificate": {
                "type": "string",
                "description": "Saml Sp Certificate",
                "maxLength": 16384
              },
              "saml_variant": {
                "type": "string",
                "description": "SAMLVariant",
                "enum": ["adfs"]
              },
              "scim_enabled": {
                "type": "boolean",
                "description": "SCIM API enabled"
              },
              "scim_url": {
                "type": "string",
                "description": "Scim Url",
                "maxLength": 2048
              },
              "state": {
                "type": "string",
                "description": "AuthenticationMethodState",
                "enum": ["active", "deleted", "pending_configuration"]
              },
              "update_time": {
                "type": "string",
                "description": "Update Time",
                "maxLength": 36
              }
            },
            "required": [
              "account_id",
              "authentication_method_enabled",
              "authentication_method_id",
              "authentication_method_type",
              "auto_join_team_id",
              "auto_join_user_group_id",
              "create_time",
              "delete_time",
              "state",
              "update_time"
            ]
          }
        },
        "required": ["authentication_method"]
      },
      "AccountAuthenticationMethodUpdateRequestBody": {
        "type": "object",
        "description": "AccountAuthenticationMethodUpdateRequestBody",
        "properties": {
          "auth_token_extend_when_used": {
            "type": "boolean",
            "description": "Extend authentication token validity when used"
          },
          "auth_token_max_age_seconds": {
            "type": "integer",
            "description": "Auth Token Max Age Seconds",
            "minimum": 300,
            "maximum": 1296000
          },
          "authentication_method_enabled": {
            "type": "boolean",
            "description": "If true, authentication method can be used to access account/projects in account. If false, authentication method can still be used to sign in"
          },
          "authentication_method_name": {
            "type": "string",
            "description": "Authentication Method Name",
            "maxLength": 128
          },
          "auto_join_team_id": {
            "type": "string",
            "description": "Automatically add users to a team, when user signs up using this authentication method",
            "maxLength": 32
          },
          "auto_join_user_group_id": {
            "type": "string",
            "description": "Automatically add users to a group, when user signs up using this authentication method",
            "maxLength": 36
          },
          "saml_assertion_signed_enabled": {
            "type": "boolean",
            "description": "Set to 'true' to enable WantAssertionsSigned"
          },
          "saml_authn_requests_signed_enabled": {
            "type": "boolean",
            "description": "Set to 'true' to enable AuthnRequestsSigned"
          },
          "saml_certificate": {
            "type": "string",
            "description": "Identity provider's certificate",
            "maxLength": 16384
          },
          "saml_digest_algorithm": {
            "type": "string",
            "description": "Digest algorithm. This is an advanced option that typically does not need to be set.",
            "enum": ["sha1", "sha256", "sha384", "sha512"]
          },
          "saml_entity_id": {
            "type": "string",
            "description": "Saml Entity ID",
            "maxLength": 2048
          },
          "saml_field_mapping": {
            "type": "object",
            "description": "SAMLFieldMapping",
            "properties": {
              "email": {
                "type": "string",
                "description": "Field name for user email",
                "maxLength": 256
              },
              "first_name": {
                "type": "string",
                "description": "Field name for user's first name",
                "maxLength": 256
              },
              "groups": {
                "type": "string",
                "description": "Field name for user's groups memberships. Contents of this field are used to handle group memberships when SCIM is not available and SAML is used to manage group memberships.",
                "maxLength": 256
              },
              "identity": {
                "type": "string",
                "description": "Field name for user's identity. This field must always exist in responses, and must be immutable and unique. Contents of this field are used to identify the user. Using user ID (such as unix user ID) is highly recommended, as email address may change, requiring relinking user to Aiven user.",
                "maxLength": 256
              },
              "last_name": {
                "type": "string",
                "description": "Field name for user's lastname",
                "maxLength": 256
              },
              "real_name": {
                "type": "string",
                "description": "Field name for user's full name. If specified, first_name and last_name mappings are ignored",
                "maxLength": 256
              }
            }
          },
          "saml_idp_login_allowed": {
            "type": "boolean",
            "description": "Set to 'true' to enable IdP initiated login"
          },
          "saml_idp_url": {
            "type": "string",
            "description": "Saml Idp Url",
            "maxLength": 2048
          },
          "saml_join_groups": {
            "type": "boolean",
            "description": "SAML join groups enabled"
          },
          "saml_requested_authn_context_enabled": {
            "type": "boolean",
            "description": "Set to 'false' to disable RequestedAuthnContext"
          },
          "saml_signature_algorithm": {
            "type": "string",
            "description": "SAMLSignatureAlgorithm",
            "enum": [
              "rsa-sha1",
              "dsa-sha1",
              "rsa-sha256",
              "rsa-sha384",
              "rsa-sha512"
            ]
          },
          "saml_variant": {
            "type": "string",
            "description": "SAMLVariant",
            "enum": ["adfs"]
          },
          "scim_enabled": { "type": "boolean", "description": "SCIM enabled" }
        }
      },
      "AccountAuthenticationMethodUpdateResponse": {
        "type": "object",
        "description": "AccountAuthenticationMethodUpdateResponse",
        "properties": {
          "authentication_method": {
            "type": "object",
            "description": "AuthenticationMethod",
            "properties": {
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "auth_token_extend_when_used": {
                "type": "boolean",
                "description": "Extend authentication token validity when used"
              },
              "auth_token_max_age_seconds": {
                "type": "integer",
                "description": "Auth Token Max Age Seconds",
                "minimum": 300,
                "maximum": 1296000
              },
              "authentication_method_enabled": {
                "type": "boolean",
                "description": "If true, authentication method can be used to access account/projects in account. If false, authentication method can still be used to sign in"
              },
              "authentication_method_id": {
                "type": "string",
                "description": "Authentication Method ID"
              },
              "authentication_method_name": {
                "type": "string",
                "description": "Authentication Method Name",
                "maxLength": 128
              },
              "authentication_method_type": {
                "type": "string",
                "description": "Authentication method type",
                "enum": ["internal", "saml"]
              },
              "auto_join_team_id": {
                "type": "string",
                "description": "Automatically add users to a team, when user signs up using this authentication method",
                "maxLength": 32
              },
              "auto_join_user_group_id": {
                "type": "string",
                "description": "Automatically add users to a group, when user signs up using this authentication method",
                "maxLength": 36
              },
              "create_time": {
                "type": "string",
                "description": "Create Time",
                "maxLength": 36
              },
              "delete_time": {
                "type": "string",
                "description": "Delete Time",
                "maxLength": 36
              },
              "organization_id": {
                "type": "string",
                "description": "Organization ID",
                "maxLength": 36
              },
              "saml_acs_url": {
                "type": "string",
                "description": "Saml Acs Url",
                "maxLength": 2048
              },
              "saml_assertion_signed_enabled": {
                "type": "boolean",
                "description": "Set to 'true' to enable WantAssertionsSigned"
              },
              "saml_authn_requests_signed_enabled": {
                "type": "boolean",
                "description": "Set to 'true' to enable AuthnRequestsSigned"
              },
              "saml_cert": {
                "type": "string",
                "description": "SAMLVariant",
                "enum": ["adfs"]
              },
              "saml_certificate": {
                "type": "string",
                "description": "Identity provider's certificate",
                "maxLength": 16384
              },
              "saml_certificate_issuer": {
                "type": "string",
                "description": "Saml Certificate Issuer"
              },
              "saml_certificate_not_valid_after": {
                "type": "string",
                "description": "Saml Certificate Not Valid After",
                "maxLength": 36
              },
              "saml_certificate_not_valid_before": {
                "type": "string",
                "description": "Saml Certificate Not Valid Before",
                "maxLength": 36
              },
              "saml_certificate_subject": {
                "type": "string",
                "description": "Saml Certificate Subject"
              },
              "saml_digest_algorithm": {
                "type": "string",
                "description": "Digest algorithm. This is an advanced option that typically does not need to be set.",
                "enum": ["sha1", "sha256", "sha384", "sha512"]
              },
              "saml_entity_id": {
                "type": "string",
                "description": "Saml Entity ID",
                "maxLength": 2048
              },
              "saml_field_mapping": {
                "type": "object",
                "description": "SAMLFieldMapping",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Field name for user email",
                    "maxLength": 256
                  },
                  "first_name": {
                    "type": "string",
                    "description": "Field name for user's first name",
                    "maxLength": 256
                  },
                  "groups": {
                    "type": "string",
                    "description": "Field name for user's groups memberships. Contents of this field are used to handle group memberships when SCIM is not available and SAML is used to manage group memberships.",
                    "maxLength": 256
                  },
                  "identity": {
                    "type": "string",
                    "description": "Field name for user's identity. This field must always exist in responses, and must be immutable and unique. Contents of this field are used to identify the user. Using user ID (such as unix user ID) is highly recommended, as email address may change, requiring relinking user to Aiven user.",
                    "maxLength": 256
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Field name for user's lastname",
                    "maxLength": 256
                  },
                  "real_name": {
                    "type": "string",
                    "description": "Field name for user's full name. If specified, first_name and last_name mappings are ignored",
                    "maxLength": 256
                  }
                }
              },
              "saml_idp_login_allowed": {
                "type": "boolean",
                "description": "Set to 'true' to enable IdP initiated login"
              },
              "saml_idp_url": {
                "type": "string",
                "description": "Saml Idp Url",
                "maxLength": 2048
              },
              "saml_join_groups": {
                "type": "boolean",
                "description": "SAML join groups enabled"
              },
              "saml_metadata_url": {
                "type": "string",
                "description": "Saml Metadata Url",
                "maxLength": 2048
              },
              "saml_requested_authn_context_enabled": {
                "type": "boolean",
                "description": "Set to 'false' to disable RequestedAuthnContext"
              },
              "saml_signature_algorithm": {
                "type": "string",
                "description": "SAMLSignatureAlgorithm",
                "enum": [
                  "rsa-sha1",
                  "dsa-sha1",
                  "rsa-sha256",
                  "rsa-sha384",
                  "rsa-sha512"
                ]
              },
              "saml_sp_certificate": {
                "type": "string",
                "description": "Saml Sp Certificate",
                "maxLength": 16384
              },
              "saml_variant": {
                "type": "string",
                "description": "SAMLVariant",
                "enum": ["adfs"]
              },
              "scim_enabled": {
                "type": "boolean",
                "description": "SCIM API enabled"
              },
              "scim_url": {
                "type": "string",
                "description": "Scim Url",
                "maxLength": 2048
              },
              "state": {
                "type": "string",
                "description": "AuthenticationMethodState",
                "enum": ["active", "deleted", "pending_configuration"]
              },
              "update_time": {
                "type": "string",
                "description": "Update Time",
                "maxLength": 36
              }
            },
            "required": [
              "account_id",
              "authentication_method_enabled",
              "authentication_method_id",
              "authentication_method_type",
              "auto_join_team_id",
              "auto_join_user_group_id",
              "create_time",
              "delete_time",
              "state",
              "update_time"
            ]
          }
        },
        "required": ["authentication_method"]
      },
      "AccountAuthenticationMethodsListResponse": {
        "type": "object",
        "description": "AccountAuthenticationMethodsListResponse",
        "properties": {
          "authentication_methods": {
            "type": "array",
            "description": "Authentication Methods",
            "items": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "auth_token_extend_when_used": {
                  "type": "boolean",
                  "description": "Extend authentication token validity when used"
                },
                "auth_token_max_age_seconds": {
                  "type": "integer",
                  "description": "Auth Token Max Age Seconds",
                  "minimum": 300,
                  "maximum": 1296000
                },
                "authentication_method_enabled": {
                  "type": "boolean",
                  "description": "If true, authentication method can be used to access account/projects in account. If false, authentication method can still be used to sign in"
                },
                "authentication_method_id": {
                  "type": "string",
                  "description": "Authentication Method ID"
                },
                "authentication_method_name": {
                  "type": "string",
                  "description": "Authentication Method Name",
                  "maxLength": 128
                },
                "authentication_method_type": {
                  "type": "string",
                  "description": "Authentication method type",
                  "enum": ["internal", "saml"]
                },
                "auto_join_team_id": {
                  "type": "string",
                  "description": "Automatically add users to a team, when user signs up using this authentication method",
                  "maxLength": 32
                },
                "auto_join_user_group_id": {
                  "type": "string",
                  "description": "Automatically add users to a group, when user signs up using this authentication method",
                  "maxLength": 36
                },
                "create_time": {
                  "type": "string",
                  "description": "Create Time",
                  "maxLength": 36
                },
                "delete_time": {
                  "type": "string",
                  "description": "Delete Time",
                  "maxLength": 36
                },
                "organization_id": {
                  "type": "string",
                  "description": "Organization ID",
                  "maxLength": 36
                },
                "saml_acs_url": {
                  "type": "string",
                  "description": "Saml Acs Url",
                  "maxLength": 2048
                },
                "saml_assertion_signed_enabled": {
                  "type": "boolean",
                  "description": "Set to 'true' to enable WantAssertionsSigned"
                },
                "saml_authn_requests_signed_enabled": {
                  "type": "boolean",
                  "description": "Set to 'true' to enable AuthnRequestsSigned"
                },
                "saml_cert": {
                  "type": "string",
                  "description": "SAMLVariant",
                  "enum": ["adfs"]
                },
                "saml_certificate": {
                  "type": "string",
                  "description": "Identity provider's certificate",
                  "maxLength": 16384
                },
                "saml_certificate_issuer": {
                  "type": "string",
                  "description": "Saml Certificate Issuer"
                },
                "saml_certificate_not_valid_after": {
                  "type": "string",
                  "description": "Saml Certificate Not Valid After",
                  "maxLength": 36
                },
                "saml_certificate_not_valid_before": {
                  "type": "string",
                  "description": "Saml Certificate Not Valid Before",
                  "maxLength": 36
                },
                "saml_certificate_subject": {
                  "type": "string",
                  "description": "Saml Certificate Subject"
                },
                "saml_digest_algorithm": {
                  "type": "string",
                  "description": "Digest algorithm. This is an advanced option that typically does not need to be set.",
                  "enum": ["sha1", "sha256", "sha384", "sha512"]
                },
                "saml_entity_id": {
                  "type": "string",
                  "description": "Saml Entity ID",
                  "maxLength": 2048
                },
                "saml_field_mapping": {
                  "type": "object",
                  "description": "SAMLFieldMapping",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "Field name for user email",
                      "maxLength": 256
                    },
                    "first_name": {
                      "type": "string",
                      "description": "Field name for user's first name",
                      "maxLength": 256
                    },
                    "groups": {
                      "type": "string",
                      "description": "Field name for user's groups memberships. Contents of this field are used to handle group memberships when SCIM is not available and SAML is used to manage group memberships.",
                      "maxLength": 256
                    },
                    "identity": {
                      "type": "string",
                      "description": "Field name for user's identity. This field must always exist in responses, and must be immutable and unique. Contents of this field are used to identify the user. Using user ID (such as unix user ID) is highly recommended, as email address may change, requiring relinking user to Aiven user.",
                      "maxLength": 256
                    },
                    "last_name": {
                      "type": "string",
                      "description": "Field name for user's lastname",
                      "maxLength": 256
                    },
                    "real_name": {
                      "type": "string",
                      "description": "Field name for user's full name. If specified, first_name and last_name mappings are ignored",
                      "maxLength": 256
                    }
                  }
                },
                "saml_idp_login_allowed": {
                  "type": "boolean",
                  "description": "Set to 'true' to enable IdP initiated login"
                },
                "saml_idp_url": {
                  "type": "string",
                  "description": "Saml Idp Url",
                  "maxLength": 2048
                },
                "saml_join_groups": {
                  "type": "boolean",
                  "description": "SAML join groups enabled"
                },
                "saml_metadata_url": {
                  "type": "string",
                  "description": "Saml Metadata Url",
                  "maxLength": 2048
                },
                "saml_requested_authn_context_enabled": {
                  "type": "boolean",
                  "description": "Set to 'false' to disable RequestedAuthnContext"
                },
                "saml_signature_algorithm": {
                  "type": "string",
                  "description": "SAMLSignatureAlgorithm",
                  "enum": [
                    "rsa-sha1",
                    "dsa-sha1",
                    "rsa-sha256",
                    "rsa-sha384",
                    "rsa-sha512"
                  ]
                },
                "saml_sp_certificate": {
                  "type": "string",
                  "description": "Saml Sp Certificate",
                  "maxLength": 16384
                },
                "saml_variant": {
                  "type": "string",
                  "description": "SAMLVariant",
                  "enum": ["adfs"]
                },
                "scim_enabled": {
                  "type": "boolean",
                  "description": "SCIM API enabled"
                },
                "scim_url": {
                  "type": "string",
                  "description": "Scim Url",
                  "maxLength": 2048
                },
                "state": {
                  "type": "string",
                  "description": "AuthenticationMethodState",
                  "enum": ["active", "deleted", "pending_configuration"]
                },
                "update_time": {
                  "type": "string",
                  "description": "Update Time",
                  "maxLength": 36
                }
              },
              "required": [
                "account_id",
                "authentication_method_enabled",
                "authentication_method_id",
                "authentication_method_type",
                "auto_join_team_id",
                "auto_join_user_group_id",
                "create_time",
                "delete_time",
                "state",
                "update_time"
              ]
            }
          }
        },
        "required": ["authentication_methods"]
      },
      "AccountBillingGroupListResponse": {
        "type": "object",
        "description": "AccountBillingGroupListResponse",
        "properties": {
          "account_billing_groups": {
            "type": "array",
            "description": "List of billing groups",
            "items": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "account_name": {
                  "type": "string",
                  "description": "Account name",
                  "maxLength": 128
                },
                "address_lines": {
                  "type": "array",
                  "description": "Address lines",
                  "maxItems": 16,
                  "items": { "type": "string" }
                },
                "billing_address": {
                  "type": "string",
                  "description": "DEPRECATED: use split address fields like company, address_lines, zip_code, city and state instead",
                  "maxLength": 1000
                },
                "billing_address_id": {
                  "type": "string",
                  "description": "Address ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "billing_contact_emails": {
                  "type": "array",
                  "description": "List of billing groups contact email addresses",
                  "maxItems": 10,
                  "items": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "description": "User email address",
                        "maxLength": 319
                      }
                    },
                    "required": ["email"]
                  }
                },
                "billing_currency": {
                  "type": "string",
                  "description": "Billing currency",
                  "enum": [
                    "AUD",
                    "CAD",
                    "CHF",
                    "DKK",
                    "EUR",
                    "GBP",
                    "JPY",
                    "NOK",
                    "NZD",
                    "SEK",
                    "SGD",
                    "USD"
                  ]
                },
                "billing_emails": {
                  "type": "array",
                  "description": "List of project billing email addresses",
                  "maxItems": 10,
                  "items": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "description": "User email address",
                        "maxLength": 319
                      }
                    },
                    "required": ["email"]
                  }
                },
                "billing_extra_text": {
                  "type": "string",
                  "description": "Extra text to be included in all project invoices, e.g. purchase order or cost center number",
                  "maxLength": 1000
                },
                "billing_group_id": {
                  "type": "string",
                  "description": "Billing group ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "billing_group_name": {
                  "type": "string",
                  "description": "Billing group name",
                  "maxLength": 128
                },
                "billing_type": {
                  "type": "string",
                  "description": "Method of charging/invoicing this project"
                },
                "card_info": {
                  "type": "object",
                  "description": "Credit card assigned to the project",
                  "properties": {
                    "brand": { "type": "string", "description": "Brand" },
                    "card_id": {
                      "type": "string",
                      "description": "Credit card ID",
                      "maxLength": 64
                    },
                    "country": {
                      "type": "string",
                      "description": "Country",
                      "maxLength": 128
                    },
                    "country_code": {
                      "type": "string",
                      "description": "Two letter ISO country code",
                      "maxLength": 2
                    },
                    "exp_month": {
                      "type": "integer",
                      "description": "Expiration month",
                      "minimum": 1,
                      "maximum": 12
                    },
                    "exp_year": {
                      "type": "integer",
                      "description": "Expiration year",
                      "minimum": 2015,
                      "maximum": 2100
                    },
                    "last4": {
                      "type": "string",
                      "description": "Credit card last four digits"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name on the credit card",
                      "maxLength": 256
                    },
                    "user_email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": [
                    "brand",
                    "card_id",
                    "country",
                    "country_code",
                    "exp_month",
                    "exp_year",
                    "last4",
                    "name",
                    "user_email"
                  ]
                },
                "city": {
                  "type": "string",
                  "description": "Address city",
                  "maxLength": 512
                },
                "company": {
                  "type": "string",
                  "description": "Name of a company",
                  "maxLength": 128
                },
                "country": {
                  "type": "string",
                  "description": "Billing country",
                  "maxLength": 128
                },
                "country_code": {
                  "type": "string",
                  "description": "Two letter ISO country code",
                  "maxLength": 2
                },
                "create_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "estimated_balance_local": {
                  "type": "string",
                  "description": "Estimated balance in billing currency, before tax"
                },
                "estimated_balance_usd": {
                  "type": "string",
                  "description": "Estimated balance in USD, before tax"
                },
                "payment_method": {
                  "type": "string",
                  "description": "Payment method",
                  "enum": [
                    "accrual",
                    "card",
                    "disabled",
                    "email",
                    "no_payment_expected",
                    "partner"
                  ]
                },
                "shipping_address_id": {
                  "type": "string",
                  "description": "Address ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "state": {
                  "type": "string",
                  "description": "Address state or province",
                  "maxLength": 128
                },
                "vat_id": {
                  "type": "string",
                  "description": "EU VAT Identification Number",
                  "maxLength": 64
                },
                "zip_code": {
                  "type": "string",
                  "description": "Address zip code",
                  "maxLength": 32
                }
              },
              "required": [
                "account_id",
                "account_name",
                "address_lines",
                "billing_contact_emails",
                "billing_currency",
                "billing_emails",
                "billing_extra_text",
                "billing_group_id",
                "billing_group_name",
                "billing_type",
                "card_info",
                "city",
                "company",
                "country",
                "country_code",
                "create_time",
                "estimated_balance_local",
                "estimated_balance_usd",
                "payment_method",
                "state",
                "vat_id",
                "zip_code"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["account_billing_groups"]
      },
      "AccountCreateRequestBody": {
        "type": "object",
        "description": "AccountCreateRequestBody",
        "properties": {
          "account_name": {
            "type": "string",
            "description": "Account name",
            "maxLength": 128
          },
          "parent_account_id": {
            "type": "string",
            "description": "Account ID",
            "maxLength": 36
          },
          "primary_billing_group_id": {
            "type": "string",
            "description": "Billing group ID",
            "minLength": 36,
            "maxLength": 36
          }
        },
        "required": ["account_name"]
      },
      "AccountCreateResponse": {
        "type": "object",
        "description": "AccountCreateResponse",
        "properties": {
          "account": {
            "type": "object",
            "description": "Account details",
            "properties": {
              "access_source": {
                "type": "string",
                "description": "Describe the source of the account",
                "enum": [
                  "descendant_membership",
                  "organization_membership",
                  "project_membership",
                  "team_membership"
                ]
              },
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "account_name": {
                "type": "string",
                "description": "Account name",
                "maxLength": 128
              },
              "account_owner_team_id": {
                "type": "string",
                "description": "Team ID",
                "maxLength": 32
              },
              "create_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              },
              "features": {
                "type": "object",
                "description": "Feature flags",
                "properties": {}
              },
              "is_account_member": {
                "type": "boolean",
                "description": "If true, user is part of a team of this or a parent account"
              },
              "is_account_owner": {
                "type": "boolean",
                "description": "If true, user is part of the owners team for this account"
              },
              "organization_id": {
                "type": "string",
                "description": "Organization ID",
                "maxLength": 36
              },
              "parent_account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "primary_billing_group_id": {
                "type": "string",
                "description": "Billing group ID",
                "minLength": 36,
                "maxLength": 36
              },
              "root_account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "tenant_id": {
                "type": "string",
                "description": "Tenant identifier",
                "maxLength": 64
              },
              "update_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              }
            },
            "required": [
              "account_id",
              "account_name",
              "account_owner_team_id",
              "create_time",
              "is_account_owner",
              "organization_id",
              "primary_billing_group_id",
              "root_account_id",
              "update_time"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["account"]
      },
      "AccountDeleteResponse": {
        "type": "object",
        "description": "AccountDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "AccountEventListResponse": {
        "type": "object",
        "description": "AccountEventListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "events": {
            "type": "array",
            "description": "List of events",
            "items": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "action_description": {
                  "type": "string",
                  "description": "Event description"
                },
                "action_type": {
                  "type": "string",
                  "description": "Event type"
                },
                "actor": { "type": "string", "description": "Actor details" },
                "actor_user_id": { "type": "string", "description": "User ID" },
                "create_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "log_entry_id": {
                  "type": "integer",
                  "description": "Entry ID",
                  "minimum": 0
                },
                "team_id": {
                  "type": "string",
                  "description": "Team ID",
                  "maxLength": 32
                }
              },
              "required": [
                "account_id",
                "action_description",
                "action_type",
                "actor",
                "actor_user_id",
                "create_time",
                "log_entry_id",
                "team_id"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["events"]
      },
      "AccountGetResponse": {
        "type": "object",
        "description": "AccountGetResponse",
        "properties": {
          "account": {
            "type": "object",
            "description": "Account details",
            "properties": {
              "access_source": {
                "type": "string",
                "description": "Describe the source of the account",
                "enum": [
                  "descendant_membership",
                  "organization_membership",
                  "project_membership",
                  "team_membership"
                ]
              },
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "account_name": {
                "type": "string",
                "description": "Account name",
                "maxLength": 128
              },
              "account_owner_team_id": {
                "type": "string",
                "description": "Team ID",
                "maxLength": 32
              },
              "create_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              },
              "features": {
                "type": "object",
                "description": "Feature flags",
                "properties": {}
              },
              "is_account_member": {
                "type": "boolean",
                "description": "If true, user is part of a team of this or a parent account"
              },
              "is_account_owner": {
                "type": "boolean",
                "description": "If true, user is part of the owners team for this account"
              },
              "organization_id": {
                "type": "string",
                "description": "Organization ID",
                "maxLength": 36
              },
              "parent_account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "primary_billing_group_id": {
                "type": "string",
                "description": "Billing group ID",
                "minLength": 36,
                "maxLength": 36
              },
              "root_account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "tenant_id": {
                "type": "string",
                "description": "Tenant identifier",
                "maxLength": 64
              },
              "update_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              }
            },
            "required": [
              "account_id",
              "account_name",
              "account_owner_team_id",
              "create_time",
              "is_account_owner",
              "organization_id",
              "primary_billing_group_id",
              "root_account_id",
              "update_time"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["account"]
      },
      "AccountListResponse": {
        "type": "object",
        "description": "AccountListResponse",
        "properties": {
          "accounts": {
            "type": "array",
            "description": "List of accounts",
            "items": {
              "type": "object",
              "properties": {
                "access_source": {
                  "type": "string",
                  "description": "Describe the source of the account",
                  "enum": [
                    "descendant_membership",
                    "organization_membership",
                    "project_membership",
                    "team_membership"
                  ]
                },
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "account_name": {
                  "type": "string",
                  "description": "Account name",
                  "maxLength": 128
                },
                "account_owner_team_id": {
                  "type": "string",
                  "description": "Team ID",
                  "maxLength": 32
                },
                "create_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "features": {
                  "type": "object",
                  "description": "Feature flags",
                  "properties": {}
                },
                "is_account_member": {
                  "type": "boolean",
                  "description": "If true, user is part of a team of this or a parent account"
                },
                "is_account_owner": {
                  "type": "boolean",
                  "description": "If true, user is part of the owners team for this account"
                },
                "organization_id": {
                  "type": "string",
                  "description": "Organization ID",
                  "maxLength": 36
                },
                "parent_account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "primary_billing_group_id": {
                  "type": "string",
                  "description": "Billing group ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "root_account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "tenant_id": {
                  "type": "string",
                  "description": "Tenant identifier",
                  "maxLength": 64
                },
                "update_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                }
              },
              "required": [
                "account_id",
                "account_name",
                "account_owner_team_id",
                "create_time",
                "is_account_owner",
                "organization_id",
                "primary_billing_group_id",
                "root_account_id",
                "update_time"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["accounts"]
      },
      "AccountMoveRequestBody": {
        "type": "object",
        "description": "AccountMoveRequestBody",
        "properties": {
          "parent_account_id": {
            "type": "string",
            "description": "Account ID",
            "maxLength": 36
          }
        },
        "required": ["parent_account_id"]
      },
      "AccountMoveResponse": {
        "type": "object",
        "description": "AccountMoveResponse",
        "properties": {
          "account": {
            "type": "object",
            "description": "Account details",
            "properties": {
              "access_source": {
                "type": "string",
                "description": "Describe the source of the account",
                "enum": [
                  "descendant_membership",
                  "organization_membership",
                  "project_membership",
                  "team_membership"
                ]
              },
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "account_name": {
                "type": "string",
                "description": "Account name",
                "maxLength": 128
              },
              "account_owner_team_id": {
                "type": "string",
                "description": "Team ID",
                "maxLength": 32
              },
              "create_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              },
              "features": {
                "type": "object",
                "description": "Feature flags",
                "properties": {}
              },
              "is_account_member": {
                "type": "boolean",
                "description": "If true, user is part of a team of this or a parent account"
              },
              "is_account_owner": {
                "type": "boolean",
                "description": "If true, user is part of the owners team for this account"
              },
              "organization_id": {
                "type": "string",
                "description": "Organization ID",
                "maxLength": 36
              },
              "parent_account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "primary_billing_group_id": {
                "type": "string",
                "description": "Billing group ID",
                "minLength": 36,
                "maxLength": 36
              },
              "root_account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "tenant_id": {
                "type": "string",
                "description": "Tenant identifier",
                "maxLength": 64
              },
              "update_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              }
            },
            "required": [
              "account_id",
              "account_name",
              "account_owner_team_id",
              "create_time",
              "is_account_owner",
              "organization_id",
              "primary_billing_group_id",
              "root_account_id",
              "update_time"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["account"]
      },
      "AccountPaymentMethodDeleteResponse": {
        "type": "object",
        "description": "AccountPaymentMethodDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "AccountPaymentMethodsListResponse": {
        "type": "object",
        "description": "AccountPaymentMethodsListResponse",
        "properties": {
          "cards": {
            "type": "array",
            "description": "List of account's credit cards",
            "items": {
              "type": "object",
              "properties": {
                "brand": { "type": "string", "description": "Brand" },
                "card_id": {
                  "type": "string",
                  "description": "Credit card ID",
                  "maxLength": 64
                },
                "country": {
                  "type": "string",
                  "description": "Country",
                  "maxLength": 128
                },
                "country_code": {
                  "type": "string",
                  "description": "Two letter ISO country code",
                  "maxLength": 2
                },
                "exp_month": {
                  "type": "integer",
                  "description": "Expiration month",
                  "minimum": 1,
                  "maximum": 12
                },
                "exp_year": {
                  "type": "integer",
                  "description": "Expiration year",
                  "minimum": 2015,
                  "maximum": 2100
                },
                "last4": {
                  "type": "string",
                  "description": "Credit card last four digits"
                },
                "name": {
                  "type": "string",
                  "description": "Name on the credit card",
                  "maxLength": 256
                }
              },
              "required": [
                "brand",
                "card_id",
                "country",
                "country_code",
                "exp_month",
                "exp_year",
                "last4",
                "name"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["cards"]
      },
      "AccountProjectsListResponse": {
        "type": "object",
        "description": "AccountProjectsListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "projects": {
            "type": "array",
            "description": "List of projects",
            "items": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "account_name": {
                  "type": "string",
                  "description": "Account name",
                  "maxLength": 128
                },
                "address_lines": {
                  "type": "array",
                  "description": "Address lines",
                  "maxItems": 16,
                  "items": { "type": "string" }
                },
                "available_credits": {
                  "type": "string",
                  "description": "Available credits, in USD"
                },
                "billing_address": {
                  "type": "string",
                  "description": "DEPRECATED: use split address fields like company, address_lines, zip_code, city and state instead",
                  "maxLength": 1000
                },
                "billing_currency": {
                  "type": "string",
                  "description": "Billing currency",
                  "enum": [
                    "AUD",
                    "CAD",
                    "CHF",
                    "DKK",
                    "EUR",
                    "GBP",
                    "JPY",
                    "NOK",
                    "NZD",
                    "SEK",
                    "SGD",
                    "USD"
                  ]
                },
                "billing_emails": {
                  "type": "array",
                  "description": "List of project billing email addresses",
                  "maxItems": 10,
                  "items": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "description": "User email address",
                        "maxLength": 319
                      }
                    },
                    "required": ["email"]
                  }
                },
                "billing_extra_text": {
                  "type": "string",
                  "description": "Extra text to be included in all project invoices, e.g. purchase order or cost center number",
                  "maxLength": 1000
                },
                "billing_group_id": {
                  "type": "string",
                  "description": "Billing group ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "billing_group_name": {
                  "type": "string",
                  "description": "Billing group name",
                  "maxLength": 128
                },
                "card_info": {
                  "type": "object",
                  "description": "Credit card assigned to the project",
                  "properties": {
                    "brand": { "type": "string", "description": "Brand" },
                    "card_id": {
                      "type": "string",
                      "description": "Credit card ID",
                      "maxLength": 64
                    },
                    "country": {
                      "type": "string",
                      "description": "Country",
                      "maxLength": 128
                    },
                    "country_code": {
                      "type": "string",
                      "description": "Two letter ISO country code",
                      "maxLength": 2
                    },
                    "exp_month": {
                      "type": "integer",
                      "description": "Expiration month",
                      "minimum": 1,
                      "maximum": 12
                    },
                    "exp_year": {
                      "type": "integer",
                      "description": "Expiration year",
                      "minimum": 2015,
                      "maximum": 2100
                    },
                    "last4": {
                      "type": "string",
                      "description": "Credit card last four digits"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name on the credit card",
                      "maxLength": 256
                    },
                    "user_email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": [
                    "brand",
                    "card_id",
                    "country",
                    "country_code",
                    "exp_month",
                    "exp_year",
                    "last4",
                    "name",
                    "user_email"
                  ]
                },
                "city": {
                  "type": "string",
                  "description": "Address city",
                  "maxLength": 512
                },
                "company": {
                  "type": "string",
                  "description": "Name of a company",
                  "maxLength": 128
                },
                "country": {
                  "type": "string",
                  "description": "Billing country",
                  "maxLength": 128
                },
                "country_code": {
                  "type": "string",
                  "description": "Two letter ISO country code",
                  "maxLength": 2
                },
                "default_cloud": {
                  "type": "string",
                  "description": "Default cloud to use when launching services",
                  "maxLength": 256
                },
                "end_of_life_extension": {
                  "type": "object",
                  "description": "End of life extension information",
                  "properties": {
                    "elasticsearch": {
                      "type": "object",
                      "description": "Service EOL extension",
                      "properties": {
                        "eol_date": {
                          "type": "string",
                          "description": "Extended EOL date"
                        },
                        "version": {
                          "type": "string",
                          "description": "Service version"
                        }
                      },
                      "required": ["eol_date", "version"]
                    }
                  }
                },
                "estimated_balance": {
                  "type": "string",
                  "description": "Estimated balance, in USD"
                },
                "estimated_balance_local": {
                  "type": "string",
                  "description": "Estimated balance, in billing currency"
                },
                "features": {
                  "type": "object",
                  "description": "Feature flags",
                  "properties": {}
                },
                "organization_id": {
                  "type": "string",
                  "description": "Organization ID",
                  "maxLength": 36
                },
                "payment_method": {
                  "type": "string",
                  "description": "Payment method"
                },
                "project_name": {
                  "type": "string",
                  "description": "Project name",
                  "maxLength": 63
                },
                "state": {
                  "type": "string",
                  "description": "Address state or province",
                  "maxLength": 128
                },
                "tags": {
                  "type": "object",
                  "description": "Set of resource tags",
                  "properties": {}
                },
                "tech_emails": {
                  "type": "array",
                  "description": "List of project tech email addresses",
                  "maxItems": 10,
                  "items": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "description": "User email address",
                        "maxLength": 319
                      }
                    },
                    "required": ["email"]
                  }
                },
                "tenant_id": { "type": "string", "description": "Tenant ID" },
                "trial_expiration_time": {
                  "type": "string",
                  "description": "Trial expiration time (ISO 8601)",
                  "maxLength": 36
                },
                "vat_id": {
                  "type": "string",
                  "description": "EU VAT Identification Number",
                  "maxLength": 64
                },
                "zip_code": {
                  "type": "string",
                  "description": "Address zip code",
                  "maxLength": 32
                }
              },
              "required": [
                "account_id",
                "billing_address",
                "billing_emails",
                "billing_group_id",
                "billing_group_name",
                "country",
                "country_code",
                "default_cloud",
                "estimated_balance",
                "organization_id",
                "payment_method",
                "project_name",
                "vat_id"
              ]
            }
          },
          "total_project_count": {
            "type": "integer",
            "description": "Total count of projects associated to account."
          }
        },
        "required": ["projects"]
      },
      "AccountProjectsTeamsListResponse": {
        "type": "object",
        "description": "AccountProjectsTeamsListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "teams": {
            "type": "array",
            "description": "List of teams",
            "items": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "create_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "team_id": {
                  "type": "string",
                  "description": "Team ID",
                  "maxLength": 32
                },
                "team_name": {
                  "type": "string",
                  "description": "Team name",
                  "maxLength": 128
                },
                "team_type": {
                  "type": "string",
                  "description": "Team type (permission level)",
                  "enum": [
                    "admin",
                    "operator",
                    "developer",
                    "read_only",
                    "project:integrations:read",
                    "project:integrations:write",
                    "project:networking:read",
                    "project:networking:write",
                    "project:permissions:read",
                    "service:configuration:write",
                    "service:logs:read",
                    "project:services:read",
                    "project:services:write",
                    "project:audit_logs:read",
                    "service:data:write",
                    "service:secrets:read",
                    "service:users:write",
                    "role:services:maintenance",
                    "role:services:recover",
                    "organization:audit_logs:read",
                    "organization:projects:write",
                    "organization:users:write",
                    "organization:app_users:write",
                    "organization:groups:write",
                    "organization:idps:write",
                    "organization:domains:write",
                    "organization:networking:read",
                    "organization:networking:write",
                    "role:organization:admin"
                  ]
                },
                "update_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                }
              },
              "required": ["team_id", "team_name"]
            }
          }
        },
        "required": ["teams"]
      },
      "AccountTeamCreateRequestBody": {
        "type": "object",
        "description": "AccountTeamCreateRequestBody",
        "properties": {
          "team_name": {
            "type": "string",
            "description": "Team name",
            "maxLength": 128
          }
        },
        "required": ["team_name"]
      },
      "AccountTeamCreateResponse": {
        "type": "object",
        "description": "AccountTeamCreateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "team": {
            "type": "object",
            "description": "Account Team details",
            "properties": {
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "create_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              },
              "team_id": {
                "type": "string",
                "description": "Team ID",
                "maxLength": 32
              },
              "team_name": {
                "type": "string",
                "description": "Team name",
                "maxLength": 128
              },
              "update_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              }
            },
            "required": ["team_id", "team_name"]
          }
        },
        "required": ["team"]
      },
      "AccountTeamDeleteResponse": {
        "type": "object",
        "description": "AccountTeamDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "AccountTeamGetResponse": {
        "type": "object",
        "description": "AccountTeamGetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "team": {
            "type": "object",
            "description": "Account Team details",
            "properties": {
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "create_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              },
              "team_id": {
                "type": "string",
                "description": "Team ID",
                "maxLength": 32
              },
              "team_name": {
                "type": "string",
                "description": "Team name",
                "maxLength": 128
              },
              "update_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              }
            },
            "required": ["team_id", "team_name"]
          }
        },
        "required": ["team"]
      },
      "AccountTeamInvitesListResponse": {
        "type": "object",
        "description": "AccountTeamInvitesListResponse",
        "properties": {
          "account_invites": {
            "type": "array",
            "description": "List of invites",
            "items": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "account_name": {
                  "type": "string",
                  "description": "Account name",
                  "maxLength": 128
                },
                "create_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "invited_by_user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                },
                "team_id": {
                  "type": "string",
                  "description": "Team ID",
                  "maxLength": 32
                },
                "team_name": {
                  "type": "string",
                  "description": "Team name",
                  "maxLength": 128
                },
                "user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                }
              },
              "required": [
                "account_id",
                "account_name",
                "create_time",
                "invited_by_user_email",
                "team_id",
                "team_name",
                "user_email"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["account_invites"]
      },
      "AccountTeamListResponse": {
        "type": "object",
        "description": "AccountTeamListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "teams": {
            "type": "array",
            "description": "List of teams",
            "items": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "create_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "team_id": {
                  "type": "string",
                  "description": "Team ID",
                  "maxLength": 32
                },
                "team_name": {
                  "type": "string",
                  "description": "Team name",
                  "maxLength": 128
                },
                "update_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                }
              },
              "required": ["team_id", "team_name"]
            }
          }
        },
        "required": ["teams"]
      },
      "AccountTeamMemberCancelInviteResponse": {
        "type": "object",
        "description": "AccountTeamMemberCancelInviteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "AccountTeamMemberVerifyInviteResponse": {
        "type": "object",
        "description": "AccountTeamMemberVerifyInviteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "invite_details": {
            "type": "object",
            "description": "Details of verified invite",
            "properties": {
              "user_email": {
                "type": "string",
                "description": "User email address",
                "maxLength": 319
              }
            },
            "required": ["user_email"]
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["invite_details"]
      },
      "AccountTeamMembersDeleteResponse": {
        "type": "object",
        "description": "AccountTeamMembersDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "AccountTeamMembersInviteRequestBody": {
        "type": "object",
        "description": "AccountTeamMembersInviteRequestBody",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "maxLength": 319
          }
        },
        "required": ["email"]
      },
      "AccountTeamMembersInviteResponse": {
        "type": "object",
        "description": "AccountTeamMembersInviteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "AccountTeamMembersListResponse": {
        "type": "object",
        "description": "AccountTeamMembersListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "members": {
            "type": "array",
            "description": "List of account team members",
            "items": {
              "type": "object",
              "properties": {
                "create_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "real_name": {
                  "type": "string",
                  "description": "User real name",
                  "maxLength": 256
                },
                "team_id": {
                  "type": "string",
                  "description": "Team ID",
                  "maxLength": 32
                },
                "team_name": {
                  "type": "string",
                  "description": "Team name",
                  "maxLength": 128
                },
                "update_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                },
                "user_id": { "type": "string", "description": "User ID" }
              },
              "required": [
                "create_time",
                "real_name",
                "team_id",
                "team_name",
                "update_time",
                "user_email",
                "user_id"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["members"]
      },
      "AccountTeamProjectAssociateRequestBody": {
        "type": "object",
        "description": "AccountTeamProjectAssociateRequestBody",
        "properties": {
          "team_type": {
            "type": "string",
            "description": "Team type (permission level)",
            "enum": [
              "admin",
              "operator",
              "developer",
              "read_only",
              "project:integrations:read",
              "project:integrations:write",
              "project:networking:read",
              "project:networking:write",
              "project:permissions:read",
              "service:configuration:write",
              "service:logs:read",
              "project:services:read",
              "project:services:write",
              "project:audit_logs:read",
              "service:data:write",
              "service:secrets:read",
              "service:users:write",
              "role:services:maintenance",
              "role:services:recover",
              "organization:audit_logs:read",
              "organization:projects:write",
              "organization:users:write",
              "organization:app_users:write",
              "organization:groups:write",
              "organization:idps:write",
              "organization:domains:write",
              "organization:networking:read",
              "organization:networking:write",
              "role:organization:admin"
            ]
          }
        },
        "required": ["team_type"]
      },
      "AccountTeamProjectAssociateResponse": {
        "type": "object",
        "description": "AccountTeamProjectAssociateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "AccountTeamProjectAssociationUpdateRequestBody": {
        "type": "object",
        "description": "AccountTeamProjectAssociationUpdateRequestBody",
        "properties": {
          "team_type": {
            "type": "string",
            "description": "Team type (permission level)",
            "enum": [
              "admin",
              "operator",
              "developer",
              "read_only",
              "project:integrations:read",
              "project:integrations:write",
              "project:networking:read",
              "project:networking:write",
              "project:permissions:read",
              "service:configuration:write",
              "service:logs:read",
              "project:services:read",
              "project:services:write",
              "project:audit_logs:read",
              "service:data:write",
              "service:secrets:read",
              "service:users:write",
              "role:services:maintenance",
              "role:services:recover",
              "organization:audit_logs:read",
              "organization:projects:write",
              "organization:users:write",
              "organization:app_users:write",
              "organization:groups:write",
              "organization:idps:write",
              "organization:domains:write",
              "organization:networking:read",
              "organization:networking:write",
              "role:organization:admin"
            ]
          }
        }
      },
      "AccountTeamProjectAssociationUpdateResponse": {
        "type": "object",
        "description": "AccountTeamProjectAssociationUpdateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "AccountTeamProjectDisassociateResponse": {
        "type": "object",
        "description": "AccountTeamProjectDisassociateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "AccountTeamProjectListResponse": {
        "type": "object",
        "description": "AccountTeamProjectListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "projects": {
            "type": "array",
            "description": "List of projects associated to a team",
            "items": {
              "type": "object",
              "properties": {
                "project_name": {
                  "type": "string",
                  "description": "Project name",
                  "maxLength": 63
                },
                "team_type": {
                  "type": "string",
                  "description": "Team type (permission level)",
                  "enum": [
                    "admin",
                    "operator",
                    "developer",
                    "read_only",
                    "project:integrations:read",
                    "project:integrations:write",
                    "project:networking:read",
                    "project:networking:write",
                    "project:permissions:read",
                    "service:configuration:write",
                    "service:logs:read",
                    "project:services:read",
                    "project:services:write",
                    "project:audit_logs:read",
                    "service:data:write",
                    "service:secrets:read",
                    "service:users:write",
                    "role:services:maintenance",
                    "role:services:recover",
                    "organization:audit_logs:read",
                    "organization:projects:write",
                    "organization:users:write",
                    "organization:app_users:write",
                    "organization:groups:write",
                    "organization:idps:write",
                    "organization:domains:write",
                    "organization:networking:read",
                    "organization:networking:write",
                    "role:organization:admin"
                  ]
                }
              },
              "required": ["project_name", "team_type"]
            }
          }
        },
        "required": ["projects"]
      },
      "AccountTeamUpdateRequestBody": {
        "type": "object",
        "description": "AccountTeamUpdateRequestBody",
        "properties": {
          "team_name": {
            "type": "string",
            "description": "Team name",
            "maxLength": 128
          }
        },
        "required": ["team_name"]
      },
      "AccountTeamUpdateResponse": {
        "type": "object",
        "description": "AccountTeamUpdateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "team": {
            "type": "object",
            "description": "Account Team details",
            "properties": {
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "create_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              },
              "team_id": {
                "type": "string",
                "description": "Team ID",
                "maxLength": 32
              },
              "team_name": {
                "type": "string",
                "description": "Team name",
                "maxLength": 128
              },
              "update_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              }
            },
            "required": ["team_id", "team_name"]
          }
        },
        "required": ["team"]
      },
      "AccountUpdateRequestBody": {
        "type": "object",
        "description": "AccountUpdateRequestBody",
        "properties": {
          "account_name": {
            "type": "string",
            "description": "Account name",
            "maxLength": 128
          },
          "primary_billing_group_id": {
            "type": "string",
            "description": "Billing group ID",
            "minLength": 36,
            "maxLength": 36
          }
        }
      },
      "AccountUpdateResponse": {
        "type": "object",
        "description": "AccountUpdateResponse",
        "properties": {
          "account": {
            "type": "object",
            "description": "Account details",
            "properties": {
              "access_source": {
                "type": "string",
                "description": "Describe the source of the account",
                "enum": [
                  "descendant_membership",
                  "organization_membership",
                  "project_membership",
                  "team_membership"
                ]
              },
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "account_name": {
                "type": "string",
                "description": "Account name",
                "maxLength": 128
              },
              "account_owner_team_id": {
                "type": "string",
                "description": "Team ID",
                "maxLength": 32
              },
              "create_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              },
              "features": {
                "type": "object",
                "description": "Feature flags",
                "properties": {}
              },
              "is_account_member": {
                "type": "boolean",
                "description": "If true, user is part of a team of this or a parent account"
              },
              "is_account_owner": {
                "type": "boolean",
                "description": "If true, user is part of the owners team for this account"
              },
              "organization_id": {
                "type": "string",
                "description": "Organization ID",
                "maxLength": 36
              },
              "parent_account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "primary_billing_group_id": {
                "type": "string",
                "description": "Billing group ID",
                "minLength": 36,
                "maxLength": 36
              },
              "root_account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "tenant_id": {
                "type": "string",
                "description": "Tenant identifier",
                "maxLength": 64
              },
              "update_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              }
            },
            "required": [
              "account_id",
              "account_name",
              "account_owner_team_id",
              "create_time",
              "is_account_owner",
              "organization_id",
              "primary_billing_group_id",
              "root_account_id",
              "update_time"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["account"]
      },
      "AccountUserProjectsListResponse": {
        "type": "object",
        "description": "AccountUserProjectsListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "user_projects": {
            "type": "array",
            "description": "List of user's projects",
            "items": {
              "type": "object",
              "properties": {
                "access_type": {
                  "type": "string",
                  "description": "Access type"
                },
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "create_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "member_type": {
                  "type": "string",
                  "description": "Project member type",
                  "enum": [
                    "admin",
                    "developer",
                    "operator",
                    "organization:app_users:write",
                    "organization:audit_logs:read",
                    "organization:domains:write",
                    "organization:groups:write",
                    "organization:idps:write",
                    "organization:networking:read",
                    "organization:networking:write",
                    "organization:projects:write",
                    "organization:users:write",
                    "project:audit_logs:read",
                    "project:integrations:read",
                    "project:integrations:write",
                    "project:networking:read",
                    "project:networking:write",
                    "project:permissions:read",
                    "project:services:read",
                    "project:services:write",
                    "read_only",
                    "role:organization:admin",
                    "role:services:maintenance",
                    "role:services:recover",
                    "service:configuration:write",
                    "service:data:write",
                    "service:logs:read",
                    "service:secrets:read",
                    "service:users:write"
                  ]
                },
                "project_name": {
                  "type": "string",
                  "description": "Project name",
                  "maxLength": 63
                },
                "real_name": {
                  "type": "string",
                  "description": "User real name",
                  "maxLength": 256
                },
                "team_id": {
                  "type": "string",
                  "description": "Team ID",
                  "maxLength": 32
                },
                "team_name": {
                  "type": "string",
                  "description": "Team name",
                  "maxLength": 128
                },
                "user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                }
              },
              "required": [
                "account_id",
                "create_time",
                "member_type",
                "project_name",
                "real_name",
                "team_id",
                "team_name",
                "user_email"
              ]
            }
          }
        },
        "required": ["user_projects"]
      },
      "AccountUserTeamsListResponse": {
        "type": "object",
        "description": "AccountUserTeamsListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "teams": {
            "type": "array",
            "description": "List of teams",
            "items": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "account_name": {
                  "type": "string",
                  "description": "Account name",
                  "maxLength": 128
                },
                "team_id": {
                  "type": "string",
                  "description": "Team ID",
                  "maxLength": 32
                },
                "team_name": {
                  "type": "string",
                  "description": "Team name",
                  "maxLength": 128
                }
              },
              "required": ["account_id", "account_name", "team_id", "team_name"]
            }
          }
        },
        "required": ["teams"]
      },
      "AccountUsersSearchRequestBody": {
        "type": "object",
        "description": "AccountUsersSearchRequestBody",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "Maximum number of results to return",
            "minimum": 1,
            "maximum": 500
          },
          "order_by": {
            "type": "string",
            "description": "Sorting criteria; desc is descending order and asc ascending",
            "enum": [
              "user_email:asc",
              "user_email:desc",
              "user_id:asc",
              "user_id:desc",
              "real_name:asc",
              "real_name:desc"
            ]
          },
          "query": {
            "type": "string",
            "description": "Filter keyword",
            "maxLength": 128
          }
        }
      },
      "AccountUsersSearchResponse": {
        "type": "object",
        "description": "AccountUsersSearchResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "users": {
            "type": "array",
            "description": "List of users",
            "items": {
              "type": "object",
              "properties": {
                "real_name": {
                  "type": "string",
                  "description": "User real name",
                  "maxLength": 256
                },
                "user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                },
                "user_id": { "type": "string", "description": "User ID" }
              },
              "required": ["real_name", "user_email", "user_id"]
            }
          }
        },
        "required": ["users"]
      },
      "ApplicationUserAccessTokenCreateRequestBody": {
        "type": "object",
        "description": "ApplicationUserAccessTokenCreateRequestBody",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description",
            "maxLength": 1000
          },
          "extend_when_used": {
            "type": "boolean",
            "description": "Extend token expiration time when token is used. Only applicable if max_age_seconds is specified."
          },
          "ip_allowlist": {
            "type": "array",
            "description": "List of allowed IP ranges",
            "maxItems": 100,
            "items": { "type": "string" }
          },
          "max_age_seconds": {
            "type": "integer",
            "description": "Time the token remains valid since creation (or since last use if extend_when_used is true)",
            "minimum": 600,
            "maximum": 315360000
          },
          "scopes": {
            "type": "array",
            "description": "Scopes this token is restricted to if specified",
            "maxItems": 100,
            "items": { "type": "string" }
          }
        },
        "required": ["description"]
      },
      "ApplicationUserAccessTokenCreateResponse": {
        "type": "object",
        "description": "ApplicationUserAccessTokenCreateResponse",
        "properties": {
          "full_token": { "type": "string", "description": "Full Token" },
          "token_prefix": { "type": "string", "description": "Token Prefix" }
        },
        "required": ["full_token", "token_prefix"]
      },
      "ApplicationUserAccessTokensListResponse": {
        "type": "object",
        "description": "ApplicationUserAccessTokensListResponse",
        "properties": {
          "tokens": {
            "type": "array",
            "description": "Tokens",
            "items": {
              "type": "object",
              "properties": {
                "create_time": {
                  "type": "string",
                  "description": "Create Time",
                  "maxLength": 36
                },
                "created_manually": {
                  "type": "boolean",
                  "description": "True for tokens explicitly created via the access_tokens API, false for tokens created via login."
                },
                "currently_active": {
                  "type": "boolean",
                  "description": "true if API request was made with this access token"
                },
                "description": {
                  "type": "string",
                  "description": "Description",
                  "maxLength": 1000
                },
                "expiry_time": {
                  "type": "string",
                  "description": "Timestamp when the access token will expire unless extended, if ever",
                  "maxLength": 36
                },
                "extend_when_used": {
                  "type": "boolean",
                  "description": "Extend token expiration time when token is used. Only applicable if max_age_seconds is specified."
                },
                "ip_allowlist": {
                  "type": "array",
                  "description": "List of allowed IP ranges",
                  "maxItems": 100,
                  "items": { "type": "string" }
                },
                "last_ip": {
                  "type": "string",
                  "description": "IP address the access token was last used from in case it has ever been used"
                },
                "last_used_time": {
                  "type": "string",
                  "description": "Timestamp when the access token was last used, if ever",
                  "maxLength": 36
                },
                "last_user_agent": {
                  "type": "string",
                  "description": "User agent string of the client that last used the token in case it has ever been used"
                },
                "last_user_agent_human_readable": {
                  "type": "string",
                  "description": "Human readable user agent string of the client that last used the token in case user agent is known"
                },
                "max_age_seconds": {
                  "type": "integer",
                  "description": "Time the token remains valid since creation (or since last use if extend_when_used is true)",
                  "minimum": 600,
                  "maximum": 315360000
                },
                "scopes": {
                  "type": "array",
                  "description": "Scopes this token is restricted to if specified",
                  "maxItems": 100,
                  "items": { "type": "string" }
                },
                "token_prefix": {
                  "type": "string",
                  "description": "First characters of the actual token value. Full value is only exposed after creation. This value is used when updating or revoking tokens. Note that the value may contain /, + and = characters and must be URL encoded when used (/ =&gt; %2F, + =&gt; %2B, = =&gt; %3D)."
                }
              },
              "required": [
                "create_time",
                "created_manually",
                "currently_active",
                "token_prefix"
              ]
            }
          }
        },
        "required": ["tokens"]
      },
      "ApplicationUserCreateRequestBody": {
        "type": "object",
        "description": "ApplicationUserCreateRequestBody",
        "properties": {
          "is_super_admin": {
            "type": "boolean",
            "description": "Alters super admin state of the organization application user"
          },
          "name": { "type": "string", "description": "Name" }
        },
        "required": ["name"]
      },
      "ApplicationUserCreateResponse": {
        "type": "object",
        "description": "ApplicationUserCreateResponse",
        "properties": {
          "is_super_admin": {
            "type": "boolean",
            "description": "Super admin state of the organization application user"
          },
          "name": { "type": "string", "description": "Name" },
          "user_email": { "type": "string", "description": "User Email" },
          "user_id": { "type": "string", "description": "User ID" }
        },
        "required": ["is_super_admin", "name", "user_email", "user_id"]
      },
      "ApplicationUserGetResponse": {
        "type": "object",
        "description": "ApplicationUserGetResponse",
        "properties": {
          "is_super_admin": {
            "type": "boolean",
            "description": "Super admin state of the organization application user"
          },
          "name": { "type": "string", "description": "Name" },
          "user_email": { "type": "string", "description": "User Email" },
          "user_id": { "type": "string", "description": "User ID" }
        },
        "required": ["is_super_admin", "name", "user_email", "user_id"]
      },
      "ApplicationUserUpdateRequestBody": {
        "type": "object",
        "description": "ApplicationUserUpdateRequestBody",
        "properties": {
          "is_super_admin": {
            "type": "boolean",
            "description": "Alters super admin state of the organization application user"
          },
          "name": { "type": "string", "description": "Name" }
        },
        "required": ["name"]
      },
      "ApplicationUserUpdateResponse": {
        "type": "object",
        "description": "ApplicationUserUpdateResponse",
        "properties": {
          "is_super_admin": {
            "type": "boolean",
            "description": "Super admin state of the organization application user"
          },
          "name": { "type": "string", "description": "Name" },
          "user_email": { "type": "string", "description": "User Email" },
          "user_id": { "type": "string", "description": "User ID" }
        },
        "required": ["is_super_admin", "name", "user_email", "user_id"]
      },
      "ApplicationUsersListResponse": {
        "type": "object",
        "description": "ApplicationUsersListResponse",
        "properties": {
          "application_users": {
            "type": "array",
            "description": "Application Users",
            "items": {
              "type": "object",
              "properties": {
                "is_super_admin": {
                  "type": "boolean",
                  "description": "Super admin state of the organization application user"
                },
                "name": { "type": "string", "description": "Name" },
                "user_email": { "type": "string", "description": "User Email" },
                "user_id": { "type": "string", "description": "User ID" }
              },
              "required": ["is_super_admin", "name", "user_email", "user_id"]
            }
          }
        },
        "required": ["application_users"]
      },
      "OrganizationAuthDomainLinkRequestBody": {
        "type": "object",
        "description": "OrganizationAuthDomainLinkRequestBody",
        "properties": {
          "domain_id": { "type": "string", "description": "ID of the domain" }
        },
        "required": ["domain_id"]
      },
      "OrganizationAuthDomainListResponse": {
        "type": "object",
        "description": "OrganizationAuthDomainListResponse",
        "properties": {
          "domains": {
            "type": "array",
            "description": "List of domains for the organization",
            "items": {
              "type": "object",
              "properties": {
                "challenge_token": {
                  "type": "string",
                  "description": "Random string to be used for validation"
                },
                "create_time": {
                  "type": "string",
                  "description": "Time of creating the domain",
                  "maxLength": 36
                },
                "domain_id": {
                  "type": "string",
                  "description": "ID of the domain"
                },
                "domain_name": {
                  "type": "string",
                  "description": "Name of the domain"
                },
                "linked_authentication_method_ids": {
                  "type": "array",
                  "description": "Linked Authentication Method Ids",
                  "items": { "type": "string" }
                },
                "organization_id": {
                  "type": "string",
                  "description": "ID of the organization owning this domain"
                },
                "state": {
                  "type": "string",
                  "description": "State of the verification process",
                  "enum": ["deleted", "unverified", "verified"]
                },
                "verification_type": {
                  "type": "string",
                  "description": "Type of verification to be made",
                  "enum": ["dns", "http"]
                }
              },
              "required": [
                "challenge_token",
                "create_time",
                "domain_id",
                "domain_name",
                "linked_authentication_method_ids",
                "organization_id",
                "state",
                "verification_type"
              ]
            }
          }
        },
        "required": ["domains"]
      },
      "BillingGroupCreateRequestBody": {
        "type": "object",
        "description": "BillingGroupCreateRequestBody",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "Account ID",
            "maxLength": 36
          },
          "address_lines": {
            "type": "array",
            "description": "Address lines",
            "maxItems": 16,
            "items": { "type": "string" }
          },
          "billing_address_id": {
            "type": "string",
            "description": "Address ID",
            "minLength": 36,
            "maxLength": 36
          },
          "billing_contact_emails": {
            "type": "array",
            "description": "List of billing groups contact email addresses",
            "maxItems": 10,
            "items": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                }
              },
              "required": ["email"]
            }
          },
          "billing_currency": {
            "type": "string",
            "description": "Billing currency",
            "enum": [
              "AUD",
              "CAD",
              "CHF",
              "DKK",
              "EUR",
              "GBP",
              "JPY",
              "NOK",
              "NZD",
              "SEK",
              "SGD",
              "USD"
            ]
          },
          "billing_emails": {
            "type": "array",
            "description": "List of project billing email addresses",
            "maxItems": 10,
            "items": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                }
              },
              "required": ["email"]
            }
          },
          "billing_extra_text": {
            "type": "string",
            "description": "Extra text to be included in all project invoices, e.g. purchase order or cost center number",
            "maxLength": 1000
          },
          "billing_group_name": {
            "type": "string",
            "description": "Billing group name",
            "maxLength": 128
          },
          "card_id": {
            "type": "string",
            "description": "Credit card ID",
            "maxLength": 64
          },
          "city": {
            "type": "string",
            "description": "Address city",
            "maxLength": 512
          },
          "company": {
            "type": "string",
            "description": "Name of a company",
            "maxLength": 128
          },
          "copy_from_billing_group": {
            "type": "string",
            "description": "Billing group ID",
            "minLength": 36,
            "maxLength": 36
          },
          "country_code": {
            "type": "string",
            "description": "Two letter country code for billing country",
            "maxLength": 2
          },
          "shipping_address_id": {
            "type": "string",
            "description": "Address ID",
            "minLength": 36,
            "maxLength": 36
          },
          "state": {
            "type": "string",
            "description": "Address state or province",
            "maxLength": 128
          },
          "vat_id": {
            "type": "string",
            "description": "EU VAT Identification Number",
            "maxLength": 64
          },
          "zip_code": {
            "type": "string",
            "description": "Address zip code",
            "maxLength": 32
          }
        },
        "required": ["billing_group_name"]
      },
      "BillingGroupCreateResponse": {
        "type": "object",
        "description": "BillingGroupCreateResponse",
        "properties": {
          "billing_group": {
            "type": "object",
            "description": "Billing group information",
            "properties": {
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "account_name": {
                "type": "string",
                "description": "Account name",
                "maxLength": 128
              },
              "address_lines": {
                "type": "array",
                "description": "Address lines",
                "maxItems": 16,
                "items": { "type": "string" }
              },
              "billing_address": {
                "type": "string",
                "description": "DEPRECATED: use split address fields like company, address_lines, zip_code, city and state instead",
                "maxLength": 1000
              },
              "billing_address_id": {
                "type": "string",
                "description": "Address ID",
                "minLength": 36,
                "maxLength": 36
              },
              "billing_contact_emails": {
                "type": "array",
                "description": "List of billing groups contact email addresses",
                "maxItems": 10,
                "items": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": ["email"]
                }
              },
              "billing_currency": {
                "type": "string",
                "description": "Billing currency",
                "enum": [
                  "AUD",
                  "CAD",
                  "CHF",
                  "DKK",
                  "EUR",
                  "GBP",
                  "JPY",
                  "NOK",
                  "NZD",
                  "SEK",
                  "SGD",
                  "USD"
                ]
              },
              "billing_emails": {
                "type": "array",
                "description": "List of project billing email addresses",
                "maxItems": 10,
                "items": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": ["email"]
                }
              },
              "billing_extra_text": {
                "type": "string",
                "description": "Extra text to be included in all project invoices, e.g. purchase order or cost center number",
                "maxLength": 1000
              },
              "billing_group_id": {
                "type": "string",
                "description": "Billing group ID",
                "minLength": 36,
                "maxLength": 36
              },
              "billing_group_name": {
                "type": "string",
                "description": "Billing group name",
                "maxLength": 128
              },
              "billing_type": {
                "type": "string",
                "description": "Method of charging/invoicing this project"
              },
              "card_info": {
                "type": "object",
                "description": "Credit card assigned to the project",
                "properties": {
                  "brand": { "type": "string", "description": "Brand" },
                  "card_id": {
                    "type": "string",
                    "description": "Credit card ID",
                    "maxLength": 64
                  },
                  "country": {
                    "type": "string",
                    "description": "Country",
                    "maxLength": 128
                  },
                  "country_code": {
                    "type": "string",
                    "description": "Two letter ISO country code",
                    "maxLength": 2
                  },
                  "exp_month": {
                    "type": "integer",
                    "description": "Expiration month",
                    "minimum": 1,
                    "maximum": 12
                  },
                  "exp_year": {
                    "type": "integer",
                    "description": "Expiration year",
                    "minimum": 2015,
                    "maximum": 2100
                  },
                  "last4": {
                    "type": "string",
                    "description": "Credit card last four digits"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name on the credit card",
                    "maxLength": 256
                  },
                  "user_email": {
                    "type": "string",
                    "description": "User email address",
                    "maxLength": 319
                  }
                },
                "required": [
                  "brand",
                  "card_id",
                  "country",
                  "country_code",
                  "exp_month",
                  "exp_year",
                  "last4",
                  "name",
                  "user_email"
                ]
              },
              "city": {
                "type": "string",
                "description": "Address city",
                "maxLength": 512
              },
              "company": {
                "type": "string",
                "description": "Name of a company",
                "maxLength": 128
              },
              "country": {
                "type": "string",
                "description": "Billing country",
                "maxLength": 128
              },
              "country_code": {
                "type": "string",
                "description": "Two letter ISO country code",
                "maxLength": 2
              },
              "create_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              },
              "estimated_balance_local": {
                "type": "string",
                "description": "Estimated balance in billing currency, before tax"
              },
              "estimated_balance_usd": {
                "type": "string",
                "description": "Estimated balance in USD, before tax"
              },
              "payment_method": {
                "type": "string",
                "description": "Payment method",
                "enum": [
                  "accrual",
                  "card",
                  "disabled",
                  "email",
                  "no_payment_expected",
                  "partner"
                ]
              },
              "shipping_address_id": {
                "type": "string",
                "description": "Address ID",
                "minLength": 36,
                "maxLength": 36
              },
              "state": {
                "type": "string",
                "description": "Address state or province",
                "maxLength": 128
              },
              "vat_id": {
                "type": "string",
                "description": "EU VAT Identification Number",
                "maxLength": 64
              },
              "zip_code": {
                "type": "string",
                "description": "Address zip code",
                "maxLength": 32
              }
            },
            "required": [
              "account_id",
              "account_name",
              "address_lines",
              "billing_contact_emails",
              "billing_currency",
              "billing_emails",
              "billing_extra_text",
              "billing_group_id",
              "billing_group_name",
              "billing_type",
              "card_info",
              "city",
              "company",
              "country",
              "country_code",
              "create_time",
              "estimated_balance_local",
              "estimated_balance_usd",
              "payment_method",
              "state",
              "vat_id",
              "zip_code"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["billing_group"]
      },
      "BillingGroupCreditsClaimRequestBody": {
        "type": "object",
        "description": "BillingGroupCreditsClaimRequestBody",
        "properties": {
          "code": {
            "type": "string",
            "description": "Credit code",
            "maxLength": 1024
          }
        },
        "required": ["code"]
      },
      "BillingGroupCreditsClaimResponse": {
        "type": "object",
        "description": "BillingGroupCreditsClaimResponse",
        "properties": {
          "credit": {
            "type": "object",
            "description": "Assigned credit",
            "properties": {
              "code": {
                "type": "string",
                "description": "Credit code",
                "maxLength": 1024
              },
              "expire_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              },
              "remaining_value": {
                "type": "string",
                "description": "Remaining credit value"
              },
              "start_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              },
              "type": {
                "type": "string",
                "description": "Credit type",
                "enum": [
                  "discount",
                  "employee",
                  "evaluation",
                  "internal",
                  "other",
                  "outage",
                  "partner",
                  "promotion",
                  "purchase",
                  "referral",
                  "sponsorship",
                  "trial",
                  "trial_over"
                ]
              },
              "value": {
                "type": "string",
                "description": "Original credit value, or for expired credits, the consumed credit value"
              }
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["credit"]
      },
      "BillingGroupCreditsListResponse": {
        "type": "object",
        "description": "BillingGroupCreditsListResponse",
        "properties": {
          "credits": {
            "type": "array",
            "description": "List of credits assigned to a billing group",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "Credit code",
                  "maxLength": 1024
                },
                "expire_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "remaining_value": {
                  "type": "string",
                  "description": "Remaining credit value"
                },
                "start_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "type": {
                  "type": "string",
                  "description": "Credit type",
                  "enum": [
                    "discount",
                    "employee",
                    "evaluation",
                    "internal",
                    "other",
                    "outage",
                    "partner",
                    "promotion",
                    "purchase",
                    "referral",
                    "sponsorship",
                    "trial",
                    "trial_over"
                  ]
                },
                "value": {
                  "type": "string",
                  "description": "Original credit value, or for expired credits, the consumed credit value"
                }
              }
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["credits"]
      },
      "BillingGroupDeleteResponse": {
        "type": "object",
        "description": "BillingGroupDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "BillingGroupEventListResponse": {
        "type": "object",
        "description": "BillingGroupEventListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "events": {
            "type": "array",
            "description": "List of events related to a billing group",
            "items": {
              "type": "object",
              "properties": {
                "actor": {
                  "type": "string",
                  "description": "Initiator of the event"
                },
                "billing_group_id": {
                  "type": "string",
                  "description": "Billing group ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "create_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "event_desc": {
                  "type": "string",
                  "description": "Event description"
                },
                "event_type": {
                  "type": "string",
                  "description": "Event type identifier"
                },
                "log_entry_id": {
                  "type": "integer",
                  "description": "Entry ID"
                },
                "project_id": {
                  "type": "string",
                  "description": "Identifier of a project",
                  "maxLength": 36
                },
                "project_name": {
                  "type": "string",
                  "description": "Project name",
                  "maxLength": 63
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["events"]
      },
      "BillingGroupGetResponse": {
        "type": "object",
        "description": "BillingGroupGetResponse",
        "properties": {
          "billing_group": {
            "type": "object",
            "description": "Billing group information",
            "properties": {
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "account_name": {
                "type": "string",
                "description": "Account name",
                "maxLength": 128
              },
              "address_lines": {
                "type": "array",
                "description": "Address lines",
                "maxItems": 16,
                "items": { "type": "string" }
              },
              "billing_address": {
                "type": "string",
                "description": "DEPRECATED: use split address fields like company, address_lines, zip_code, city and state instead",
                "maxLength": 1000
              },
              "billing_address_id": {
                "type": "string",
                "description": "Address ID",
                "minLength": 36,
                "maxLength": 36
              },
              "billing_contact_emails": {
                "type": "array",
                "description": "List of billing groups contact email addresses",
                "maxItems": 10,
                "items": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": ["email"]
                }
              },
              "billing_currency": {
                "type": "string",
                "description": "Billing currency",
                "enum": [
                  "AUD",
                  "CAD",
                  "CHF",
                  "DKK",
                  "EUR",
                  "GBP",
                  "JPY",
                  "NOK",
                  "NZD",
                  "SEK",
                  "SGD",
                  "USD"
                ]
              },
              "billing_emails": {
                "type": "array",
                "description": "List of project billing email addresses",
                "maxItems": 10,
                "items": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": ["email"]
                }
              },
              "billing_extra_text": {
                "type": "string",
                "description": "Extra text to be included in all project invoices, e.g. purchase order or cost center number",
                "maxLength": 1000
              },
              "billing_group_id": {
                "type": "string",
                "description": "Billing group ID",
                "minLength": 36,
                "maxLength": 36
              },
              "billing_group_name": {
                "type": "string",
                "description": "Billing group name",
                "maxLength": 128
              },
              "billing_type": {
                "type": "string",
                "description": "Method of charging/invoicing this project"
              },
              "card_info": {
                "type": "object",
                "description": "Credit card assigned to the project",
                "properties": {
                  "brand": { "type": "string", "description": "Brand" },
                  "card_id": {
                    "type": "string",
                    "description": "Credit card ID",
                    "maxLength": 64
                  },
                  "country": {
                    "type": "string",
                    "description": "Country",
                    "maxLength": 128
                  },
                  "country_code": {
                    "type": "string",
                    "description": "Two letter ISO country code",
                    "maxLength": 2
                  },
                  "exp_month": {
                    "type": "integer",
                    "description": "Expiration month",
                    "minimum": 1,
                    "maximum": 12
                  },
                  "exp_year": {
                    "type": "integer",
                    "description": "Expiration year",
                    "minimum": 2015,
                    "maximum": 2100
                  },
                  "last4": {
                    "type": "string",
                    "description": "Credit card last four digits"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name on the credit card",
                    "maxLength": 256
                  },
                  "user_email": {
                    "type": "string",
                    "description": "User email address",
                    "maxLength": 319
                  }
                },
                "required": [
                  "brand",
                  "card_id",
                  "country",
                  "country_code",
                  "exp_month",
                  "exp_year",
                  "last4",
                  "name",
                  "user_email"
                ]
              },
              "city": {
                "type": "string",
                "description": "Address city",
                "maxLength": 512
              },
              "company": {
                "type": "string",
                "description": "Name of a company",
                "maxLength": 128
              },
              "country": {
                "type": "string",
                "description": "Billing country",
                "maxLength": 128
              },
              "country_code": {
                "type": "string",
                "description": "Two letter ISO country code",
                "maxLength": 2
              },
              "create_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              },
              "estimated_balance_local": {
                "type": "string",
                "description": "Estimated balance in billing currency, before tax"
              },
              "estimated_balance_usd": {
                "type": "string",
                "description": "Estimated balance in USD, before tax"
              },
              "payment_method": {
                "type": "string",
                "description": "Payment method",
                "enum": [
                  "accrual",
                  "card",
                  "disabled",
                  "email",
                  "no_payment_expected",
                  "partner"
                ]
              },
              "shipping_address_id": {
                "type": "string",
                "description": "Address ID",
                "minLength": 36,
                "maxLength": 36
              },
              "state": {
                "type": "string",
                "description": "Address state or province",
                "maxLength": 128
              },
              "vat_id": {
                "type": "string",
                "description": "EU VAT Identification Number",
                "maxLength": 64
              },
              "zip_code": {
                "type": "string",
                "description": "Address zip code",
                "maxLength": 32
              }
            },
            "required": [
              "account_id",
              "account_name",
              "address_lines",
              "billing_contact_emails",
              "billing_currency",
              "billing_emails",
              "billing_extra_text",
              "billing_group_id",
              "billing_group_name",
              "billing_type",
              "card_info",
              "city",
              "company",
              "country",
              "country_code",
              "create_time",
              "estimated_balance_local",
              "estimated_balance_usd",
              "payment_method",
              "state",
              "vat_id",
              "zip_code"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["billing_group"]
      },
      "BillingGroupInvoiceGetResponse": {
        "type": "object",
        "description": "BillingGroupInvoiceGetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "invoice": {
            "type": "object",
            "description": "A single invoice",
            "properties": {
              "due_date": {
                "type": "string",
                "description": "The time when the invoice is due"
              },
              "generated_at": {
                "type": "string",
                "description": "The time when the invoice was generated"
              },
              "invoice_number": {
                "type": "string",
                "description": "Unique invoice reference code",
                "maxLength": 128
              },
              "invoice_state": {
                "type": "string",
                "description": "State of this invoice",
                "enum": [
                  "accrual",
                  "consolidated",
                  "due",
                  "estimate",
                  "failed_credit_card_charge",
                  "failed_no_credit_card",
                  "mailed",
                  "no_payment_expected",
                  "paid",
                  "partner_metering",
                  "uncollectible",
                  "waived",
                  "due_only_project_charges_calculated",
                  "estimate_only_project_charges_calculated"
                ]
              },
              "local_inc_vat": {
                "type": "string",
                "description": "Invoice total in chosen billing currency, after VAT"
              },
              "local_vat_zero": {
                "type": "string",
                "description": "Invoice total in chosen billing currency, before VAT"
              }
            },
            "required": ["invoice_number", "local_inc_vat", "local_vat_zero"]
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["invoice"]
      },
      "BillingGroupInvoiceLinesListResponse": {
        "type": "object",
        "description": "BillingGroupInvoiceLinesListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "lines": {
            "type": "array",
            "description": "List of invoice lines",
            "items": {
              "type": "object",
              "properties": {
                "cloud_name": {
                  "type": "string",
                  "description": "Name of the cloud, if billed resource is associated with a cloud resource"
                },
                "commitment_name": {
                  "type": "string",
                  "description": "Name of the commitment which is referred to this invoice line"
                },
                "description": {
                  "type": "string",
                  "description": "Human-readable short description of the invoice line"
                },
                "line_pre_discount_local": {
                  "type": "string",
                  "description": "Pre-tax sum of invoice line, in local currency, before any discounts"
                },
                "line_total_local": {
                  "type": "string",
                  "description": "Pre-tax sum of invoice line, in the local currency configured for the invoice"
                },
                "line_total_usd": {
                  "type": "string",
                  "description": "Pre-tax sum of invoice line, in USD"
                },
                "line_type": {
                  "type": "string",
                  "description": "Type of the invoice line",
                  "enum": [
                    "commitment_fee",
                    "credit_consumption",
                    "extra_charge",
                    "multiplier",
                    "other_event",
                    "pro_platform_charge",
                    "rounding",
                    "service_charge",
                    "support_charge"
                  ]
                },
                "local_currency": {
                  "type": "string",
                  "description": "Currency used for line_local_total"
                },
                "project_name": {
                  "type": "string",
                  "description": "Name of the project this line is associated with, if any"
                },
                "service_name": {
                  "type": "string",
                  "description": "Name of the service, if invoice line is for service use"
                },
                "service_plan": {
                  "type": "string",
                  "description": "Service plan name, if invoice line is for service use"
                },
                "service_type": {
                  "type": "string",
                  "description": "Service type, if invoice line is for service use",
                  "enum": [
                    "alertmanager",
                    "alloydbomni",
                    "application",
                    "cassandra",
                    "clickhouse",
                    "dragonfly",
                    "elasticsearch",
                    "flink",
                    "grafana",
                    "influxdb",
                    "kafka",
                    "kafka_connect",
                    "kafka_mirrormaker",
                    "m3aggregator",
                    "m3db",
                    "mysql",
                    "opensearch",
                    "parca",
                    "pg",
                    "redis",
                    "stresstester",
                    "sw",
                    "thanos",
                    "thanoscompactor",
                    "thanosquery",
                    "thanosreceiver",
                    "thanosruler",
                    "thanosstore",
                    "valkey",
                    "vector",
                    "vmalert",
                    "warpstream"
                  ]
                },
                "tags": {
                  "type": "object",
                  "description": "Billing tags",
                  "properties": {}
                },
                "timestamp_begin": {
                  "type": "string",
                  "description": "Begin timestamp of the billed time period, for resources billed by time"
                },
                "timestamp_end": {
                  "type": "string",
                  "description": "End timestamp of the billed time period, for resources billed by time"
                }
              },
              "required": ["description", "line_total_usd", "line_type"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "BillingGroupInvoiceListResponse": {
        "type": "object",
        "description": "BillingGroupInvoiceListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "invoices": {
            "type": "array",
            "description": "List of billing group invoices",
            "items": {
              "type": "object",
              "properties": {
                "billing_group_id": {
                  "type": "string",
                  "description": "Billing group ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "billing_group_name": {
                  "type": "string",
                  "description": "Billing group name",
                  "maxLength": 128
                },
                "billing_group_state": {
                  "type": "string",
                  "description": "Billing group state",
                  "enum": ["active", "deleted"]
                },
                "currency": {
                  "type": "string",
                  "description": "Billing currency",
                  "enum": [
                    "AUD",
                    "CAD",
                    "CHF",
                    "DKK",
                    "EUR",
                    "GBP",
                    "JPY",
                    "NOK",
                    "NZD",
                    "SEK",
                    "SGD",
                    "USD"
                  ]
                },
                "download_cookie": {
                  "type": "string",
                  "description": "Authentication cookie for downloads"
                },
                "due_date": {
                  "type": "string",
                  "description": "The time when the invoice is due"
                },
                "generated_at": {
                  "type": "string",
                  "description": "The time when the invoice was generated"
                },
                "invoice_number": {
                  "type": "string",
                  "description": "Unique invoice reference code",
                  "maxLength": 128
                },
                "period_begin": {
                  "type": "string",
                  "description": "Period begin",
                  "maxLength": 36
                },
                "period_end": {
                  "type": "string",
                  "description": "Period end",
                  "maxLength": 36
                },
                "state": {
                  "type": "string",
                  "description": "State of this invoice",
                  "enum": [
                    "accrual",
                    "consolidated",
                    "due",
                    "estimate",
                    "failed_credit_card_charge",
                    "failed_no_credit_card",
                    "mailed",
                    "no_payment_expected",
                    "paid",
                    "partner_metering",
                    "uncollectible",
                    "waived",
                    "due_only_project_charges_calculated",
                    "estimate_only_project_charges_calculated"
                  ]
                },
                "total_inc_vat": {
                  "type": "string",
                  "description": "Total including taxes"
                },
                "total_vat_zero": {
                  "type": "string",
                  "description": "Total excluding taxes"
                }
              },
              "required": [
                "billing_group_id",
                "billing_group_name",
                "billing_group_state",
                "currency",
                "download_cookie",
                "invoice_number",
                "period_begin",
                "period_end",
                "state",
                "total_inc_vat",
                "total_vat_zero"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["invoices"]
      },
      "BillingGroupListResponse": {
        "type": "object",
        "description": "BillingGroupListResponse",
        "properties": {
          "billing_groups": {
            "type": "array",
            "description": "List of billing groups",
            "items": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "account_name": {
                  "type": "string",
                  "description": "Account name",
                  "maxLength": 128
                },
                "address_lines": {
                  "type": "array",
                  "description": "Address lines",
                  "maxItems": 16,
                  "items": { "type": "string" }
                },
                "billing_address": {
                  "type": "string",
                  "description": "DEPRECATED: use split address fields like company, address_lines, zip_code, city and state instead",
                  "maxLength": 1000
                },
                "billing_address_id": {
                  "type": "string",
                  "description": "Address ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "billing_contact_emails": {
                  "type": "array",
                  "description": "List of billing groups contact email addresses",
                  "maxItems": 10,
                  "items": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "description": "User email address",
                        "maxLength": 319
                      }
                    },
                    "required": ["email"]
                  }
                },
                "billing_currency": {
                  "type": "string",
                  "description": "Billing currency",
                  "enum": [
                    "AUD",
                    "CAD",
                    "CHF",
                    "DKK",
                    "EUR",
                    "GBP",
                    "JPY",
                    "NOK",
                    "NZD",
                    "SEK",
                    "SGD",
                    "USD"
                  ]
                },
                "billing_emails": {
                  "type": "array",
                  "description": "List of project billing email addresses",
                  "maxItems": 10,
                  "items": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "description": "User email address",
                        "maxLength": 319
                      }
                    },
                    "required": ["email"]
                  }
                },
                "billing_extra_text": {
                  "type": "string",
                  "description": "Extra text to be included in all project invoices, e.g. purchase order or cost center number",
                  "maxLength": 1000
                },
                "billing_group_id": {
                  "type": "string",
                  "description": "Billing group ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "billing_group_name": {
                  "type": "string",
                  "description": "Billing group name",
                  "maxLength": 128
                },
                "billing_type": {
                  "type": "string",
                  "description": "Method of charging/invoicing this project"
                },
                "card_info": {
                  "type": "object",
                  "description": "Credit card assigned to the project",
                  "properties": {
                    "brand": { "type": "string", "description": "Brand" },
                    "card_id": {
                      "type": "string",
                      "description": "Credit card ID",
                      "maxLength": 64
                    },
                    "country": {
                      "type": "string",
                      "description": "Country",
                      "maxLength": 128
                    },
                    "country_code": {
                      "type": "string",
                      "description": "Two letter ISO country code",
                      "maxLength": 2
                    },
                    "exp_month": {
                      "type": "integer",
                      "description": "Expiration month",
                      "minimum": 1,
                      "maximum": 12
                    },
                    "exp_year": {
                      "type": "integer",
                      "description": "Expiration year",
                      "minimum": 2015,
                      "maximum": 2100
                    },
                    "last4": {
                      "type": "string",
                      "description": "Credit card last four digits"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name on the credit card",
                      "maxLength": 256
                    },
                    "user_email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": [
                    "brand",
                    "card_id",
                    "country",
                    "country_code",
                    "exp_month",
                    "exp_year",
                    "last4",
                    "name",
                    "user_email"
                  ]
                },
                "city": {
                  "type": "string",
                  "description": "Address city",
                  "maxLength": 512
                },
                "company": {
                  "type": "string",
                  "description": "Name of a company",
                  "maxLength": 128
                },
                "country": {
                  "type": "string",
                  "description": "Billing country",
                  "maxLength": 128
                },
                "country_code": {
                  "type": "string",
                  "description": "Two letter ISO country code",
                  "maxLength": 2
                },
                "create_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "estimated_balance_local": {
                  "type": "string",
                  "description": "Estimated balance in billing currency, before tax"
                },
                "estimated_balance_usd": {
                  "type": "string",
                  "description": "Estimated balance in USD, before tax"
                },
                "payment_method": {
                  "type": "string",
                  "description": "Payment method",
                  "enum": [
                    "accrual",
                    "card",
                    "disabled",
                    "email",
                    "no_payment_expected",
                    "partner"
                  ]
                },
                "shipping_address_id": {
                  "type": "string",
                  "description": "Address ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "state": {
                  "type": "string",
                  "description": "Address state or province",
                  "maxLength": 128
                },
                "vat_id": {
                  "type": "string",
                  "description": "EU VAT Identification Number",
                  "maxLength": 64
                },
                "zip_code": {
                  "type": "string",
                  "description": "Address zip code",
                  "maxLength": 32
                }
              },
              "required": [
                "account_id",
                "account_name",
                "address_lines",
                "billing_contact_emails",
                "billing_currency",
                "billing_emails",
                "billing_extra_text",
                "billing_group_id",
                "billing_group_name",
                "billing_type",
                "card_info",
                "city",
                "company",
                "country",
                "country_code",
                "create_time",
                "estimated_balance_local",
                "estimated_balance_usd",
                "payment_method",
                "state",
                "vat_id",
                "zip_code"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["billing_groups"]
      },
      "BillingGroupProjectAssignResponse": {
        "type": "object",
        "description": "BillingGroupProjectAssignResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "BillingGroupProjectListResponse": {
        "type": "object",
        "description": "BillingGroupProjectListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "projects": {
            "type": "array",
            "description": "List of projects assigned to billing group",
            "items": {
              "type": "object",
              "properties": {
                "available_credits": {
                  "type": "string",
                  "description": "Available credits"
                },
                "estimated_balance": {
                  "type": "string",
                  "description": "Estimated balance"
                },
                "project_name": {
                  "type": "string",
                  "description": "Project name",
                  "maxLength": 63
                }
              },
              "required": [
                "available_credits",
                "estimated_balance",
                "project_name"
              ]
            }
          }
        },
        "required": ["projects"]
      },
      "BillingGroupProjectsAssignRequestBody": {
        "type": "object",
        "description": "BillingGroupProjectsAssignRequestBody",
        "properties": {
          "projects_names": {
            "type": "array",
            "description": "Projects names",
            "minItems": 1,
            "maxItems": 1024,
            "items": { "type": "string" }
          }
        },
        "required": ["projects_names"]
      },
      "BillingGroupProjectsAssignResponse": {
        "type": "object",
        "description": "BillingGroupProjectsAssignResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "BillingGroupUpdateRequestBody": {
        "type": "object",
        "description": "BillingGroupUpdateRequestBody",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "Account ID",
            "maxLength": 36
          },
          "address_lines": {
            "type": "array",
            "description": "Address lines",
            "maxItems": 16,
            "items": { "type": "string" }
          },
          "billing_address_id": {
            "type": "string",
            "description": "Address ID",
            "minLength": 36,
            "maxLength": 36
          },
          "billing_contact_emails": {
            "type": "array",
            "description": "List of billing groups contact email addresses",
            "maxItems": 10,
            "items": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                }
              },
              "required": ["email"]
            }
          },
          "billing_currency": {
            "type": "string",
            "description": "Billing currency",
            "enum": [
              "AUD",
              "CAD",
              "CHF",
              "DKK",
              "EUR",
              "GBP",
              "JPY",
              "NOK",
              "NZD",
              "SEK",
              "SGD",
              "USD"
            ]
          },
          "billing_emails": {
            "type": "array",
            "description": "List of project billing email addresses",
            "maxItems": 10,
            "items": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                }
              },
              "required": ["email"]
            }
          },
          "billing_extra_text": {
            "type": "string",
            "description": "Extra text to be included in all project invoices, e.g. purchase order or cost center number",
            "maxLength": 1000
          },
          "billing_group_name": {
            "type": "string",
            "description": "Billing group name",
            "maxLength": 128
          },
          "card_id": {
            "type": "string",
            "description": "Credit card ID",
            "maxLength": 64
          },
          "city": {
            "type": "string",
            "description": "Address city",
            "maxLength": 512
          },
          "company": {
            "type": "string",
            "description": "Name of a company",
            "maxLength": 128
          },
          "country_code": {
            "type": "string",
            "description": "Two letter country code for billing country",
            "maxLength": 2
          },
          "shipping_address_id": {
            "type": "string",
            "description": "Address ID",
            "minLength": 36,
            "maxLength": 36
          },
          "state": {
            "type": "string",
            "description": "Address state or province",
            "maxLength": 128
          },
          "vat_id": {
            "type": "string",
            "description": "EU VAT Identification Number",
            "maxLength": 64
          },
          "zip_code": {
            "type": "string",
            "description": "Address zip code",
            "maxLength": 32
          }
        }
      },
      "BillingGroupUpdateResponse": {
        "type": "object",
        "description": "BillingGroupUpdateResponse",
        "properties": {
          "billing_group": {
            "type": "object",
            "description": "Billing group information",
            "properties": {
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "account_name": {
                "type": "string",
                "description": "Account name",
                "maxLength": 128
              },
              "address_lines": {
                "type": "array",
                "description": "Address lines",
                "maxItems": 16,
                "items": { "type": "string" }
              },
              "billing_address": {
                "type": "string",
                "description": "DEPRECATED: use split address fields like company, address_lines, zip_code, city and state instead",
                "maxLength": 1000
              },
              "billing_address_id": {
                "type": "string",
                "description": "Address ID",
                "minLength": 36,
                "maxLength": 36
              },
              "billing_contact_emails": {
                "type": "array",
                "description": "List of billing groups contact email addresses",
                "maxItems": 10,
                "items": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": ["email"]
                }
              },
              "billing_currency": {
                "type": "string",
                "description": "Billing currency",
                "enum": [
                  "AUD",
                  "CAD",
                  "CHF",
                  "DKK",
                  "EUR",
                  "GBP",
                  "JPY",
                  "NOK",
                  "NZD",
                  "SEK",
                  "SGD",
                  "USD"
                ]
              },
              "billing_emails": {
                "type": "array",
                "description": "List of project billing email addresses",
                "maxItems": 10,
                "items": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": ["email"]
                }
              },
              "billing_extra_text": {
                "type": "string",
                "description": "Extra text to be included in all project invoices, e.g. purchase order or cost center number",
                "maxLength": 1000
              },
              "billing_group_id": {
                "type": "string",
                "description": "Billing group ID",
                "minLength": 36,
                "maxLength": 36
              },
              "billing_group_name": {
                "type": "string",
                "description": "Billing group name",
                "maxLength": 128
              },
              "billing_type": {
                "type": "string",
                "description": "Method of charging/invoicing this project"
              },
              "card_info": {
                "type": "object",
                "description": "Credit card assigned to the project",
                "properties": {
                  "brand": { "type": "string", "description": "Brand" },
                  "card_id": {
                    "type": "string",
                    "description": "Credit card ID",
                    "maxLength": 64
                  },
                  "country": {
                    "type": "string",
                    "description": "Country",
                    "maxLength": 128
                  },
                  "country_code": {
                    "type": "string",
                    "description": "Two letter ISO country code",
                    "maxLength": 2
                  },
                  "exp_month": {
                    "type": "integer",
                    "description": "Expiration month",
                    "minimum": 1,
                    "maximum": 12
                  },
                  "exp_year": {
                    "type": "integer",
                    "description": "Expiration year",
                    "minimum": 2015,
                    "maximum": 2100
                  },
                  "last4": {
                    "type": "string",
                    "description": "Credit card last four digits"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name on the credit card",
                    "maxLength": 256
                  },
                  "user_email": {
                    "type": "string",
                    "description": "User email address",
                    "maxLength": 319
                  }
                },
                "required": [
                  "brand",
                  "card_id",
                  "country",
                  "country_code",
                  "exp_month",
                  "exp_year",
                  "last4",
                  "name",
                  "user_email"
                ]
              },
              "city": {
                "type": "string",
                "description": "Address city",
                "maxLength": 512
              },
              "company": {
                "type": "string",
                "description": "Name of a company",
                "maxLength": 128
              },
              "country": {
                "type": "string",
                "description": "Billing country",
                "maxLength": 128
              },
              "country_code": {
                "type": "string",
                "description": "Two letter ISO country code",
                "maxLength": 2
              },
              "create_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              },
              "estimated_balance_local": {
                "type": "string",
                "description": "Estimated balance in billing currency, before tax"
              },
              "estimated_balance_usd": {
                "type": "string",
                "description": "Estimated balance in USD, before tax"
              },
              "payment_method": {
                "type": "string",
                "description": "Payment method",
                "enum": [
                  "accrual",
                  "card",
                  "disabled",
                  "email",
                  "no_payment_expected",
                  "partner"
                ]
              },
              "shipping_address_id": {
                "type": "string",
                "description": "Address ID",
                "minLength": 36,
                "maxLength": 36
              },
              "state": {
                "type": "string",
                "description": "Address state or province",
                "maxLength": 128
              },
              "vat_id": {
                "type": "string",
                "description": "EU VAT Identification Number",
                "maxLength": 64
              },
              "zip_code": {
                "type": "string",
                "description": "Address zip code",
                "maxLength": 32
              }
            },
            "required": [
              "account_id",
              "account_name",
              "address_lines",
              "billing_contact_emails",
              "billing_currency",
              "billing_emails",
              "billing_extra_text",
              "billing_group_id",
              "billing_group_name",
              "billing_type",
              "card_info",
              "city",
              "company",
              "country",
              "country_code",
              "create_time",
              "estimated_balance_local",
              "estimated_balance_usd",
              "payment_method",
              "state",
              "vat_id",
              "zip_code"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["billing_group"]
      },
      "InvoiceGetResponse": {
        "type": "object",
        "description": "InvoiceGetResponse",
        "properties": {
          "invoice": {
            "type": "object",
            "description": "InvoiceModel",
            "properties": {
              "billing_group_id": {
                "type": "string",
                "description": "Billing Group ID",
                "minLength": 36,
                "maxLength": 36
              },
              "billing_group_name": {
                "type": "string",
                "description": "Billing Group Name",
                "maxLength": 128
              },
              "billing_group_state": {
                "type": "string",
                "description": "Billing group state"
              },
              "currency": {
                "type": "string",
                "description": "Currency",
                "maxLength": 16
              },
              "download_cookie": {
                "type": "string",
                "description": "Download Cookie"
              },
              "due_date": {
                "type": "string",
                "description": "Due Date",
                "maxLength": 36
              },
              "generated_at": {
                "type": "string",
                "description": "Generated At",
                "maxLength": 36
              },
              "invoice_number": {
                "type": "string",
                "description": "Invoice Number",
                "minLength": 1
              },
              "period_begin": {
                "type": "string",
                "description": "Period Begin",
                "maxLength": 36
              },
              "period_end": {
                "type": "string",
                "description": "Period End",
                "maxLength": 36
              },
              "state": {
                "type": "string",
                "description": "State",
                "maxLength": 36
              },
              "total_inc_vat": {
                "type": "string",
                "description": "Total Inc Vat",
                "maxLength": 16
              },
              "total_vat_zero": {
                "type": "string",
                "description": "Total Vat Zero",
                "maxLength": 16
              }
            },
            "required": [
              "billing_group_id",
              "billing_group_name",
              "billing_group_state",
              "currency",
              "generated_at",
              "invoice_number",
              "period_begin",
              "period_end",
              "state",
              "total_inc_vat",
              "total_vat_zero"
            ]
          }
        },
        "required": ["invoice"]
      },
      "OrganizationAddressCreateRequestBody": {
        "type": "object",
        "description": "OrganizationAddressCreateRequestBody",
        "properties": {
          "address_lines": {
            "type": "array",
            "description": "Address lines",
            "minItems": 1,
            "items": { "type": "string" }
          },
          "city": { "type": "string", "description": "City", "maxLength": 512 },
          "company_name": {
            "type": "string",
            "description": "Company Name",
            "maxLength": 128
          },
          "country_code": {
            "type": "string",
            "description": "Country Code",
            "maxLength": 2
          },
          "state": {
            "type": "string",
            "description": "State",
            "maxLength": 128
          },
          "zip_code": {
            "type": "string",
            "description": "Zip Code",
            "maxLength": 32
          }
        },
        "required": ["address_lines", "city", "country_code"]
      },
      "OrganizationAddressCreateResponse": {
        "type": "object",
        "description": "OrganizationAddressCreateResponse",
        "properties": {
          "address": {
            "type": "object",
            "description": "Addresses",
            "properties": {
              "address_id": {
                "type": "string",
                "description": "Address ID",
                "minLength": 36,
                "maxLength": 36
              },
              "address_lines": {
                "type": "array",
                "description": "Address Lines",
                "items": { "type": "string" }
              },
              "address_status": {
                "type": "string",
                "description": "AddressStatus",
                "enum": ["active", "deleted"]
              },
              "city": {
                "type": "string",
                "description": "City",
                "maxLength": 512
              },
              "company_name": {
                "type": "string",
                "description": "Company Name",
                "maxLength": 128
              },
              "country_code": {
                "type": "string",
                "description": "Country Code",
                "maxLength": 2
              },
              "create_time": {
                "type": "string",
                "description": "Create Time",
                "maxLength": 36
              },
              "delete_time": {
                "type": "string",
                "description": "Delete Time",
                "maxLength": 36
              },
              "organization_id": {
                "type": "string",
                "description": "Organization ID"
              },
              "state": {
                "type": "string",
                "description": "State",
                "maxLength": 128
              },
              "update_time": {
                "type": "string",
                "description": "Update Time",
                "maxLength": 36
              },
              "zip_code": {
                "type": "string",
                "description": "Zip Code",
                "maxLength": 32
              }
            },
            "required": [
              "address_id",
              "address_status",
              "country_code",
              "create_time",
              "update_time"
            ]
          }
        },
        "required": ["address"]
      },
      "OrganizationAddressDeleteResponse": {
        "type": "object",
        "description": "OrganizationAddressDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "OrganizationAddressGetResponse": {
        "type": "object",
        "description": "OrganizationAddressGetResponse",
        "properties": {
          "address": {
            "type": "object",
            "description": "Addresses",
            "properties": {
              "address_id": {
                "type": "string",
                "description": "Address ID",
                "minLength": 36,
                "maxLength": 36
              },
              "address_lines": {
                "type": "array",
                "description": "Address Lines",
                "items": { "type": "string" }
              },
              "address_status": {
                "type": "string",
                "description": "AddressStatus",
                "enum": ["active", "deleted"]
              },
              "city": {
                "type": "string",
                "description": "City",
                "maxLength": 512
              },
              "company_name": {
                "type": "string",
                "description": "Company Name",
                "maxLength": 128
              },
              "country_code": {
                "type": "string",
                "description": "Country Code",
                "maxLength": 2
              },
              "create_time": {
                "type": "string",
                "description": "Create Time",
                "maxLength": 36
              },
              "delete_time": {
                "type": "string",
                "description": "Delete Time",
                "maxLength": 36
              },
              "organization_id": {
                "type": "string",
                "description": "Organization ID"
              },
              "state": {
                "type": "string",
                "description": "State",
                "maxLength": 128
              },
              "update_time": {
                "type": "string",
                "description": "Update Time",
                "maxLength": 36
              },
              "zip_code": {
                "type": "string",
                "description": "Zip Code",
                "maxLength": 32
              }
            },
            "required": [
              "address_id",
              "address_status",
              "country_code",
              "create_time",
              "update_time"
            ]
          }
        },
        "required": ["address"]
      },
      "OrganizationAddressListResponse": {
        "type": "object",
        "description": "OrganizationAddressListResponse",
        "properties": {
          "addresses": {
            "type": "array",
            "description": "Addresses",
            "items": {
              "type": "object",
              "properties": {
                "address_id": {
                  "type": "string",
                  "description": "Address ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "address_lines": {
                  "type": "array",
                  "description": "Address Lines",
                  "items": { "type": "string" }
                },
                "address_status": {
                  "type": "string",
                  "description": "AddressStatus",
                  "enum": ["active", "deleted"]
                },
                "city": {
                  "type": "string",
                  "description": "City",
                  "maxLength": 512
                },
                "company_name": {
                  "type": "string",
                  "description": "Company Name",
                  "maxLength": 128
                },
                "country_code": {
                  "type": "string",
                  "description": "Country Code",
                  "maxLength": 2
                },
                "create_time": {
                  "type": "string",
                  "description": "Create Time",
                  "maxLength": 36
                },
                "delete_time": {
                  "type": "string",
                  "description": "Delete Time",
                  "maxLength": 36
                },
                "organization_id": {
                  "type": "string",
                  "description": "Organization ID"
                },
                "state": {
                  "type": "string",
                  "description": "State",
                  "maxLength": 128
                },
                "update_time": {
                  "type": "string",
                  "description": "Update Time",
                  "maxLength": 36
                },
                "zip_code": {
                  "type": "string",
                  "description": "Zip Code",
                  "maxLength": 32
                }
              },
              "required": [
                "address_id",
                "address_status",
                "country_code",
                "create_time",
                "update_time"
              ]
            }
          }
        },
        "required": ["addresses"]
      },
      "OrganizationAddressUpdateRequestBody": {
        "type": "object",
        "description": "OrganizationAddressUpdateRequestBody",
        "properties": {
          "address_lines": {
            "type": "array",
            "description": "Address Lines",
            "minItems": 1,
            "items": { "type": "string" }
          },
          "city": { "type": "string", "description": "City", "maxLength": 512 },
          "company_name": {
            "type": "string",
            "description": "Company Name",
            "maxLength": 128
          },
          "country_code": {
            "type": "string",
            "description": "Country Code",
            "maxLength": 2
          },
          "state": {
            "type": "string",
            "description": "State",
            "maxLength": 128
          },
          "zip_code": {
            "type": "string",
            "description": "Zip Code",
            "maxLength": 32
          }
        }
      },
      "OrganizationAddressUpdateResponse": {
        "type": "object",
        "description": "OrganizationAddressUpdateResponse",
        "properties": {
          "updated_address": {
            "type": "object",
            "description": "Addresses",
            "properties": {
              "address_id": {
                "type": "string",
                "description": "Address ID",
                "minLength": 36,
                "maxLength": 36
              },
              "address_lines": {
                "type": "array",
                "description": "Address Lines",
                "items": { "type": "string" }
              },
              "address_status": {
                "type": "string",
                "description": "AddressStatus",
                "enum": ["active", "deleted"]
              },
              "city": {
                "type": "string",
                "description": "City",
                "maxLength": 512
              },
              "company_name": {
                "type": "string",
                "description": "Company Name",
                "maxLength": 128
              },
              "country_code": {
                "type": "string",
                "description": "Country Code",
                "maxLength": 2
              },
              "create_time": {
                "type": "string",
                "description": "Create Time",
                "maxLength": 36
              },
              "delete_time": {
                "type": "string",
                "description": "Delete Time",
                "maxLength": 36
              },
              "organization_id": {
                "type": "string",
                "description": "Organization ID"
              },
              "state": {
                "type": "string",
                "description": "State",
                "maxLength": 128
              },
              "update_time": {
                "type": "string",
                "description": "Update Time",
                "maxLength": 36
              },
              "zip_code": {
                "type": "string",
                "description": "Zip Code",
                "maxLength": 32
              }
            },
            "required": [
              "address_id",
              "address_status",
              "country_code",
              "create_time",
              "update_time"
            ]
          }
        },
        "required": ["updated_address"]
      },
      "ListCloudsResponse": {
        "type": "object",
        "description": "ListCloudsResponse",
        "properties": {
          "clouds": {
            "type": "array",
            "description": "List of available clouds",
            "items": {
              "type": "object",
              "properties": {
                "cloud_description": {
                  "type": "string",
                  "description": "Cloud provider and location"
                },
                "cloud_name": {
                  "type": "string",
                  "description": "Target cloud",
                  "maxLength": 256
                },
                "geo_latitude": {
                  "type": "number",
                  "description": "Approximate geographic latitude of the datacenters"
                },
                "geo_longitude": {
                  "type": "number",
                  "description": "Approximate geographic longitude of the datacenters"
                },
                "geo_region": {
                  "type": "string",
                  "description": "Geographical region"
                },
                "provider": {
                  "type": "string",
                  "description": "Cloud provider name"
                },
                "provider_description": {
                  "type": "string",
                  "description": "Cloud provider description"
                }
              },
              "required": ["cloud_name", "geo_region"]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["clouds"]
      },
      "ListProjectCloudsResponse": {
        "type": "object",
        "description": "ListProjectCloudsResponse",
        "properties": {
          "clouds": {
            "type": "array",
            "description": "List of available clouds",
            "items": {
              "type": "object",
              "properties": {
                "cloud_description": {
                  "type": "string",
                  "description": "Cloud provider and location"
                },
                "cloud_name": {
                  "type": "string",
                  "description": "Target cloud",
                  "maxLength": 256
                },
                "geo_latitude": {
                  "type": "number",
                  "description": "Approximate geographic latitude of the datacenters"
                },
                "geo_longitude": {
                  "type": "number",
                  "description": "Approximate geographic longitude of the datacenters"
                },
                "geo_region": {
                  "type": "string",
                  "description": "Geographical region"
                },
                "provider": {
                  "type": "string",
                  "description": "Cloud provider name"
                },
                "provider_description": {
                  "type": "string",
                  "description": "Cloud provider description"
                }
              },
              "required": ["cloud_name", "geo_region"]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["clouds"]
      },
      "PublicPrivatelinkAvailabilityListResponse": {
        "type": "object",
        "description": "PublicPrivatelinkAvailabilityListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "privatelink_availability": {
            "type": "array",
            "description": "Privatelink pricing information for supported clouds",
            "items": {
              "type": "object",
              "properties": {
                "cloud_name": {
                  "type": "string",
                  "description": "Target cloud",
                  "maxLength": 256
                },
                "price_usd": {
                  "type": "string",
                  "description": "Hourly privatelink price in this cloud region"
                }
              },
              "required": ["cloud_name", "price_usd"]
            }
          }
        },
        "required": ["privatelink_availability"]
      },
      "PublicStaticIPAvailabilityListResponse": {
        "type": "object",
        "description": "PublicStaticIPAvailabilityListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "static_ip_address_availability": {
            "type": "array",
            "description": "Paginated array",
            "items": {
              "type": "object",
              "properties": {
                "cloud_name": {
                  "type": "string",
                  "description": "Target cloud",
                  "maxLength": 256
                },
                "price_usd": {
                  "type": "string",
                  "description": "Hourly static IP address price in this cloud region"
                }
              },
              "required": ["cloud_name", "price_usd"]
            }
          }
        },
        "required": ["static_ip_address_availability"]
      },
      "OrganizationDomainAddRequestBody": {
        "type": "object",
        "description": "OrganizationDomainAddRequestBody",
        "properties": {
          "domain_name": {
            "type": "string",
            "description": "Name of the domain to be added"
          },
          "verification_type": {
            "type": "string",
            "description": "Type of verification to be made",
            "enum": ["dns", "http"]
          }
        },
        "required": ["domain_name"]
      },
      "OrganizationDomainAddResponse": {
        "type": "object",
        "description": "OrganizationDomainAddResponse",
        "properties": {
          "challenge_token": {
            "type": "string",
            "description": "Random string to be used for validation"
          },
          "create_time": {
            "type": "string",
            "description": "Time of creating the domain",
            "maxLength": 36
          },
          "domain_id": { "type": "string", "description": "ID of the domain" },
          "domain_name": {
            "type": "string",
            "description": "Name of the domain"
          },
          "linked_authentication_method_ids": {
            "type": "array",
            "description": "Linked Authentication Method Ids",
            "items": { "type": "string" }
          },
          "organization_id": {
            "type": "string",
            "description": "ID of the organization owning this domain"
          },
          "state": {
            "type": "string",
            "description": "State of the verification process",
            "enum": ["deleted", "unverified", "verified"]
          },
          "verification_type": {
            "type": "string",
            "description": "Type of verification to be made",
            "enum": ["dns", "http"]
          }
        },
        "required": [
          "challenge_token",
          "create_time",
          "domain_id",
          "domain_name",
          "linked_authentication_method_ids",
          "organization_id",
          "state",
          "verification_type"
        ]
      },
      "OrganizationDomainUpdateRequestBody": {
        "type": "object",
        "description": "OrganizationDomainUpdateRequestBody",
        "properties": {
          "verification_type": {
            "type": "string",
            "description": "OrganizationDomainVerificationType",
            "enum": ["dns", "http"]
          }
        }
      },
      "OrganizationDomainUpdateResponse": {
        "type": "object",
        "description": "OrganizationDomainUpdateResponse",
        "properties": {
          "challenge_token": {
            "type": "string",
            "description": "Random string to be used for validation"
          },
          "create_time": {
            "type": "string",
            "description": "Time of creating the domain",
            "maxLength": 36
          },
          "domain_id": { "type": "string", "description": "ID of the domain" },
          "domain_name": {
            "type": "string",
            "description": "Name of the domain"
          },
          "linked_authentication_method_ids": {
            "type": "array",
            "description": "Linked Authentication Method Ids",
            "items": { "type": "string" }
          },
          "organization_id": {
            "type": "string",
            "description": "ID of the organization owning this domain"
          },
          "state": {
            "type": "string",
            "description": "State of the verification process",
            "enum": ["deleted", "unverified", "verified"]
          },
          "verification_type": {
            "type": "string",
            "description": "Type of verification to be made",
            "enum": ["dns", "http"]
          }
        },
        "required": [
          "challenge_token",
          "create_time",
          "domain_id",
          "domain_name",
          "linked_authentication_method_ids",
          "organization_id",
          "state",
          "verification_type"
        ]
      },
      "OrganizationDomainVerifyResponse": {
        "type": "object",
        "description": "OrganizationDomainVerifyResponse",
        "properties": {
          "challenge_token": {
            "type": "string",
            "description": "Random string to be used for validation"
          },
          "create_time": {
            "type": "string",
            "description": "Time of creating the domain",
            "maxLength": 36
          },
          "domain_id": { "type": "string", "description": "ID of the domain" },
          "domain_name": {
            "type": "string",
            "description": "Name of the domain"
          },
          "linked_authentication_method_ids": {
            "type": "array",
            "description": "Linked Authentication Method Ids",
            "items": { "type": "string" }
          },
          "organization_id": {
            "type": "string",
            "description": "ID of the organization owning this domain"
          },
          "state": {
            "type": "string",
            "description": "State of the verification process",
            "enum": ["deleted", "unverified", "verified"]
          },
          "verification_type": {
            "type": "string",
            "description": "Type of verification to be made",
            "enum": ["dns", "http"]
          }
        },
        "required": [
          "challenge_token",
          "create_time",
          "domain_id",
          "domain_name",
          "linked_authentication_method_ids",
          "organization_id",
          "state",
          "verification_type"
        ]
      },
      "OrganizationDomainsListResponse": {
        "type": "object",
        "description": "OrganizationDomainsListResponse",
        "properties": {
          "domains": {
            "type": "array",
            "description": "List of domains for the organization",
            "items": {
              "type": "object",
              "properties": {
                "challenge_token": {
                  "type": "string",
                  "description": "Random string to be used for validation"
                },
                "create_time": {
                  "type": "string",
                  "description": "Time of creating the domain",
                  "maxLength": 36
                },
                "domain_id": {
                  "type": "string",
                  "description": "ID of the domain"
                },
                "domain_name": {
                  "type": "string",
                  "description": "Name of the domain"
                },
                "linked_authentication_method_ids": {
                  "type": "array",
                  "description": "Linked Authentication Method Ids",
                  "items": { "type": "string" }
                },
                "organization_id": {
                  "type": "string",
                  "description": "ID of the organization owning this domain"
                },
                "state": {
                  "type": "string",
                  "description": "State of the verification process",
                  "enum": ["deleted", "unverified", "verified"]
                },
                "verification_type": {
                  "type": "string",
                  "description": "Type of verification to be made",
                  "enum": ["dns", "http"]
                }
              },
              "required": [
                "challenge_token",
                "create_time",
                "domain_id",
                "domain_name",
                "linked_authentication_method_ids",
                "organization_id",
                "state",
                "verification_type"
              ]
            }
          }
        },
        "required": ["domains"]
      },
      "UserGroupCreateRequestBody": {
        "type": "object",
        "description": "UserGroupCreateRequestBody",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description",
            "maxLength": 4096
          },
          "user_group_name": {
            "type": "string",
            "description": "User Group Name",
            "maxLength": 128
          }
        },
        "required": ["description", "user_group_name"]
      },
      "UserGroupCreateResponse": {
        "type": "object",
        "description": "UserGroupCreateResponse",
        "properties": {
          "create_time": {
            "type": "string",
            "description": "User group creation time",
            "maxLength": 36
          },
          "description": {
            "type": "string",
            "description": "Description",
            "maxLength": 4096
          },
          "managed_by_scim": {
            "type": "boolean",
            "description": "Managed By Scim"
          },
          "update_time": {
            "type": "string",
            "description": "User group last update time",
            "maxLength": 36
          },
          "user_group_id": {
            "type": "string",
            "description": "User Group ID",
            "maxLength": 36
          },
          "user_group_name": {
            "type": "string",
            "description": "User Group Name",
            "maxLength": 128
          }
        },
        "required": [
          "create_time",
          "description",
          "managed_by_scim",
          "update_time",
          "user_group_id",
          "user_group_name"
        ]
      },
      "UserGroupGetResponse": {
        "type": "object",
        "description": "UserGroupGetResponse",
        "properties": {
          "create_time": {
            "type": "string",
            "description": "User group creation time",
            "maxLength": 36
          },
          "description": {
            "type": "string",
            "description": "Description",
            "maxLength": 4096
          },
          "managed_by_scim": {
            "type": "boolean",
            "description": "Managed By Scim"
          },
          "update_time": {
            "type": "string",
            "description": "User group last update time",
            "maxLength": 36
          },
          "user_group_id": {
            "type": "string",
            "description": "User Group ID",
            "maxLength": 36
          },
          "user_group_name": {
            "type": "string",
            "description": "User Group Name",
            "maxLength": 128
          }
        },
        "required": [
          "create_time",
          "description",
          "managed_by_scim",
          "update_time",
          "user_group_id",
          "user_group_name"
        ]
      },
      "UserGroupMemberListResponse": {
        "type": "object",
        "description": "UserGroupMemberListResponse",
        "properties": {
          "members": {
            "type": "array",
            "description": "User group members",
            "items": {
              "type": "object",
              "properties": {
                "last_activity_time": {
                  "type": "string",
                  "description": "Last Activity Time",
                  "maxLength": 36
                },
                "user_id": { "type": "string", "description": "User ID" },
                "user_info": {
                  "type": "object",
                  "description": "OrganizationUserInfo",
                  "properties": {
                    "city": { "type": "string", "description": "City" },
                    "country": { "type": "string", "description": "Country" },
                    "create_time": {
                      "type": "string",
                      "description": "Creation time",
                      "maxLength": 36
                    },
                    "department": {
                      "type": "string",
                      "description": "Department"
                    },
                    "is_application_user": {
                      "type": "boolean",
                      "description": "Is Application User"
                    },
                    "job_title": {
                      "type": "string",
                      "description": "Job Title"
                    },
                    "managed_by_scim": {
                      "type": "boolean",
                      "description": "Managed By Scim"
                    },
                    "managing_organization_id": {
                      "type": "string",
                      "description": "Managing Organization ID",
                      "maxLength": 36
                    },
                    "real_name": {
                      "type": "string",
                      "description": "Real Name",
                      "maxLength": 256
                    },
                    "state": { "type": "string", "description": "State" },
                    "user_email": {
                      "type": "string",
                      "description": "User Email"
                    }
                  },
                  "required": [
                    "create_time",
                    "is_application_user",
                    "managed_by_scim",
                    "real_name",
                    "state",
                    "user_email"
                  ]
                }
              },
              "required": ["user_id", "user_info"]
            }
          }
        },
        "required": ["members"]
      },
      "UserGroupMembersUpdateRequestBody": {
        "type": "object",
        "description": "UserGroupMembersUpdateRequestBody",
        "properties": {
          "member_ids": {
            "type": "array",
            "description": "List of user IDs to apply the operation on",
            "maxItems": 1024,
            "items": { "type": "string" }
          },
          "operation": {
            "type": "string",
            "description": "Operation to be performed on the group",
            "enum": ["add_members", "remove_members"]
          }
        },
        "required": ["member_ids", "operation"]
      },
      "UserGroupUpdateRequestBody": {
        "type": "object",
        "description": "UserGroupUpdateRequestBody",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description",
            "maxLength": 4096
          },
          "user_group_name": {
            "type": "string",
            "description": "User Group Name",
            "maxLength": 128
          }
        }
      },
      "UserGroupUpdateResponse": {
        "type": "object",
        "description": "UserGroupUpdateResponse",
        "properties": {
          "create_time": {
            "type": "string",
            "description": "User group creation time",
            "maxLength": 36
          },
          "description": {
            "type": "string",
            "description": "Description",
            "maxLength": 4096
          },
          "managed_by_scim": {
            "type": "boolean",
            "description": "Managed By Scim"
          },
          "update_time": {
            "type": "string",
            "description": "User group last update time",
            "maxLength": 36
          },
          "user_group_id": {
            "type": "string",
            "description": "User Group ID",
            "maxLength": 36
          },
          "user_group_name": {
            "type": "string",
            "description": "User Group Name",
            "maxLength": 128
          }
        },
        "required": [
          "create_time",
          "description",
          "managed_by_scim",
          "update_time",
          "user_group_id",
          "user_group_name"
        ]
      },
      "UserGroupsListResponse": {
        "type": "object",
        "description": "UserGroupsListResponse",
        "properties": {
          "user_groups": {
            "type": "array",
            "description": "User Groups",
            "items": {
              "type": "object",
              "properties": {
                "create_time": {
                  "type": "string",
                  "description": "User group creation time",
                  "maxLength": 36
                },
                "description": {
                  "type": "string",
                  "description": "Description",
                  "maxLength": 4096
                },
                "managed_by_scim": {
                  "type": "boolean",
                  "description": "Managed By Scim"
                },
                "member_count": {
                  "type": "integer",
                  "description": "Member Count"
                },
                "update_time": {
                  "type": "string",
                  "description": "User group last update time",
                  "maxLength": 36
                },
                "user_group_id": {
                  "type": "string",
                  "description": "User Group ID",
                  "maxLength": 36
                },
                "user_group_name": {
                  "type": "string",
                  "description": "User Group Name",
                  "maxLength": 128
                }
              },
              "required": [
                "create_time",
                "description",
                "managed_by_scim",
                "member_count",
                "update_time",
                "user_group_id",
                "user_group_name"
              ]
            }
          }
        },
        "required": ["user_groups"]
      },
      "OrganizationAuthenticationConfigGetResponse": {
        "type": "object",
        "description": "OrganizationAuthenticationConfigGetResponse",
        "properties": {
          "oauth_enabled": {
            "type": "boolean",
            "description": "Organization users are able to use OAuth authentication."
          },
          "password_auth_enabled": {
            "type": "boolean",
            "description": "Organization users are able to use password authentication."
          },
          "personal_tokens_enabled": {
            "type": "boolean",
            "description": "Organization users can use their personal tokens to access the organization through the Aiven API or other applications."
          },
          "personal_tokens_require_allowed_auth_method": {
            "type": "boolean",
            "description": "Organization users are able to use personal tokens that were generated from one of the allowed authentication methods."
          },
          "saml_allow_external": {
            "type": "boolean",
            "description": "Organization users are able to use SAML authentication of other organizations."
          },
          "saml_enabled": {
            "type": "boolean",
            "description": "Organization users are able to use SAML authentication."
          },
          "two_factor_required": {
            "type": "boolean",
            "description": "2FA is required to access resources in this organization."
          }
        }
      },
      "OrganizationAuthenticationConfigUpdateRequestBody": {
        "type": "object",
        "description": "OrganizationAuthenticationConfigUpdateRequestBody",
        "properties": {
          "oauth_enabled": {
            "type": "boolean",
            "description": "Organization users are able to use OAuth authentication."
          },
          "password_auth_enabled": {
            "type": "boolean",
            "description": "Organization users are able to use password authentication."
          },
          "personal_tokens_enabled": {
            "type": "boolean",
            "description": "Organization users can use their personal tokens to access the organization through the Aiven API or other applications."
          },
          "personal_tokens_require_allowed_auth_method": {
            "type": "boolean",
            "description": "Organization users are able to use personal tokens that were generated from one of the allowed authentication methods."
          },
          "saml_allow_external": {
            "type": "boolean",
            "description": "Organization users are able to use SAML authentication of other organizations."
          },
          "saml_enabled": {
            "type": "boolean",
            "description": "Organization users are able to use SAML authentication."
          },
          "two_factor_required": {
            "type": "boolean",
            "description": "2FA is required to access resources in this organization."
          }
        }
      },
      "OrganizationAuthenticationConfigUpdateResponse": {
        "type": "object",
        "description": "OrganizationAuthenticationConfigUpdateResponse",
        "properties": {
          "oauth_enabled": {
            "type": "boolean",
            "description": "Organization users are able to use OAuth authentication."
          },
          "password_auth_enabled": {
            "type": "boolean",
            "description": "Organization users are able to use password authentication."
          },
          "personal_tokens_enabled": {
            "type": "boolean",
            "description": "Organization users can use their personal tokens to access the organization through the Aiven API or other applications."
          },
          "personal_tokens_require_allowed_auth_method": {
            "type": "boolean",
            "description": "Organization users are able to use personal tokens that were generated from one of the allowed authentication methods."
          },
          "saml_allow_external": {
            "type": "boolean",
            "description": "Organization users are able to use SAML authentication of other organizations."
          },
          "saml_enabled": {
            "type": "boolean",
            "description": "Organization users are able to use SAML authentication."
          },
          "two_factor_required": {
            "type": "boolean",
            "description": "2FA is required to access resources in this organization."
          }
        }
      },
      "OrganizationGetResponse": {
        "type": "object",
        "description": "OrganizationGetResponse",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "Account ID of the organization's root unit",
            "maxLength": 36
          },
          "create_time": {
            "type": "string",
            "description": "Time of creating the organization",
            "maxLength": 36
          },
          "default_governance_user_group_id": {
            "type": "string",
            "description": "Default governance user group ID",
            "maxLength": 36
          },
          "organization_id": {
            "type": "string",
            "description": "Organization's ID",
            "maxLength": 36
          },
          "organization_name": {
            "type": "string",
            "description": "Organization's name",
            "maxLength": 128
          },
          "tier": {
            "type": "string",
            "description": "Tier of the organization",
            "enum": ["business", "personal"]
          },
          "update_time": {
            "type": "string",
            "description": "Time of the organization's latest update",
            "maxLength": 36
          }
        },
        "required": [
          "account_id",
          "create_time",
          "organization_id",
          "organization_name",
          "tier",
          "update_time"
        ]
      },
      "OrganizationProjectsCreateRequestBody": {
        "type": "object",
        "description": "OrganizationProjectsCreateRequestBody",
        "properties": {
          "billing_group_id": {
            "type": "string",
            "description": "Billing group ID to assign to the project."
          },
          "parent_id": {
            "type": "string",
            "description": "Organization or unit ID to where to move the project"
          },
          "project_id": { "type": "string", "description": "Project ID" },
          "tags": {
            "type": "object",
            "description": "Tags",
            "properties": {
              "ANY": {
                "type": "string",
                "description": "Tag value",
                "maxLength": 64
              }
            }
          }
        },
        "required": ["billing_group_id", "project_id", "tags"]
      },
      "OrganizationProjectsCreateResponse": {
        "type": "object",
        "description": "OrganizationProjectsCreateResponse",
        "properties": {
          "billing_group_id": {
            "type": "string",
            "description": "Billing group ID"
          },
          "features": {
            "type": "object",
            "description": "Feature flags",
            "properties": {
              "ANY": { "type": "boolean", "description": "Boolean" }
            }
          },
          "parent_id": {
            "type": "string",
            "description": "Organization or unit ID to where the project belongs"
          },
          "parent_name": {
            "type": "string",
            "description": "Name of the organization or unit to where the project belongs"
          },
          "project_id": { "type": "string", "description": "Project ID" },
          "tags": {
            "type": "object",
            "description": "Tags",
            "properties": {
              "ANY": {
                "type": "string",
                "description": "Tag value",
                "maxLength": 64
              }
            }
          }
        },
        "required": ["features", "project_id", "tags"]
      },
      "OrganizationProjectsListResponse": {
        "type": "object",
        "description": "OrganizationProjectsListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "projects": {
            "type": "array",
            "description": "List of projects",
            "items": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "account_name": {
                  "type": "string",
                  "description": "Account name",
                  "maxLength": 128
                },
                "address_lines": {
                  "type": "array",
                  "description": "Address lines",
                  "maxItems": 16,
                  "items": { "type": "string" }
                },
                "available_credits": {
                  "type": "string",
                  "description": "Available credits, in USD"
                },
                "billing_address": {
                  "type": "string",
                  "description": "DEPRECATED: use split address fields like company, address_lines, zip_code, city and state instead",
                  "maxLength": 1000
                },
                "billing_currency": {
                  "type": "string",
                  "description": "Billing currency",
                  "enum": [
                    "AUD",
                    "CAD",
                    "CHF",
                    "DKK",
                    "EUR",
                    "GBP",
                    "JPY",
                    "NOK",
                    "NZD",
                    "SEK",
                    "SGD",
                    "USD"
                  ]
                },
                "billing_emails": {
                  "type": "array",
                  "description": "List of project billing email addresses",
                  "maxItems": 10,
                  "items": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "description": "User email address",
                        "maxLength": 319
                      }
                    },
                    "required": ["email"]
                  }
                },
                "billing_extra_text": {
                  "type": "string",
                  "description": "Extra text to be included in all project invoices, e.g. purchase order or cost center number",
                  "maxLength": 1000
                },
                "billing_group_id": {
                  "type": "string",
                  "description": "Billing group ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "billing_group_name": {
                  "type": "string",
                  "description": "Billing group name",
                  "maxLength": 128
                },
                "card_info": {
                  "type": "object",
                  "description": "Credit card assigned to the project",
                  "properties": {
                    "brand": { "type": "string", "description": "Brand" },
                    "card_id": {
                      "type": "string",
                      "description": "Credit card ID",
                      "maxLength": 64
                    },
                    "country": {
                      "type": "string",
                      "description": "Country",
                      "maxLength": 128
                    },
                    "country_code": {
                      "type": "string",
                      "description": "Two letter ISO country code",
                      "maxLength": 2
                    },
                    "exp_month": {
                      "type": "integer",
                      "description": "Expiration month",
                      "minimum": 1,
                      "maximum": 12
                    },
                    "exp_year": {
                      "type": "integer",
                      "description": "Expiration year",
                      "minimum": 2015,
                      "maximum": 2100
                    },
                    "last4": {
                      "type": "string",
                      "description": "Credit card last four digits"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name on the credit card",
                      "maxLength": 256
                    },
                    "user_email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": [
                    "brand",
                    "card_id",
                    "country",
                    "country_code",
                    "exp_month",
                    "exp_year",
                    "last4",
                    "name",
                    "user_email"
                  ]
                },
                "city": {
                  "type": "string",
                  "description": "Address city",
                  "maxLength": 512
                },
                "company": {
                  "type": "string",
                  "description": "Name of a company",
                  "maxLength": 128
                },
                "country": {
                  "type": "string",
                  "description": "Billing country",
                  "maxLength": 128
                },
                "country_code": {
                  "type": "string",
                  "description": "Two letter ISO country code",
                  "maxLength": 2
                },
                "default_cloud": {
                  "type": "string",
                  "description": "Default cloud to use when launching services",
                  "maxLength": 256
                },
                "end_of_life_extension": {
                  "type": "object",
                  "description": "End of life extension information",
                  "properties": {
                    "elasticsearch": {
                      "type": "object",
                      "description": "Service EOL extension",
                      "properties": {
                        "eol_date": {
                          "type": "string",
                          "description": "Extended EOL date"
                        },
                        "version": {
                          "type": "string",
                          "description": "Service version"
                        }
                      },
                      "required": ["eol_date", "version"]
                    }
                  }
                },
                "estimated_balance": {
                  "type": "string",
                  "description": "Estimated balance, in USD"
                },
                "estimated_balance_local": {
                  "type": "string",
                  "description": "Estimated balance, in billing currency"
                },
                "features": {
                  "type": "object",
                  "description": "Feature flags",
                  "properties": {}
                },
                "organization_id": {
                  "type": "string",
                  "description": "Organization ID",
                  "maxLength": 36
                },
                "payment_method": {
                  "type": "string",
                  "description": "Payment method"
                },
                "project_name": {
                  "type": "string",
                  "description": "Project name",
                  "maxLength": 63
                },
                "state": {
                  "type": "string",
                  "description": "Address state or province",
                  "maxLength": 128
                },
                "tags": {
                  "type": "object",
                  "description": "Set of resource tags",
                  "properties": {}
                },
                "tech_emails": {
                  "type": "array",
                  "description": "List of project tech email addresses",
                  "maxItems": 10,
                  "items": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "description": "User email address",
                        "maxLength": 319
                      }
                    },
                    "required": ["email"]
                  }
                },
                "tenant_id": { "type": "string", "description": "Tenant ID" },
                "trial_expiration_time": {
                  "type": "string",
                  "description": "Trial expiration time (ISO 8601)",
                  "maxLength": 36
                },
                "vat_id": {
                  "type": "string",
                  "description": "EU VAT Identification Number",
                  "maxLength": 64
                },
                "zip_code": {
                  "type": "string",
                  "description": "Address zip code",
                  "maxLength": 32
                }
              },
              "required": [
                "account_id",
                "billing_address",
                "billing_emails",
                "billing_group_id",
                "billing_group_name",
                "country",
                "country_code",
                "default_cloud",
                "estimated_balance",
                "organization_id",
                "payment_method",
                "project_name",
                "vat_id"
              ]
            }
          },
          "total_project_count": {
            "type": "integer",
            "description": "Total count of projects associated to account."
          }
        },
        "required": ["projects"]
      },
      "OrganizationProjectsUpdateRequestBody": {
        "type": "object",
        "description": "OrganizationProjectsUpdateRequestBody",
        "properties": {
          "billing_group_id": {
            "type": "string",
            "description": "Billing group ID to assign to the project. It's required when moving projects between organizations"
          },
          "parent_id": {
            "type": "string",
            "description": "Organization or unit ID to where to move the project"
          },
          "project_id": { "type": "string", "description": "New Project ID" },
          "tags": {
            "type": "object",
            "description": "Tags",
            "properties": {
              "ANY": {
                "type": "string",
                "description": "Tag value",
                "maxLength": 64
              }
            }
          },
          "tech_emails": {
            "type": "array",
            "description": "Technical contact emails",
            "items": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "Technical contact email"
                }
              },
              "required": ["email"]
            }
          }
        }
      },
      "OrganizationProjectsUpdateResponse": {
        "type": "object",
        "description": "OrganizationProjectsUpdateResponse",
        "properties": {
          "billing_group_id": {
            "type": "string",
            "description": "Billing group ID"
          },
          "features": {
            "type": "object",
            "description": "Feature flags",
            "properties": {
              "ANY": { "type": "boolean", "description": "Boolean" }
            }
          },
          "parent_id": {
            "type": "string",
            "description": "Organization or unit ID to where the project belongs"
          },
          "parent_name": {
            "type": "string",
            "description": "Name of the organization or unit to where the project belongs"
          },
          "project_id": { "type": "string", "description": "Project ID" },
          "tags": {
            "type": "object",
            "description": "Tags",
            "properties": {
              "ANY": {
                "type": "string",
                "description": "Tag value",
                "maxLength": 64
              }
            }
          }
        },
        "required": ["features", "project_id", "tags"]
      },
      "OrganizationUpdateRequestBody": {
        "type": "object",
        "description": "OrganizationUpdateRequestBody",
        "properties": {
          "name": {
            "type": "string",
            "description": "New name of the organization",
            "maxLength": 128
          },
          "tier": {
            "type": "string",
            "description": "New tier for the organization",
            "enum": ["business", "personal"]
          }
        }
      },
      "OrganizationUpdateResponse": {
        "type": "object",
        "description": "OrganizationUpdateResponse",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "Account ID of the organization's root unit",
            "maxLength": 36
          },
          "create_time": {
            "type": "string",
            "description": "Time of creating the organization",
            "maxLength": 36
          },
          "default_governance_user_group_id": {
            "type": "string",
            "description": "Default governance user group ID",
            "maxLength": 36
          },
          "organization_id": {
            "type": "string",
            "description": "Organization's ID",
            "maxLength": 36
          },
          "organization_name": {
            "type": "string",
            "description": "Organization's name",
            "maxLength": 128
          },
          "tier": {
            "type": "string",
            "description": "Tier of the organization",
            "enum": ["business", "personal"]
          },
          "update_time": {
            "type": "string",
            "description": "Time of the organization's latest update",
            "maxLength": 36
          }
        },
        "required": [
          "account_id",
          "create_time",
          "organization_id",
          "organization_name",
          "tier",
          "update_time"
        ]
      },
      "OrganizationUserInvitationAcceptRequestBody": {
        "type": "object",
        "description": "OrganizationUserInvitationAcceptRequestBody",
        "properties": {
          "action": {
            "type": "string",
            "description": "Action to be performed on the invitation",
            "enum": ["accept"]
          }
        }
      },
      "OrganizationUserInvitationsListResponse": {
        "type": "object",
        "description": "OrganizationUserInvitationsListResponse",
        "properties": {
          "invitations": {
            "type": "array",
            "description": "List of user invitations for the organization",
            "items": {
              "type": "object",
              "properties": {
                "create_time": {
                  "type": "string",
                  "description": "Time of creating the invitation",
                  "maxLength": 36
                },
                "expiry_time": {
                  "type": "string",
                  "description": "By when the invitation is valid",
                  "maxLength": 36
                },
                "invited_by": {
                  "type": "string",
                  "description": "Name of the invitation creator"
                },
                "user_email": { "type": "string", "description": "User Email" }
              },
              "required": [
                "create_time",
                "expiry_time",
                "invited_by",
                "user_email"
              ]
            }
          }
        },
        "required": ["invitations"]
      },
      "OrganizationUserInviteRequestBody": {
        "type": "object",
        "description": "OrganizationUserInviteRequestBody",
        "properties": {
          "user_email": { "type": "string", "description": "User Email" }
        },
        "required": ["user_email"]
      },
      "UserOrganizationCreateRequestBody": {
        "type": "object",
        "description": "UserOrganizationCreateRequestBody",
        "properties": {
          "organization_name": {
            "type": "string",
            "description": "Organization's name",
            "maxLength": 128
          },
          "primary_billing_group_id": {
            "type": "string",
            "description": "Billing group ID",
            "minLength": 36,
            "maxLength": 36
          },
          "tier": {
            "type": "string",
            "description": "Tier of the organization",
            "enum": ["business", "personal"]
          }
        },
        "required": ["organization_name", "tier"]
      },
      "UserOrganizationCreateResponse": {
        "type": "object",
        "description": "UserOrganizationCreateResponse",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "Account ID of the organization's root unit",
            "maxLength": 36
          },
          "create_time": {
            "type": "string",
            "description": "Time of creating the organization",
            "maxLength": 36
          },
          "default_governance_user_group_id": {
            "type": "string",
            "description": "Default governance user group ID",
            "maxLength": 36
          },
          "organization_id": {
            "type": "string",
            "description": "Organization's ID",
            "maxLength": 36
          },
          "organization_name": {
            "type": "string",
            "description": "Organization's name",
            "maxLength": 128
          },
          "tier": {
            "type": "string",
            "description": "Tier of the organization",
            "enum": ["business", "personal"]
          },
          "update_time": {
            "type": "string",
            "description": "Time of the organization's latest update",
            "maxLength": 36
          }
        },
        "required": [
          "account_id",
          "create_time",
          "organization_id",
          "organization_name",
          "tier",
          "update_time"
        ]
      },
      "UserOrganizationsListResponse": {
        "type": "object",
        "description": "UserOrganizationsListResponse",
        "properties": {
          "organizations": {
            "type": "array",
            "description": "Organizations",
            "items": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "Account ID of the organization's root unit",
                  "maxLength": 36
                },
                "create_time": {
                  "type": "string",
                  "description": "Time of creating the organization",
                  "maxLength": 36
                },
                "default_governance_user_group_id": {
                  "type": "string",
                  "description": "Default governance user group ID",
                  "maxLength": 36
                },
                "organization_id": {
                  "type": "string",
                  "description": "Organization's ID",
                  "maxLength": 36
                },
                "organization_name": {
                  "type": "string",
                  "description": "Organization's name",
                  "maxLength": 128
                },
                "tier": {
                  "type": "string",
                  "description": "Tier of the organization",
                  "enum": ["business", "personal"]
                },
                "update_time": {
                  "type": "string",
                  "description": "Time of the organization's latest update",
                  "maxLength": 36
                }
              },
              "required": [
                "account_id",
                "create_time",
                "organization_id",
                "organization_name",
                "tier",
                "update_time"
              ]
            }
          }
        },
        "required": ["organizations"]
      },
      "UserCreditCardAddRequestBody": {
        "type": "object",
        "description": "UserCreditCardAddRequestBody",
        "properties": {
          "stripe_token": {
            "type": "string",
            "description": "Credit card Stripe token",
            "maxLength": 256
          }
        },
        "required": ["stripe_token"]
      },
      "UserCreditCardAddResponse": {
        "type": "object",
        "description": "UserCreditCardAddResponse",
        "properties": {
          "card": {
            "type": "object",
            "description": "User credit card information",
            "properties": {
              "brand": { "type": "string", "description": "Brand" },
              "card_id": {
                "type": "string",
                "description": "Credit card ID",
                "maxLength": 64
              },
              "country": {
                "type": "string",
                "description": "Country",
                "maxLength": 128
              },
              "country_code": {
                "type": "string",
                "description": "Two letter ISO country code",
                "maxLength": 2
              },
              "exp_month": {
                "type": "integer",
                "description": "Expiration month",
                "minimum": 1,
                "maximum": 12
              },
              "exp_year": {
                "type": "integer",
                "description": "Expiration year",
                "minimum": 2015,
                "maximum": 2100
              },
              "last4": {
                "type": "string",
                "description": "Credit card last four digits"
              },
              "name": {
                "type": "string",
                "description": "Name on the credit card",
                "maxLength": 256
              },
              "organization_id": {
                "type": "string",
                "description": "Organization ID",
                "maxLength": 36
              },
              "projects": {
                "type": "array",
                "description": "List of projects the card is assigned to",
                "items": { "type": "string" }
              }
            },
            "required": [
              "brand",
              "card_id",
              "country",
              "country_code",
              "exp_month",
              "exp_year",
              "last4",
              "name",
              "projects"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["card"]
      },
      "UserCreditCardDeleteResponse": {
        "type": "object",
        "description": "UserCreditCardDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "UserCreditCardUpdateRequestBody": {
        "type": "object",
        "description": "UserCreditCardUpdateRequestBody",
        "properties": {
          "exp_month": {
            "type": "integer",
            "description": "Expiration month",
            "minimum": 1,
            "maximum": 12
          },
          "exp_year": {
            "type": "integer",
            "description": "Expiration year",
            "minimum": 2015,
            "maximum": 2100
          },
          "name": {
            "type": "string",
            "description": "Name on the credit card",
            "maxLength": 256
          }
        }
      },
      "UserCreditCardUpdateResponse": {
        "type": "object",
        "description": "UserCreditCardUpdateResponse",
        "properties": {
          "card": {
            "type": "object",
            "description": "User credit card information",
            "properties": {
              "brand": { "type": "string", "description": "Brand" },
              "card_id": {
                "type": "string",
                "description": "Credit card ID",
                "maxLength": 64
              },
              "country": {
                "type": "string",
                "description": "Country",
                "maxLength": 128
              },
              "country_code": {
                "type": "string",
                "description": "Two letter ISO country code",
                "maxLength": 2
              },
              "exp_month": {
                "type": "integer",
                "description": "Expiration month",
                "minimum": 1,
                "maximum": 12
              },
              "exp_year": {
                "type": "integer",
                "description": "Expiration year",
                "minimum": 2015,
                "maximum": 2100
              },
              "last4": {
                "type": "string",
                "description": "Credit card last four digits"
              },
              "name": {
                "type": "string",
                "description": "Name on the credit card",
                "maxLength": 256
              },
              "organization_id": {
                "type": "string",
                "description": "Organization ID",
                "maxLength": 36
              },
              "projects": {
                "type": "array",
                "description": "List of projects the card is assigned to",
                "items": { "type": "string" }
              }
            },
            "required": [
              "brand",
              "card_id",
              "country",
              "country_code",
              "exp_month",
              "exp_year",
              "last4",
              "name",
              "projects"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["card"]
      },
      "UserCreditCardsListResponse": {
        "type": "object",
        "description": "UserCreditCardsListResponse",
        "properties": {
          "cards": {
            "type": "array",
            "description": "List of user's credit cards",
            "items": {
              "type": "object",
              "properties": {
                "brand": { "type": "string", "description": "Brand" },
                "card_id": {
                  "type": "string",
                  "description": "Credit card ID",
                  "maxLength": 64
                },
                "country": {
                  "type": "string",
                  "description": "Country",
                  "maxLength": 128
                },
                "country_code": {
                  "type": "string",
                  "description": "Two letter ISO country code",
                  "maxLength": 2
                },
                "exp_month": {
                  "type": "integer",
                  "description": "Expiration month",
                  "minimum": 1,
                  "maximum": 12
                },
                "exp_year": {
                  "type": "integer",
                  "description": "Expiration year",
                  "minimum": 2015,
                  "maximum": 2100
                },
                "last4": {
                  "type": "string",
                  "description": "Credit card last four digits"
                },
                "name": {
                  "type": "string",
                  "description": "Name on the credit card",
                  "maxLength": 256
                },
                "organization_id": {
                  "type": "string",
                  "description": "Organization ID",
                  "maxLength": 36
                },
                "projects": {
                  "type": "array",
                  "description": "List of projects the card is assigned to",
                  "items": { "type": "string" }
                }
              },
              "required": [
                "brand",
                "card_id",
                "country",
                "country_code",
                "exp_month",
                "exp_year",
                "last4",
                "name",
                "projects"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["cards"]
      },
      "PermissionsGetResponse": {
        "type": "object",
        "description": "PermissionsGetResponse",
        "properties": {
          "permissions": {
            "type": "array",
            "description": "List of roles",
            "items": {
              "type": "object",
              "properties": {
                "create_time": {
                  "type": "string",
                  "description": "Create Time",
                  "maxLength": 36
                },
                "permissions": {
                  "type": "array",
                  "description": "List of roles",
                  "items": { "type": "string" }
                },
                "principal_id": {
                  "type": "string",
                  "description": "ID of the principal"
                },
                "principal_type": {
                  "type": "string",
                  "description": "Type of the principal",
                  "enum": ["user", "user_group"]
                },
                "update_time": {
                  "type": "string",
                  "description": "Update Time",
                  "maxLength": 36
                }
              },
              "required": [
                "create_time",
                "permissions",
                "principal_id",
                "principal_type",
                "update_time"
              ]
            }
          }
        },
        "required": ["permissions"]
      },
      "PermissionsSetRequestBody": {
        "type": "object",
        "description": "PermissionsSetRequestBody",
        "properties": {
          "permissions": {
            "type": "array",
            "description": "List of roles to set",
            "items": {
              "type": "object",
              "properties": {
                "permissions": {
                  "type": "array",
                  "description": "List of roles",
                  "items": { "type": "string" }
                },
                "principal_id": {
                  "type": "string",
                  "description": "ID of the principal"
                },
                "principal_type": {
                  "type": "string",
                  "description": "Type of the principal",
                  "enum": ["user", "user_group"]
                }
              },
              "required": ["permissions", "principal_id", "principal_type"]
            }
          }
        },
        "required": ["permissions"]
      },
      "PermissionsUpdateRequestBody": {
        "type": "object",
        "description": "PermissionsUpdateRequestBody",
        "properties": {
          "permissions": {
            "type": "array",
            "description": "List of roles to set",
            "items": {
              "type": "object",
              "properties": {
                "permissions": {
                  "type": "array",
                  "description": "List of roles",
                  "items": { "type": "string" }
                },
                "principal_id": {
                  "type": "string",
                  "description": "ID of the principal"
                },
                "principal_type": {
                  "type": "string",
                  "description": "Type of the principal",
                  "enum": ["user", "user_group"]
                }
              },
              "required": ["permissions", "principal_id", "principal_type"]
            }
          }
        },
        "required": ["permissions"]
      },
      "ListProjectVpcPeeringConnectionTypesResponse": {
        "type": "object",
        "description": "ListProjectVpcPeeringConnectionTypesResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "vpc_peering_connection_types": {
            "type": "array",
            "description": "Supported VPC peering connection types with pricing information for supported clouds",
            "items": {
              "type": "object",
              "properties": {
                "cloud_name": {
                  "type": "string",
                  "description": "Target cloud",
                  "maxLength": 256
                },
                "price_usd": {
                  "type": "string",
                  "description": "Hourly peering connection price in this cloud region"
                },
                "vpc_peering_connection_type": {
                  "type": "string",
                  "description": "Type of network connection from the VPC",
                  "enum": [
                    "aws-tgw-vpc-attachment",
                    "aws-vpc-peering-connection",
                    "azure-vnet-peering",
                    "google-vpc-peering",
                    "upcloud-vpc-peering"
                  ]
                }
              },
              "required": [
                "cloud_name",
                "price_usd",
                "vpc_peering_connection_type"
              ]
            }
          }
        },
        "required": ["vpc_peering_connection_types"]
      },
      "ProjectAlertsListResponse": {
        "type": "object",
        "description": "ProjectAlertsListResponse",
        "properties": {
          "alerts": {
            "type": "array",
            "description": "List of active alerts for the service",
            "items": {
              "type": "object",
              "properties": {
                "create_time": {
                  "type": "string",
                  "description": "Event creation timestamp (ISO 8601)",
                  "maxLength": 36
                },
                "event": {
                  "type": "string",
                  "description": "Name of the alerting event"
                },
                "node_name": {
                  "type": "string",
                  "description": "Name of the service node"
                },
                "project_name": {
                  "type": "string",
                  "description": "Project name",
                  "maxLength": 63
                },
                "service_name": {
                  "type": "string",
                  "description": "Service name",
                  "minLength": 1,
                  "maxLength": 64
                },
                "service_type": {
                  "type": "string",
                  "description": "Service type code",
                  "maxLength": 64
                },
                "severity": {
                  "type": "string",
                  "description": "Severity of the event"
                }
              },
              "required": ["create_time", "event", "project_name", "severity"]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["alerts"]
      },
      "ProjectCreateRequestBody": {
        "type": "object",
        "description": "ProjectCreateRequestBody",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "Account ID",
            "maxLength": 36
          },
          "add_account_owners_admin_access": {
            "type": "boolean",
            "description": "[DEPRECATED] If account_id is set, grant account owner team admin access to the new project. This flag is ignored, and assumed true."
          },
          "address_lines": {
            "type": "array",
            "description": "[DEPRECATED] Address lines",
            "maxItems": 16,
            "items": { "type": "string" }
          },
          "base_port": {
            "type": "integer",
            "description": "Base value that new services in this project will use to derive their port numbers.",
            "minimum": 10000,
            "maximum": 29000
          },
          "billing_address": {
            "type": "string",
            "description": "DEPRECATED: use split address fields like company, address_lines, zip_code, city and state instead",
            "maxLength": 1000
          },
          "billing_currency": {
            "type": "string",
            "description": "[DEPRECATED] Billing currency",
            "enum": [
              "AUD",
              "CAD",
              "CHF",
              "DKK",
              "EUR",
              "GBP",
              "JPY",
              "NOK",
              "NZD",
              "SEK",
              "SGD",
              "USD"
            ]
          },
          "billing_emails": {
            "type": "array",
            "description": "[DEPRECATED] Billing emails",
            "maxItems": 10,
            "items": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                }
              },
              "required": ["email"]
            }
          },
          "billing_extra_text": {
            "type": "string",
            "description": "[DEPRECATED] Extra text to be included in all project invoices",
            "maxLength": 1000
          },
          "billing_group_id": {
            "type": "string",
            "description": "Billing group ID",
            "minLength": 36,
            "maxLength": 36
          },
          "card_id": {
            "type": "string",
            "description": "[DEPRECATED] Credit card ID",
            "maxLength": 64
          },
          "city": {
            "type": "string",
            "description": "[DEPRECATED] Address city",
            "maxLength": 512
          },
          "cloud": {
            "type": "string",
            "description": "Target cloud",
            "maxLength": 256
          },
          "company": {
            "type": "string",
            "description": "Name of a company",
            "maxLength": 128
          },
          "copy_from_project": {
            "type": "string",
            "description": "Project name from which to copy settings to the new project",
            "maxLength": 63
          },
          "copy_tags": {
            "type": "boolean",
            "description": "Copy tags from the source project. If request contains additional tags, the tags copied from source are updated with them."
          },
          "country_code": {
            "type": "string",
            "description": "[DEPRECATED] Two letter country code for billing country",
            "maxLength": 2
          },
          "project": {
            "type": "string",
            "description": "Project name",
            "maxLength": 63
          },
          "state": {
            "type": "string",
            "description": "[DEPRECATED] Address state",
            "maxLength": 128
          },
          "tags": {
            "type": "object",
            "description": "Set of resource tags",
            "properties": {}
          },
          "tech_emails": {
            "type": "array",
            "description": "List of project tech email addresses",
            "maxItems": 10,
            "items": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                }
              },
              "required": ["email"]
            }
          },
          "use_source_project_billing_group": {
            "type": "boolean",
            "description": "Use the same billing group that is used in source project."
          },
          "vat_id": {
            "type": "string",
            "description": "[DEPRECATED] EU VAT identification",
            "maxLength": 64
          },
          "zip_code": {
            "type": "string",
            "description": "[DEPRECATED] Address zip code",
            "maxLength": 32
          }
        },
        "required": ["project"]
      },
      "ProjectCreateResponse": {
        "type": "object",
        "description": "ProjectCreateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "project": {
            "type": "object",
            "description": "Project information",
            "properties": {
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "account_name": {
                "type": "string",
                "description": "Account name",
                "maxLength": 128
              },
              "address_lines": {
                "type": "array",
                "description": "Address lines",
                "maxItems": 16,
                "items": { "type": "string" }
              },
              "available_credits": {
                "type": "string",
                "description": "Available credits, in USD"
              },
              "billing_address": {
                "type": "string",
                "description": "DEPRECATED: use split address fields like company, address_lines, zip_code, city and state instead",
                "maxLength": 1000
              },
              "billing_currency": {
                "type": "string",
                "description": "Billing currency",
                "enum": [
                  "AUD",
                  "CAD",
                  "CHF",
                  "DKK",
                  "EUR",
                  "GBP",
                  "JPY",
                  "NOK",
                  "NZD",
                  "SEK",
                  "SGD",
                  "USD"
                ]
              },
              "billing_emails": {
                "type": "array",
                "description": "List of project billing email addresses",
                "maxItems": 10,
                "items": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": ["email"]
                }
              },
              "billing_extra_text": {
                "type": "string",
                "description": "Extra text to be included in all project invoices, e.g. purchase order or cost center number",
                "maxLength": 1000
              },
              "billing_group_id": {
                "type": "string",
                "description": "Billing group ID",
                "minLength": 36,
                "maxLength": 36
              },
              "billing_group_name": {
                "type": "string",
                "description": "Billing group name",
                "maxLength": 128
              },
              "card_info": {
                "type": "object",
                "description": "Credit card assigned to the project",
                "properties": {
                  "brand": { "type": "string", "description": "Brand" },
                  "card_id": {
                    "type": "string",
                    "description": "Credit card ID",
                    "maxLength": 64
                  },
                  "country": {
                    "type": "string",
                    "description": "Country",
                    "maxLength": 128
                  },
                  "country_code": {
                    "type": "string",
                    "description": "Two letter ISO country code",
                    "maxLength": 2
                  },
                  "exp_month": {
                    "type": "integer",
                    "description": "Expiration month",
                    "minimum": 1,
                    "maximum": 12
                  },
                  "exp_year": {
                    "type": "integer",
                    "description": "Expiration year",
                    "minimum": 2015,
                    "maximum": 2100
                  },
                  "last4": {
                    "type": "string",
                    "description": "Credit card last four digits"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name on the credit card",
                    "maxLength": 256
                  },
                  "user_email": {
                    "type": "string",
                    "description": "User email address",
                    "maxLength": 319
                  }
                },
                "required": [
                  "brand",
                  "card_id",
                  "country",
                  "country_code",
                  "exp_month",
                  "exp_year",
                  "last4",
                  "name",
                  "user_email"
                ]
              },
              "city": {
                "type": "string",
                "description": "Address city",
                "maxLength": 512
              },
              "company": {
                "type": "string",
                "description": "Name of a company",
                "maxLength": 128
              },
              "country": {
                "type": "string",
                "description": "Billing country",
                "maxLength": 128
              },
              "country_code": {
                "type": "string",
                "description": "Two letter ISO country code",
                "maxLength": 2
              },
              "default_cloud": {
                "type": "string",
                "description": "Default cloud to use when launching services",
                "maxLength": 256
              },
              "end_of_life_extension": {
                "type": "object",
                "description": "End of life extension information",
                "properties": {
                  "elasticsearch": {
                    "type": "object",
                    "description": "Service EOL extension",
                    "properties": {
                      "eol_date": {
                        "type": "string",
                        "description": "Extended EOL date"
                      },
                      "version": {
                        "type": "string",
                        "description": "Service version"
                      }
                    },
                    "required": ["eol_date", "version"]
                  }
                }
              },
              "estimated_balance": {
                "type": "string",
                "description": "Estimated balance, in USD"
              },
              "estimated_balance_local": {
                "type": "string",
                "description": "Estimated balance, in billing currency"
              },
              "features": {
                "type": "object",
                "description": "Feature flags",
                "properties": {}
              },
              "organization_id": {
                "type": "string",
                "description": "Organization ID",
                "maxLength": 36
              },
              "payment_method": {
                "type": "string",
                "description": "Payment method"
              },
              "project_name": {
                "type": "string",
                "description": "Project name",
                "maxLength": 63
              },
              "state": {
                "type": "string",
                "description": "Address state or province",
                "maxLength": 128
              },
              "tags": {
                "type": "object",
                "description": "Set of resource tags",
                "properties": {}
              },
              "tech_emails": {
                "type": "array",
                "description": "List of project tech email addresses",
                "maxItems": 10,
                "items": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": ["email"]
                }
              },
              "tenant_id": { "type": "string", "description": "Tenant ID" },
              "trial_expiration_time": {
                "type": "string",
                "description": "Trial expiration time (ISO 8601)",
                "maxLength": 36
              },
              "vat_id": {
                "type": "string",
                "description": "EU VAT Identification Number",
                "maxLength": 64
              },
              "zip_code": {
                "type": "string",
                "description": "Address zip code",
                "maxLength": 32
              }
            },
            "required": [
              "account_id",
              "billing_address",
              "billing_emails",
              "billing_group_id",
              "billing_group_name",
              "country",
              "country_code",
              "default_cloud",
              "estimated_balance",
              "organization_id",
              "payment_method",
              "project_name",
              "vat_id"
            ]
          }
        },
        "required": ["project"]
      },
      "ProjectDeleteResponse": {
        "type": "object",
        "description": "ProjectDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ProjectGenerateSbomDownloadUrlResponse": {
        "type": "object",
        "description": "ProjectGenerateSbomDownloadUrlResponse",
        "properties": {
          "download_url": {
            "type": "string",
            "description": "Relative signed URL for report download",
            "maxLength": 2048
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["download_url"]
      },
      "ProjectGetResponse": {
        "type": "object",
        "description": "ProjectGetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "project": {
            "type": "object",
            "description": "Project information",
            "properties": {
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "account_name": {
                "type": "string",
                "description": "Account name",
                "maxLength": 128
              },
              "address_lines": {
                "type": "array",
                "description": "Address lines",
                "maxItems": 16,
                "items": { "type": "string" }
              },
              "available_credits": {
                "type": "string",
                "description": "Available credits, in USD"
              },
              "billing_address": {
                "type": "string",
                "description": "DEPRECATED: use split address fields like company, address_lines, zip_code, city and state instead",
                "maxLength": 1000
              },
              "billing_currency": {
                "type": "string",
                "description": "Billing currency",
                "enum": [
                  "AUD",
                  "CAD",
                  "CHF",
                  "DKK",
                  "EUR",
                  "GBP",
                  "JPY",
                  "NOK",
                  "NZD",
                  "SEK",
                  "SGD",
                  "USD"
                ]
              },
              "billing_emails": {
                "type": "array",
                "description": "List of project billing email addresses",
                "maxItems": 10,
                "items": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": ["email"]
                }
              },
              "billing_extra_text": {
                "type": "string",
                "description": "Extra text to be included in all project invoices, e.g. purchase order or cost center number",
                "maxLength": 1000
              },
              "billing_group_id": {
                "type": "string",
                "description": "Billing group ID",
                "minLength": 36,
                "maxLength": 36
              },
              "billing_group_name": {
                "type": "string",
                "description": "Billing group name",
                "maxLength": 128
              },
              "card_info": {
                "type": "object",
                "description": "Credit card assigned to the project",
                "properties": {
                  "brand": { "type": "string", "description": "Brand" },
                  "card_id": {
                    "type": "string",
                    "description": "Credit card ID",
                    "maxLength": 64
                  },
                  "country": {
                    "type": "string",
                    "description": "Country",
                    "maxLength": 128
                  },
                  "country_code": {
                    "type": "string",
                    "description": "Two letter ISO country code",
                    "maxLength": 2
                  },
                  "exp_month": {
                    "type": "integer",
                    "description": "Expiration month",
                    "minimum": 1,
                    "maximum": 12
                  },
                  "exp_year": {
                    "type": "integer",
                    "description": "Expiration year",
                    "minimum": 2015,
                    "maximum": 2100
                  },
                  "last4": {
                    "type": "string",
                    "description": "Credit card last four digits"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name on the credit card",
                    "maxLength": 256
                  },
                  "user_email": {
                    "type": "string",
                    "description": "User email address",
                    "maxLength": 319
                  }
                },
                "required": [
                  "brand",
                  "card_id",
                  "country",
                  "country_code",
                  "exp_month",
                  "exp_year",
                  "last4",
                  "name",
                  "user_email"
                ]
              },
              "city": {
                "type": "string",
                "description": "Address city",
                "maxLength": 512
              },
              "company": {
                "type": "string",
                "description": "Name of a company",
                "maxLength": 128
              },
              "country": {
                "type": "string",
                "description": "Billing country",
                "maxLength": 128
              },
              "country_code": {
                "type": "string",
                "description": "Two letter ISO country code",
                "maxLength": 2
              },
              "default_cloud": {
                "type": "string",
                "description": "Default cloud to use when launching services",
                "maxLength": 256
              },
              "end_of_life_extension": {
                "type": "object",
                "description": "End of life extension information",
                "properties": {
                  "elasticsearch": {
                    "type": "object",
                    "description": "Service EOL extension",
                    "properties": {
                      "eol_date": {
                        "type": "string",
                        "description": "Extended EOL date"
                      },
                      "version": {
                        "type": "string",
                        "description": "Service version"
                      }
                    },
                    "required": ["eol_date", "version"]
                  }
                }
              },
              "estimated_balance": {
                "type": "string",
                "description": "Estimated balance, in USD"
              },
              "estimated_balance_local": {
                "type": "string",
                "description": "Estimated balance, in billing currency"
              },
              "features": {
                "type": "object",
                "description": "Feature flags",
                "properties": {}
              },
              "organization_id": {
                "type": "string",
                "description": "Organization ID",
                "maxLength": 36
              },
              "payment_method": {
                "type": "string",
                "description": "Payment method"
              },
              "project_name": {
                "type": "string",
                "description": "Project name",
                "maxLength": 63
              },
              "state": {
                "type": "string",
                "description": "Address state or province",
                "maxLength": 128
              },
              "tags": {
                "type": "object",
                "description": "Set of resource tags",
                "properties": {}
              },
              "tech_emails": {
                "type": "array",
                "description": "List of project tech email addresses",
                "maxItems": 10,
                "items": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": ["email"]
                }
              },
              "tenant_id": { "type": "string", "description": "Tenant ID" },
              "trial_expiration_time": {
                "type": "string",
                "description": "Trial expiration time (ISO 8601)",
                "maxLength": 36
              },
              "vat_id": {
                "type": "string",
                "description": "EU VAT Identification Number",
                "maxLength": 64
              },
              "zip_code": {
                "type": "string",
                "description": "Address zip code",
                "maxLength": 32
              }
            },
            "required": [
              "account_id",
              "billing_address",
              "billing_emails",
              "billing_group_id",
              "billing_group_name",
              "country",
              "country_code",
              "default_cloud",
              "estimated_balance",
              "organization_id",
              "payment_method",
              "project_name",
              "vat_id"
            ]
          }
        },
        "required": ["project"]
      },
      "ProjectGetEventLogsResponse": {
        "type": "object",
        "description": "ProjectGetEventLogsResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "events": {
            "type": "array",
            "description": "List of project event log entries",
            "items": {
              "type": "object",
              "properties": {
                "actor": {
                  "type": "string",
                  "description": "Initiator of the event"
                },
                "event_desc": {
                  "type": "string",
                  "description": "Event description"
                },
                "event_type": {
                  "type": "string",
                  "description": "Event type identifier"
                },
                "id": {
                  "type": "string",
                  "description": "Event identifier (unique across all projects)",
                  "maxLength": 40
                },
                "service_name": {
                  "type": "string",
                  "description": "Service name",
                  "minLength": 1,
                  "maxLength": 64
                },
                "time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                }
              },
              "required": [
                "actor",
                "event_desc",
                "event_type",
                "id",
                "service_name",
                "time"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["events"]
      },
      "ProjectInviteRequestBody": {
        "type": "object",
        "description": "ProjectInviteRequestBody",
        "properties": {
          "member_type": {
            "type": "string",
            "description": "Project member type",
            "enum": [
              "admin",
              "developer",
              "operator",
              "organization:app_users:write",
              "organization:audit_logs:read",
              "organization:domains:write",
              "organization:groups:write",
              "organization:idps:write",
              "organization:networking:read",
              "organization:networking:write",
              "organization:projects:write",
              "organization:users:write",
              "project:audit_logs:read",
              "project:integrations:read",
              "project:integrations:write",
              "project:networking:read",
              "project:networking:write",
              "project:permissions:read",
              "project:services:read",
              "project:services:write",
              "read_only",
              "role:organization:admin",
              "role:services:maintenance",
              "role:services:recover",
              "service:configuration:write",
              "service:data:write",
              "service:logs:read",
              "service:secrets:read",
              "service:users:write"
            ]
          },
          "user_email": {
            "type": "string",
            "description": "User email address",
            "maxLength": 319
          }
        },
        "required": ["user_email"]
      },
      "ProjectInviteResponse": {
        "type": "object",
        "description": "ProjectInviteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ProjectInviteAcceptResponse": {
        "type": "object",
        "description": "ProjectInviteAcceptResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "invite_details": {
            "type": "object",
            "description": "Details of verified invite",
            "properties": {
              "user_email": {
                "type": "string",
                "description": "User email address",
                "maxLength": 319
              }
            },
            "required": ["user_email"]
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["invite_details"]
      },
      "ProjectInviteDeleteResponse": {
        "type": "object",
        "description": "ProjectInviteDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ProjectListResponse": {
        "type": "object",
        "description": "ProjectListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "project_membership": {
            "type": "object",
            "description": "Project membership and type of membership",
            "properties": {
              "ANY": {
                "type": "string",
                "description": "Project member type",
                "enum": [
                  "admin",
                  "developer",
                  "operator",
                  "organization:app_users:write",
                  "organization:audit_logs:read",
                  "organization:domains:write",
                  "organization:groups:write",
                  "organization:idps:write",
                  "organization:networking:read",
                  "organization:networking:write",
                  "organization:projects:write",
                  "organization:users:write",
                  "project:audit_logs:read",
                  "project:integrations:read",
                  "project:integrations:write",
                  "project:networking:read",
                  "project:networking:write",
                  "project:permissions:read",
                  "project:services:read",
                  "project:services:write",
                  "read_only",
                  "role:organization:admin",
                  "role:services:maintenance",
                  "role:services:recover",
                  "service:configuration:write",
                  "service:data:write",
                  "service:logs:read",
                  "service:secrets:read",
                  "service:users:write"
                ]
              }
            }
          },
          "project_memberships": {
            "type": "object",
            "description": "List of project membership and type of membership",
            "properties": {
              "ANY": {
                "type": "array",
                "description": "List of project member type",
                "items": { "type": "string" }
              }
            }
          },
          "projects": {
            "type": "array",
            "description": "List of projects",
            "items": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "account_name": {
                  "type": "string",
                  "description": "Account name",
                  "maxLength": 128
                },
                "address_lines": {
                  "type": "array",
                  "description": "Address lines",
                  "maxItems": 16,
                  "items": { "type": "string" }
                },
                "available_credits": {
                  "type": "string",
                  "description": "Available credits, in USD"
                },
                "billing_address": {
                  "type": "string",
                  "description": "DEPRECATED: use split address fields like company, address_lines, zip_code, city and state instead",
                  "maxLength": 1000
                },
                "billing_currency": {
                  "type": "string",
                  "description": "Billing currency",
                  "enum": [
                    "AUD",
                    "CAD",
                    "CHF",
                    "DKK",
                    "EUR",
                    "GBP",
                    "JPY",
                    "NOK",
                    "NZD",
                    "SEK",
                    "SGD",
                    "USD"
                  ]
                },
                "billing_emails": {
                  "type": "array",
                  "description": "List of project billing email addresses",
                  "maxItems": 10,
                  "items": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "description": "User email address",
                        "maxLength": 319
                      }
                    },
                    "required": ["email"]
                  }
                },
                "billing_extra_text": {
                  "type": "string",
                  "description": "Extra text to be included in all project invoices, e.g. purchase order or cost center number",
                  "maxLength": 1000
                },
                "billing_group_id": {
                  "type": "string",
                  "description": "Billing group ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "billing_group_name": {
                  "type": "string",
                  "description": "Billing group name",
                  "maxLength": 128
                },
                "card_info": {
                  "type": "object",
                  "description": "Credit card assigned to the project",
                  "properties": {
                    "brand": { "type": "string", "description": "Brand" },
                    "card_id": {
                      "type": "string",
                      "description": "Credit card ID",
                      "maxLength": 64
                    },
                    "country": {
                      "type": "string",
                      "description": "Country",
                      "maxLength": 128
                    },
                    "country_code": {
                      "type": "string",
                      "description": "Two letter ISO country code",
                      "maxLength": 2
                    },
                    "exp_month": {
                      "type": "integer",
                      "description": "Expiration month",
                      "minimum": 1,
                      "maximum": 12
                    },
                    "exp_year": {
                      "type": "integer",
                      "description": "Expiration year",
                      "minimum": 2015,
                      "maximum": 2100
                    },
                    "last4": {
                      "type": "string",
                      "description": "Credit card last four digits"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name on the credit card",
                      "maxLength": 256
                    },
                    "user_email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": [
                    "brand",
                    "card_id",
                    "country",
                    "country_code",
                    "exp_month",
                    "exp_year",
                    "last4",
                    "name",
                    "user_email"
                  ]
                },
                "city": {
                  "type": "string",
                  "description": "Address city",
                  "maxLength": 512
                },
                "company": {
                  "type": "string",
                  "description": "Name of a company",
                  "maxLength": 128
                },
                "country": {
                  "type": "string",
                  "description": "Billing country",
                  "maxLength": 128
                },
                "country_code": {
                  "type": "string",
                  "description": "Two letter ISO country code",
                  "maxLength": 2
                },
                "default_cloud": {
                  "type": "string",
                  "description": "Default cloud to use when launching services",
                  "maxLength": 256
                },
                "end_of_life_extension": {
                  "type": "object",
                  "description": "End of life extension information",
                  "properties": {
                    "elasticsearch": {
                      "type": "object",
                      "description": "Service EOL extension",
                      "properties": {
                        "eol_date": {
                          "type": "string",
                          "description": "Extended EOL date"
                        },
                        "version": {
                          "type": "string",
                          "description": "Service version"
                        }
                      },
                      "required": ["eol_date", "version"]
                    }
                  }
                },
                "estimated_balance": {
                  "type": "string",
                  "description": "Estimated balance, in USD"
                },
                "estimated_balance_local": {
                  "type": "string",
                  "description": "Estimated balance, in billing currency"
                },
                "features": {
                  "type": "object",
                  "description": "Feature flags",
                  "properties": {}
                },
                "organization_id": {
                  "type": "string",
                  "description": "Organization ID",
                  "maxLength": 36
                },
                "payment_method": {
                  "type": "string",
                  "description": "Payment method"
                },
                "project_name": {
                  "type": "string",
                  "description": "Project name",
                  "maxLength": 63
                },
                "state": {
                  "type": "string",
                  "description": "Address state or province",
                  "maxLength": 128
                },
                "tags": {
                  "type": "object",
                  "description": "Set of resource tags",
                  "properties": {}
                },
                "tech_emails": {
                  "type": "array",
                  "description": "List of project tech email addresses",
                  "maxItems": 10,
                  "items": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "description": "User email address",
                        "maxLength": 319
                      }
                    },
                    "required": ["email"]
                  }
                },
                "tenant_id": { "type": "string", "description": "Tenant ID" },
                "trial_expiration_time": {
                  "type": "string",
                  "description": "Trial expiration time (ISO 8601)",
                  "maxLength": 36
                },
                "vat_id": {
                  "type": "string",
                  "description": "EU VAT Identification Number",
                  "maxLength": 64
                },
                "zip_code": {
                  "type": "string",
                  "description": "Address zip code",
                  "maxLength": 32
                }
              },
              "required": [
                "account_id",
                "billing_address",
                "billing_emails",
                "billing_group_id",
                "billing_group_name",
                "country",
                "country_code",
                "default_cloud",
                "estimated_balance",
                "organization_id",
                "payment_method",
                "project_name",
                "vat_id"
              ]
            }
          }
        },
        "required": ["project_membership", "project_memberships", "projects"]
      },
      "ProjectPrivatelinkAvailabilityListResponse": {
        "type": "object",
        "description": "ProjectPrivatelinkAvailabilityListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "privatelink_availability": {
            "type": "array",
            "description": "Privatelink pricing information for supported clouds",
            "items": {
              "type": "object",
              "properties": {
                "cloud_name": {
                  "type": "string",
                  "description": "Target cloud",
                  "maxLength": 256
                },
                "price_usd": {
                  "type": "string",
                  "description": "Hourly privatelink price in this cloud region"
                }
              },
              "required": ["cloud_name", "price_usd"]
            }
          }
        },
        "required": ["privatelink_availability"]
      },
      "ProjectServicePlanListResponse": {
        "type": "object",
        "description": "ProjectServicePlanListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service_plans": {
            "type": "array",
            "description": "List of plans available for this type of service",
            "items": {
              "type": "object",
              "properties": {
                "backup_config": {
                  "type": "object",
                  "description": "Backup configuration for this service plan",
                  "properties": {
                    "frequent_interval_minutes": {
                      "type": "integer",
                      "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                      "minimum": 0
                    },
                    "frequent_oldest_age_minutes": {
                      "type": "integer",
                      "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                      "minimum": 0
                    },
                    "infrequent_interval_minutes": {
                      "type": "integer",
                      "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                      "minimum": 0
                    },
                    "infrequent_oldest_age_minutes": {
                      "type": "integer",
                      "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                      "minimum": 0
                    },
                    "interval": {
                      "type": "integer",
                      "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                      "minimum": 0
                    },
                    "max_count": {
                      "type": "integer",
                      "description": "Maximum number of backups to keep. Zero when no backups are created.",
                      "minimum": 0
                    },
                    "recovery_mode": {
                      "type": "string",
                      "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                      "enum": ["basic", "pitr"]
                    }
                  },
                  "required": ["interval", "max_count", "recovery_mode"]
                },
                "max_memory_percent": {
                  "type": "integer",
                  "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                  "minimum": 0,
                  "maximum": 100
                },
                "node_count": {
                  "type": "integer",
                  "description": "Number of nodes in this service plan",
                  "minimum": 1
                },
                "regions": {
                  "type": "object",
                  "description": "Service plan hourly price per cloud region",
                  "properties": {}
                },
                "service_plan": {
                  "type": "string",
                  "description": "Subscription plan",
                  "maxLength": 128
                },
                "service_type": {
                  "type": "string",
                  "description": "Service type code",
                  "maxLength": 64
                },
                "shard_count": {
                  "type": "integer",
                  "description": "Number of shards in this service plan",
                  "minimum": 1
                }
              },
              "required": ["backup_config", "service_plan", "service_type"]
            }
          }
        },
        "required": ["service_plans"]
      },
      "ProjectServicePlanPriceGetResponse": {
        "type": "object",
        "description": "ProjectServicePlanPriceGetResponse",
        "properties": {
          "base_price_usd": {
            "type": "string",
            "description": "Hourly service price in this region"
          },
          "cloud_name": {
            "type": "string",
            "description": "Target cloud",
            "maxLength": 256
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "extra_disk_price_per_gb_usd": {
            "type": "string",
            "description": "Hourly additional disk space price per GiB in this region"
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "object_storage_gb_price_usd": {
            "type": "string",
            "description": "Hourly additional disk space price per GiB in this region"
          },
          "service_plan": {
            "type": "string",
            "description": "Subscription plan",
            "maxLength": 128
          },
          "service_type": {
            "type": "string",
            "description": "Service type code",
            "maxLength": 64
          }
        },
        "required": [
          "base_price_usd",
          "cloud_name",
          "service_plan",
          "service_type"
        ]
      },
      "ProjectServicePlanSpecsGetResponse": {
        "type": "object",
        "description": "ProjectServicePlanSpecsGetResponse",
        "properties": {
          "backup_config": {
            "type": "object",
            "description": "Backup configuration for this service plan",
            "properties": {
              "frequent_interval_minutes": {
                "type": "integer",
                "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                "minimum": 0
              },
              "frequent_oldest_age_minutes": {
                "type": "integer",
                "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                "minimum": 0
              },
              "infrequent_interval_minutes": {
                "type": "integer",
                "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                "minimum": 0
              },
              "infrequent_oldest_age_minutes": {
                "type": "integer",
                "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                "minimum": 0
              },
              "interval": {
                "type": "integer",
                "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                "minimum": 0
              },
              "max_count": {
                "type": "integer",
                "description": "Maximum number of backups to keep. Zero when no backups are created.",
                "minimum": 0
              },
              "recovery_mode": {
                "type": "string",
                "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                "enum": ["basic", "pitr"]
              }
            },
            "required": ["interval", "max_count", "recovery_mode"]
          },
          "disk_space_cap_mb": {
            "type": "integer",
            "description": "Maximum amount of disk space possible for the plan in the given region",
            "minimum": 0
          },
          "disk_space_mb": {
            "type": "integer",
            "description": "Combined amount of service disk space of all service nodes in megabytes",
            "minimum": 0
          },
          "disk_space_step_mb": {
            "type": "integer",
            "description": "Disk space change step size",
            "minimum": 10240
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "max_memory_percent": {
            "type": "integer",
            "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
            "minimum": 0,
            "maximum": 100
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "node_count": {
            "type": "integer",
            "description": "Number of nodes in this service plan",
            "minimum": 1
          },
          "service_plan": {
            "type": "string",
            "description": "Subscription plan",
            "maxLength": 128
          },
          "service_type": {
            "type": "string",
            "description": "Service type code",
            "maxLength": 64
          },
          "shard_count": {
            "type": "integer",
            "description": "Number of shards in this service plan",
            "minimum": 1
          }
        },
        "required": [
          "backup_config",
          "disk_space_mb",
          "node_count",
          "service_plan",
          "service_type"
        ]
      },
      "ProjectServiceTypesGetResponse": {
        "type": "object",
        "description": "ProjectServiceTypesGetResponse",
        "properties": {
          "default_version": {
            "type": "string",
            "description": "Default version of the service if no explicit version is defined"
          },
          "description": {
            "type": "string",
            "description": "Single line description of the service"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "latest_available_version": {
            "type": "string",
            "description": "Latest available version of the service"
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "user_config_schema": {
            "type": "object",
            "description": "JSON-Schema for the 'user_config' properties",
            "properties": {}
          }
        },
        "required": ["description", "user_config_schema"]
      },
      "ProjectServiceTypesListResponse": {
        "type": "object",
        "description": "ProjectServiceTypesListResponse",
        "properties": {
          "alloydbomni": {
            "type": "object",
            "description": "Service type information",
            "properties": {
              "default_version": {
                "type": "string",
                "description": "Default version of the service if no explicit version is defined"
              },
              "description": {
                "type": "string",
                "description": "Single line description of the service"
              },
              "latest_available_version": {
                "type": "string",
                "description": "Latest available version of the service"
              },
              "user_config_schema": {
                "type": "object",
                "description": "JSON-Schema for the 'user_config' properties",
                "properties": {}
              }
            },
            "required": ["description", "user_config_schema"]
          },
          "cassandra": {
            "type": "object",
            "description": "Service type information",
            "properties": {
              "default_version": {
                "type": "string",
                "description": "Default version of the service if no explicit version is defined"
              },
              "description": {
                "type": "string",
                "description": "Single line description of the service"
              },
              "latest_available_version": {
                "type": "string",
                "description": "Latest available version of the service"
              },
              "user_config_schema": {
                "type": "object",
                "description": "JSON-Schema for the 'user_config' properties",
                "properties": {}
              }
            },
            "required": ["description", "user_config_schema"]
          },
          "clickhouse": {
            "type": "object",
            "description": "Service type information",
            "properties": {
              "default_version": {
                "type": "string",
                "description": "Default version of the service if no explicit version is defined"
              },
              "description": {
                "type": "string",
                "description": "Single line description of the service"
              },
              "latest_available_version": {
                "type": "string",
                "description": "Latest available version of the service"
              },
              "user_config_schema": {
                "type": "object",
                "description": "JSON-Schema for the 'user_config' properties",
                "properties": {}
              }
            },
            "required": ["description", "user_config_schema"]
          },
          "dragonfly": {
            "type": "object",
            "description": "Service type information",
            "properties": {
              "default_version": {
                "type": "string",
                "description": "Default version of the service if no explicit version is defined"
              },
              "description": {
                "type": "string",
                "description": "Single line description of the service"
              },
              "latest_available_version": {
                "type": "string",
                "description": "Latest available version of the service"
              },
              "user_config_schema": {
                "type": "object",
                "description": "JSON-Schema for the 'user_config' properties",
                "properties": {}
              }
            },
            "required": ["description", "user_config_schema"]
          },
          "elasticsearch": {
            "type": "object",
            "description": "Service type information",
            "properties": {
              "default_version": {
                "type": "string",
                "description": "Default version of the service if no explicit version is defined"
              },
              "description": {
                "type": "string",
                "description": "Single line description of the service"
              },
              "latest_available_version": {
                "type": "string",
                "description": "Latest available version of the service"
              },
              "user_config_schema": {
                "type": "object",
                "description": "JSON-Schema for the 'user_config' properties",
                "properties": {}
              }
            },
            "required": ["description", "user_config_schema"]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "flink": {
            "type": "object",
            "description": "Service type information",
            "properties": {
              "default_version": {
                "type": "string",
                "description": "Default version of the service if no explicit version is defined"
              },
              "description": {
                "type": "string",
                "description": "Single line description of the service"
              },
              "latest_available_version": {
                "type": "string",
                "description": "Latest available version of the service"
              },
              "user_config_schema": {
                "type": "object",
                "description": "JSON-Schema for the 'user_config' properties",
                "properties": {}
              }
            },
            "required": ["description", "user_config_schema"]
          },
          "grafana": {
            "type": "object",
            "description": "Service type information",
            "properties": {
              "default_version": {
                "type": "string",
                "description": "Default version of the service if no explicit version is defined"
              },
              "description": {
                "type": "string",
                "description": "Single line description of the service"
              },
              "latest_available_version": {
                "type": "string",
                "description": "Latest available version of the service"
              },
              "user_config_schema": {
                "type": "object",
                "description": "JSON-Schema for the 'user_config' properties",
                "properties": {}
              }
            },
            "required": ["description", "user_config_schema"]
          },
          "influxdb": {
            "type": "object",
            "description": "Service type information",
            "properties": {
              "default_version": {
                "type": "string",
                "description": "Default version of the service if no explicit version is defined"
              },
              "description": {
                "type": "string",
                "description": "Single line description of the service"
              },
              "latest_available_version": {
                "type": "string",
                "description": "Latest available version of the service"
              },
              "user_config_schema": {
                "type": "object",
                "description": "JSON-Schema for the 'user_config' properties",
                "properties": {}
              }
            },
            "required": ["description", "user_config_schema"]
          },
          "kafka": {
            "type": "object",
            "description": "Service type information",
            "properties": {
              "default_version": {
                "type": "string",
                "description": "Default version of the service if no explicit version is defined"
              },
              "description": {
                "type": "string",
                "description": "Single line description of the service"
              },
              "latest_available_version": {
                "type": "string",
                "description": "Latest available version of the service"
              },
              "user_config_schema": {
                "type": "object",
                "description": "JSON-Schema for the 'user_config' properties",
                "properties": {}
              }
            },
            "required": ["description", "user_config_schema"]
          },
          "kafka_connect": {
            "type": "object",
            "description": "Service type information",
            "properties": {
              "default_version": {
                "type": "string",
                "description": "Default version of the service if no explicit version is defined"
              },
              "description": {
                "type": "string",
                "description": "Single line description of the service"
              },
              "latest_available_version": {
                "type": "string",
                "description": "Latest available version of the service"
              },
              "user_config_schema": {
                "type": "object",
                "description": "JSON-Schema for the 'user_config' properties",
                "properties": {}
              }
            },
            "required": ["description", "user_config_schema"]
          },
          "kafka_mirrormaker": {
            "type": "object",
            "description": "Service type information",
            "properties": {
              "default_version": {
                "type": "string",
                "description": "Default version of the service if no explicit version is defined"
              },
              "description": {
                "type": "string",
                "description": "Single line description of the service"
              },
              "latest_available_version": {
                "type": "string",
                "description": "Latest available version of the service"
              },
              "user_config_schema": {
                "type": "object",
                "description": "JSON-Schema for the 'user_config' properties",
                "properties": {}
              }
            },
            "required": ["description", "user_config_schema"]
          },
          "m3aggregator": {
            "type": "object",
            "description": "Service type information",
            "properties": {
              "default_version": {
                "type": "string",
                "description": "Default version of the service if no explicit version is defined"
              },
              "description": {
                "type": "string",
                "description": "Single line description of the service"
              },
              "latest_available_version": {
                "type": "string",
                "description": "Latest available version of the service"
              },
              "user_config_schema": {
                "type": "object",
                "description": "JSON-Schema for the 'user_config' properties",
                "properties": {}
              }
            },
            "required": ["description", "user_config_schema"]
          },
          "m3db": {
            "type": "object",
            "description": "Service type information",
            "properties": {
              "default_version": {
                "type": "string",
                "description": "Default version of the service if no explicit version is defined"
              },
              "description": {
                "type": "string",
                "description": "Single line description of the service"
              },
              "latest_available_version": {
                "type": "string",
                "description": "Latest available version of the service"
              },
              "user_config_schema": {
                "type": "object",
                "description": "JSON-Schema for the 'user_config' properties",
                "properties": {}
              }
            },
            "required": ["description", "user_config_schema"]
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "mysql": {
            "type": "object",
            "description": "Service type information",
            "properties": {
              "default_version": {
                "type": "string",
                "description": "Default version of the service if no explicit version is defined"
              },
              "description": {
                "type": "string",
                "description": "Single line description of the service"
              },
              "latest_available_version": {
                "type": "string",
                "description": "Latest available version of the service"
              },
              "user_config_schema": {
                "type": "object",
                "description": "JSON-Schema for the 'user_config' properties",
                "properties": {}
              }
            },
            "required": ["description", "user_config_schema"]
          },
          "opensearch": {
            "type": "object",
            "description": "Service type information",
            "properties": {
              "default_version": {
                "type": "string",
                "description": "Default version of the service if no explicit version is defined"
              },
              "description": {
                "type": "string",
                "description": "Single line description of the service"
              },
              "latest_available_version": {
                "type": "string",
                "description": "Latest available version of the service"
              },
              "user_config_schema": {
                "type": "object",
                "description": "JSON-Schema for the 'user_config' properties",
                "properties": {}
              }
            },
            "required": ["description", "user_config_schema"]
          },
          "pg": {
            "type": "object",
            "description": "Service type information",
            "properties": {
              "default_version": {
                "type": "string",
                "description": "Default version of the service if no explicit version is defined"
              },
              "description": {
                "type": "string",
                "description": "Single line description of the service"
              },
              "latest_available_version": {
                "type": "string",
                "description": "Latest available version of the service"
              },
              "user_config_schema": {
                "type": "object",
                "description": "JSON-Schema for the 'user_config' properties",
                "properties": {}
              }
            },
            "required": ["description", "user_config_schema"]
          },
          "redis": {
            "type": "object",
            "description": "Service type information",
            "properties": {
              "default_version": {
                "type": "string",
                "description": "Default version of the service if no explicit version is defined"
              },
              "description": {
                "type": "string",
                "description": "Single line description of the service"
              },
              "latest_available_version": {
                "type": "string",
                "description": "Latest available version of the service"
              },
              "user_config_schema": {
                "type": "object",
                "description": "JSON-Schema for the 'user_config' properties",
                "properties": {}
              }
            },
            "required": ["description", "user_config_schema"]
          },
          "thanos": {
            "type": "object",
            "description": "Service type information",
            "properties": {
              "default_version": {
                "type": "string",
                "description": "Default version of the service if no explicit version is defined"
              },
              "description": {
                "type": "string",
                "description": "Single line description of the service"
              },
              "latest_available_version": {
                "type": "string",
                "description": "Latest available version of the service"
              },
              "user_config_schema": {
                "type": "object",
                "description": "JSON-Schema for the 'user_config' properties",
                "properties": {}
              }
            },
            "required": ["description", "user_config_schema"]
          },
          "valkey": {
            "type": "object",
            "description": "Service type information",
            "properties": {
              "default_version": {
                "type": "string",
                "description": "Default version of the service if no explicit version is defined"
              },
              "description": {
                "type": "string",
                "description": "Single line description of the service"
              },
              "latest_available_version": {
                "type": "string",
                "description": "Latest available version of the service"
              },
              "user_config_schema": {
                "type": "object",
                "description": "JSON-Schema for the 'user_config' properties",
                "properties": {}
              }
            },
            "required": ["description", "user_config_schema"]
          }
        }
      },
      "ProjectTagsListResponse": {
        "type": "object",
        "description": "ProjectTagsListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "tags": {
            "type": "object",
            "description": "Set of resource tags",
            "properties": {}
          }
        }
      },
      "ProjectTagsReplaceRequestBody": {
        "type": "object",
        "description": "ProjectTagsReplaceRequestBody",
        "properties": {
          "tags": {
            "type": "object",
            "description": "Set of resource tags",
            "properties": {}
          }
        },
        "required": ["tags"]
      },
      "ProjectTagsReplaceResponse": {
        "type": "object",
        "description": "ProjectTagsReplaceResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ProjectTagsUpdateRequestBody": {
        "type": "object",
        "description": "ProjectTagsUpdateRequestBody",
        "properties": {
          "tags": {
            "type": "object",
            "description": "Set of resource tags",
            "properties": {}
          }
        },
        "required": ["tags"]
      },
      "ProjectTagsUpdateResponse": {
        "type": "object",
        "description": "ProjectTagsUpdateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ProjectUpdateRequestBody": {
        "type": "object",
        "description": "ProjectUpdateRequestBody",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "Account ID",
            "maxLength": 36
          },
          "add_account_owners_admin_access": {
            "type": "boolean",
            "description": "[DEPRECATED] If account_id is set, grant account owner team admin access to this project. This flag is ignored and assumed true."
          },
          "address_lines": {
            "type": "array",
            "description": "[DEPRECATED] Address lines",
            "maxItems": 16,
            "items": { "type": "string" }
          },
          "billing_address": {
            "type": "string",
            "description": "DEPRECATED: use split address fields like company, address_lines, zip_code, city and state instead",
            "maxLength": 1000
          },
          "billing_currency": {
            "type": "string",
            "description": "[DEPRECATED] Billing currency",
            "enum": [
              "AUD",
              "CAD",
              "CHF",
              "DKK",
              "EUR",
              "GBP",
              "JPY",
              "NOK",
              "NZD",
              "SEK",
              "SGD",
              "USD"
            ]
          },
          "billing_emails": {
            "type": "array",
            "description": "[DEPRECATED] List of project billing email addresses",
            "maxItems": 10,
            "items": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                }
              },
              "required": ["email"]
            }
          },
          "billing_extra_text": {
            "type": "string",
            "description": "[DEPRECATED] Extra text to be included in all project invoices, e.g. purchase order or cost center number",
            "maxLength": 1000
          },
          "billing_group_id": {
            "type": "string",
            "description": "Billing group ID",
            "minLength": 36,
            "maxLength": 36
          },
          "card_id": {
            "type": "string",
            "description": "[DEPRECATED] Credit card ID",
            "maxLength": 64
          },
          "city": {
            "type": "string",
            "description": "[DEPRECATED] Address city",
            "maxLength": 512
          },
          "cloud": {
            "type": "string",
            "description": "Target cloud",
            "maxLength": 256
          },
          "company": {
            "type": "string",
            "description": "Name of a company",
            "maxLength": 128
          },
          "country_code": {
            "type": "string",
            "description": "[DEPRECATED] Two letter country code for billing country",
            "maxLength": 2
          },
          "project_name": {
            "type": "string",
            "description": "Project name",
            "maxLength": 63
          },
          "state": {
            "type": "string",
            "description": "[DEPRECATED] Address state",
            "maxLength": 128
          },
          "tags": {
            "type": "object",
            "description": "Set of resource tags",
            "properties": {}
          },
          "tech_emails": {
            "type": "array",
            "description": "List of project tech email addresses",
            "maxItems": 10,
            "items": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                }
              },
              "required": ["email"]
            }
          },
          "vat_id": {
            "type": "string",
            "description": "[DEPRECATED] EU VAT Identification Number",
            "maxLength": 64
          },
          "zip_code": {
            "type": "string",
            "description": "[DEPRECATED] Address zip code",
            "maxLength": 32
          }
        }
      },
      "ProjectUpdateResponse": {
        "type": "object",
        "description": "ProjectUpdateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "project": {
            "type": "object",
            "description": "Project information",
            "properties": {
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "account_name": {
                "type": "string",
                "description": "Account name",
                "maxLength": 128
              },
              "address_lines": {
                "type": "array",
                "description": "Address lines",
                "maxItems": 16,
                "items": { "type": "string" }
              },
              "available_credits": {
                "type": "string",
                "description": "Available credits, in USD"
              },
              "billing_address": {
                "type": "string",
                "description": "DEPRECATED: use split address fields like company, address_lines, zip_code, city and state instead",
                "maxLength": 1000
              },
              "billing_currency": {
                "type": "string",
                "description": "Billing currency",
                "enum": [
                  "AUD",
                  "CAD",
                  "CHF",
                  "DKK",
                  "EUR",
                  "GBP",
                  "JPY",
                  "NOK",
                  "NZD",
                  "SEK",
                  "SGD",
                  "USD"
                ]
              },
              "billing_emails": {
                "type": "array",
                "description": "List of project billing email addresses",
                "maxItems": 10,
                "items": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": ["email"]
                }
              },
              "billing_extra_text": {
                "type": "string",
                "description": "Extra text to be included in all project invoices, e.g. purchase order or cost center number",
                "maxLength": 1000
              },
              "billing_group_id": {
                "type": "string",
                "description": "Billing group ID",
                "minLength": 36,
                "maxLength": 36
              },
              "billing_group_name": {
                "type": "string",
                "description": "Billing group name",
                "maxLength": 128
              },
              "card_info": {
                "type": "object",
                "description": "Credit card assigned to the project",
                "properties": {
                  "brand": { "type": "string", "description": "Brand" },
                  "card_id": {
                    "type": "string",
                    "description": "Credit card ID",
                    "maxLength": 64
                  },
                  "country": {
                    "type": "string",
                    "description": "Country",
                    "maxLength": 128
                  },
                  "country_code": {
                    "type": "string",
                    "description": "Two letter ISO country code",
                    "maxLength": 2
                  },
                  "exp_month": {
                    "type": "integer",
                    "description": "Expiration month",
                    "minimum": 1,
                    "maximum": 12
                  },
                  "exp_year": {
                    "type": "integer",
                    "description": "Expiration year",
                    "minimum": 2015,
                    "maximum": 2100
                  },
                  "last4": {
                    "type": "string",
                    "description": "Credit card last four digits"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name on the credit card",
                    "maxLength": 256
                  },
                  "user_email": {
                    "type": "string",
                    "description": "User email address",
                    "maxLength": 319
                  }
                },
                "required": [
                  "brand",
                  "card_id",
                  "country",
                  "country_code",
                  "exp_month",
                  "exp_year",
                  "last4",
                  "name",
                  "user_email"
                ]
              },
              "city": {
                "type": "string",
                "description": "Address city",
                "maxLength": 512
              },
              "company": {
                "type": "string",
                "description": "Name of a company",
                "maxLength": 128
              },
              "country": {
                "type": "string",
                "description": "Billing country",
                "maxLength": 128
              },
              "country_code": {
                "type": "string",
                "description": "Two letter ISO country code",
                "maxLength": 2
              },
              "default_cloud": {
                "type": "string",
                "description": "Default cloud to use when launching services",
                "maxLength": 256
              },
              "end_of_life_extension": {
                "type": "object",
                "description": "End of life extension information",
                "properties": {
                  "elasticsearch": {
                    "type": "object",
                    "description": "Service EOL extension",
                    "properties": {
                      "eol_date": {
                        "type": "string",
                        "description": "Extended EOL date"
                      },
                      "version": {
                        "type": "string",
                        "description": "Service version"
                      }
                    },
                    "required": ["eol_date", "version"]
                  }
                }
              },
              "estimated_balance": {
                "type": "string",
                "description": "Estimated balance, in USD"
              },
              "estimated_balance_local": {
                "type": "string",
                "description": "Estimated balance, in billing currency"
              },
              "features": {
                "type": "object",
                "description": "Feature flags",
                "properties": {}
              },
              "organization_id": {
                "type": "string",
                "description": "Organization ID",
                "maxLength": 36
              },
              "payment_method": {
                "type": "string",
                "description": "Payment method"
              },
              "project_name": {
                "type": "string",
                "description": "Project name",
                "maxLength": 63
              },
              "state": {
                "type": "string",
                "description": "Address state or province",
                "maxLength": 128
              },
              "tags": {
                "type": "object",
                "description": "Set of resource tags",
                "properties": {}
              },
              "tech_emails": {
                "type": "array",
                "description": "List of project tech email addresses",
                "maxItems": 10,
                "items": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": ["email"]
                }
              },
              "tenant_id": { "type": "string", "description": "Tenant ID" },
              "trial_expiration_time": {
                "type": "string",
                "description": "Trial expiration time (ISO 8601)",
                "maxLength": 36
              },
              "vat_id": {
                "type": "string",
                "description": "EU VAT Identification Number",
                "maxLength": 64
              },
              "zip_code": {
                "type": "string",
                "description": "Address zip code",
                "maxLength": 32
              }
            },
            "required": [
              "account_id",
              "billing_address",
              "billing_emails",
              "billing_group_id",
              "billing_group_name",
              "country",
              "country_code",
              "default_cloud",
              "estimated_balance",
              "organization_id",
              "payment_method",
              "project_name",
              "vat_id"
            ]
          }
        },
        "required": ["project"]
      },
      "ProjectUserListResponse": {
        "type": "object",
        "description": "ProjectUserListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "group_users": {
            "type": "array",
            "description": "List of users in groups that have access to the project",
            "items": {
              "type": "object",
              "properties": {
                "member_type": {
                  "type": "string",
                  "description": "Project member type",
                  "enum": [
                    "admin",
                    "developer",
                    "operator",
                    "organization:app_users:write",
                    "organization:audit_logs:read",
                    "organization:domains:write",
                    "organization:groups:write",
                    "organization:idps:write",
                    "organization:networking:read",
                    "organization:networking:write",
                    "organization:projects:write",
                    "organization:users:write",
                    "project:audit_logs:read",
                    "project:integrations:read",
                    "project:integrations:write",
                    "project:networking:read",
                    "project:networking:write",
                    "project:permissions:read",
                    "project:services:read",
                    "project:services:write",
                    "read_only",
                    "role:organization:admin",
                    "role:services:maintenance",
                    "role:services:recover",
                    "service:configuration:write",
                    "service:data:write",
                    "service:logs:read",
                    "service:secrets:read",
                    "service:users:write"
                  ]
                },
                "real_name": {
                  "type": "string",
                  "description": "User real name",
                  "maxLength": 256
                },
                "user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                },
                "user_group_id": {
                  "type": "string",
                  "description": "User group ID"
                }
              },
              "required": [
                "member_type",
                "real_name",
                "user_email",
                "user_group_id"
              ]
            }
          },
          "invitations": {
            "type": "array",
            "description": "List of pending invitations",
            "items": {
              "type": "object",
              "properties": {
                "invite_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "invited_user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                },
                "inviting_user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                },
                "member_type": {
                  "type": "string",
                  "description": "Project member type",
                  "enum": [
                    "admin",
                    "developer",
                    "operator",
                    "organization:app_users:write",
                    "organization:audit_logs:read",
                    "organization:domains:write",
                    "organization:groups:write",
                    "organization:idps:write",
                    "organization:networking:read",
                    "organization:networking:write",
                    "organization:projects:write",
                    "organization:users:write",
                    "project:audit_logs:read",
                    "project:integrations:read",
                    "project:integrations:write",
                    "project:networking:read",
                    "project:networking:write",
                    "project:permissions:read",
                    "project:services:read",
                    "project:services:write",
                    "read_only",
                    "role:organization:admin",
                    "role:services:maintenance",
                    "role:services:recover",
                    "service:configuration:write",
                    "service:data:write",
                    "service:logs:read",
                    "service:secrets:read",
                    "service:users:write"
                  ]
                }
              },
              "required": [
                "invite_time",
                "invited_user_email",
                "inviting_user_email",
                "member_type"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "users": {
            "type": "array",
            "description": "List of project's users",
            "items": {
              "type": "object",
              "properties": {
                "auth": {
                  "type": "array",
                  "description": "List of user's required authentication methods",
                  "items": { "type": "string" }
                },
                "billing_contact": {
                  "type": "boolean",
                  "description": "Set for project's billing contacts"
                },
                "create_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "member_type": {
                  "type": "string",
                  "description": "Project member type",
                  "enum": [
                    "admin",
                    "developer",
                    "operator",
                    "organization:app_users:write",
                    "organization:audit_logs:read",
                    "organization:domains:write",
                    "organization:groups:write",
                    "organization:idps:write",
                    "organization:networking:read",
                    "organization:networking:write",
                    "organization:projects:write",
                    "organization:users:write",
                    "project:audit_logs:read",
                    "project:integrations:read",
                    "project:integrations:write",
                    "project:networking:read",
                    "project:networking:write",
                    "project:permissions:read",
                    "project:services:read",
                    "project:services:write",
                    "read_only",
                    "role:organization:admin",
                    "role:services:maintenance",
                    "role:services:recover",
                    "service:configuration:write",
                    "service:data:write",
                    "service:logs:read",
                    "service:secrets:read",
                    "service:users:write"
                  ]
                },
                "real_name": {
                  "type": "string",
                  "description": "User real name",
                  "maxLength": 256
                },
                "team_id": {
                  "type": "string",
                  "description": "Team ID",
                  "maxLength": 32
                },
                "team_name": {
                  "type": "string",
                  "description": "Team name",
                  "maxLength": 128
                },
                "user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                },
                "user_id": { "type": "string", "description": "User ID" }
              },
              "required": [
                "auth",
                "billing_contact",
                "create_time",
                "member_type",
                "team_id",
                "team_name",
                "user_email",
                "user_id"
              ]
            }
          }
        },
        "required": ["group_users", "invitations", "users"]
      },
      "ProjectUserRemoveResponse": {
        "type": "object",
        "description": "ProjectUserRemoveResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ProjectUserUpdateRequestBody": {
        "type": "object",
        "description": "ProjectUserUpdateRequestBody",
        "properties": {
          "member_type": {
            "type": "string",
            "description": "Project member type",
            "enum": [
              "admin",
              "developer",
              "operator",
              "organization:app_users:write",
              "organization:audit_logs:read",
              "organization:domains:write",
              "organization:groups:write",
              "organization:idps:write",
              "organization:networking:read",
              "organization:networking:write",
              "organization:projects:write",
              "organization:users:write",
              "project:audit_logs:read",
              "project:integrations:read",
              "project:integrations:write",
              "project:networking:read",
              "project:networking:write",
              "project:permissions:read",
              "project:services:read",
              "project:services:write",
              "read_only",
              "role:organization:admin",
              "role:services:maintenance",
              "role:services:recover",
              "service:configuration:write",
              "service:data:write",
              "service:logs:read",
              "service:secrets:read",
              "service:users:write"
            ]
          }
        },
        "required": ["member_type"]
      },
      "ProjectUserUpdateResponse": {
        "type": "object",
        "description": "ProjectUserUpdateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "VpcCreateRequestBody": {
        "type": "object",
        "description": "VpcCreateRequestBody",
        "properties": {
          "cloud_name": {
            "type": "string",
            "description": "Target cloud",
            "maxLength": 256
          },
          "network_cidr": {
            "type": "string",
            "description": "IPv4 network range CIDR",
            "maxLength": 18
          },
          "peering_connections": {
            "type": "array",
            "description": "List of peering connection requests for the VPC",
            "maxItems": 128,
            "items": {
              "type": "object",
              "properties": {
                "peer_azure_app_id": {
                  "type": "string",
                  "description": "Azure app registration id in UUID4 form that is allowed to create a peering to the peer vnet",
                  "maxLength": 1024
                },
                "peer_azure_tenant_id": {
                  "type": "string",
                  "description": "Azure tenant id in UUID4 form",
                  "maxLength": 1024
                },
                "peer_cloud_account": {
                  "type": "string",
                  "description": "AWS account ID, GCP project ID, Azure subscription ID of the peered VPC, or string &quot;upcloud&quot; for UpCloud peering connections",
                  "maxLength": 1024
                },
                "peer_region": {
                  "type": "string",
                  "description": "The peer VPC's region on AWS. May be omitted or set to null if the peer is in the same region as the Aiven project VPC. Omit or set to null on GCP, Azure, or UpCloud.",
                  "maxLength": 1024
                },
                "peer_resource_group": {
                  "type": "string",
                  "description": "Azure resource group name of the peered VPC",
                  "maxLength": 1024
                },
                "peer_vpc": {
                  "type": "string",
                  "description": "AWS VPC ID, GCP VPC network name, Azure Virtual network name of the peered VPC, or UpCloud VPC ID",
                  "maxLength": 1024
                },
                "user_peer_network_cidrs": {
                  "type": "array",
                  "description": "List of private IPv4 ranges to route through the peering connection",
                  "maxItems": 128,
                  "items": { "type": "string" }
                }
              },
              "required": ["peer_cloud_account", "peer_vpc"]
            }
          }
        },
        "required": ["cloud_name", "network_cidr", "peering_connections"]
      },
      "VpcCreateResponse": {
        "type": "object",
        "description": "VpcCreateResponse",
        "properties": {
          "cloud_name": {
            "type": "string",
            "description": "Target cloud",
            "maxLength": 256
          },
          "create_time": {
            "type": "string",
            "description": "VPC creation timestamp",
            "maxLength": 36
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "network_cidr": {
            "type": "string",
            "description": "IPv4 network range CIDR",
            "maxLength": 18
          },
          "peering_connections": {
            "type": "array",
            "description": "List of peering connections",
            "items": {
              "type": "object",
              "properties": {
                "create_time": {
                  "type": "string",
                  "description": "VPC peering connection creation timestamp",
                  "maxLength": 36
                },
                "peer_azure_app_id": {
                  "type": "string",
                  "description": "Azure app registration id in UUID4 form that is allowed to create a peering to the peer vnet",
                  "maxLength": 1024
                },
                "peer_azure_tenant_id": {
                  "type": "string",
                  "description": "Azure tenant id in UUID4 form",
                  "maxLength": 1024
                },
                "peer_cloud_account": {
                  "type": "string",
                  "description": "AWS account ID, GCP project ID, Azure subscription ID of the peered VPC, or string &quot;upcloud&quot; for UpCloud peering connections",
                  "maxLength": 1024
                },
                "peer_region": {
                  "type": "string",
                  "description": "The peer VPC's region in AWS clouds. Always null in GCP, Azure, or UpCloud clouds",
                  "maxLength": 1024
                },
                "peer_resource_group": {
                  "type": "string",
                  "description": "Azure resource group name of the peered VPC",
                  "maxLength": 1024
                },
                "peer_vpc": {
                  "type": "string",
                  "description": "AWS VPC ID, GCP VPC network name, Azure Virtual network name of the peered VPC, or UpCloud VPC ID",
                  "maxLength": 1024
                },
                "peering_connection_id": {
                  "type": "string",
                  "description": "VPC peering connection ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "state": {
                  "type": "string",
                  "description": "Project VPC peering connection state",
                  "enum": [
                    "ACTIVE",
                    "APPROVED",
                    "APPROVED_PEER_REQUESTED",
                    "DELETED",
                    "DELETED_BY_PEER",
                    "DELETING",
                    "ERROR",
                    "INVALID_SPECIFICATION",
                    "PENDING_PEER",
                    "REJECTED_BY_PEER"
                  ]
                },
                "state_info": {
                  "type": "object",
                  "description": "State-specific help or error information",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Human-readable information message"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of state information"
                    },
                    "warnings": {
                      "type": "array",
                      "description": "List of warnings if any",
                      "items": {
                        "type": "object",
                        "properties": {
                          "conflicting_aws_account_id": {
                            "type": "string",
                            "description": "AWS account id of conflicting VPC"
                          },
                          "conflicting_aws_vpc_id": {
                            "type": "string",
                            "description": "VPC id which is conflicting with the current one"
                          },
                          "conflicting_aws_vpc_peering_connection_id": {
                            "type": "string",
                            "description": "AWS VPC connection id which is conflicting with current VPC"
                          },
                          "message": {
                            "type": "string",
                            "description": "Warning message to be shown to the user"
                          },
                          "type": {
                            "type": "string",
                            "description": "Type of warning",
                            "enum": [
                              "overlapping-peer-vpc-ip-ranges",
                              "upcloud-peering-in-error"
                            ]
                          }
                        },
                        "required": ["message", "type"]
                      }
                    }
                  },
                  "required": ["message", "type"]
                },
                "update_time": {
                  "type": "string",
                  "description": "Timestamp of last change to the VPC peering connection",
                  "maxLength": 36
                },
                "user_peer_network_cidrs": {
                  "type": "array",
                  "description": "List of private IPv4 ranges to route through the peering connection",
                  "maxItems": 128,
                  "items": { "type": "string" }
                },
                "vpc_peering_connection_type": {
                  "type": "string",
                  "description": "Type of network connection from the VPC",
                  "enum": [
                    "aws-tgw-vpc-attachment",
                    "aws-vpc-peering-connection",
                    "azure-vnet-peering",
                    "google-vpc-peering",
                    "upcloud-vpc-peering"
                  ]
                }
              },
              "required": [
                "create_time",
                "peer_azure_app_id",
                "peer_azure_tenant_id",
                "peer_cloud_account",
                "peer_resource_group",
                "peer_vpc",
                "state",
                "state_info",
                "update_time",
                "user_peer_network_cidrs",
                "vpc_peering_connection_type"
              ]
            }
          },
          "pending_build_only_peering_connections": {
            "type": "string",
            "description": "VPC rebuild is scheduled",
            "maxLength": 36
          },
          "project_vpc_id": {
            "type": "string",
            "description": "Project VPC ID",
            "minLength": 36,
            "maxLength": 36
          },
          "state": {
            "type": "string",
            "description": "Project VPC state",
            "enum": ["ACTIVE", "APPROVED", "DELETED", "DELETING"]
          },
          "update_time": {
            "type": "string",
            "description": "Timestamp of last change to VPC",
            "maxLength": 36
          }
        },
        "required": [
          "cloud_name",
          "create_time",
          "network_cidr",
          "peering_connections",
          "project_vpc_id",
          "state",
          "update_time"
        ]
      },
      "VpcDeleteResponse": {
        "type": "object",
        "description": "VpcDeleteResponse",
        "properties": {
          "cloud_name": {
            "type": "string",
            "description": "Target cloud",
            "maxLength": 256
          },
          "create_time": {
            "type": "string",
            "description": "VPC creation timestamp",
            "maxLength": 36
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "network_cidr": {
            "type": "string",
            "description": "IPv4 network range CIDR",
            "maxLength": 18
          },
          "peering_connections": {
            "type": "array",
            "description": "List of peering connections",
            "items": {
              "type": "object",
              "properties": {
                "create_time": {
                  "type": "string",
                  "description": "VPC peering connection creation timestamp",
                  "maxLength": 36
                },
                "peer_azure_app_id": {
                  "type": "string",
                  "description": "Azure app registration id in UUID4 form that is allowed to create a peering to the peer vnet",
                  "maxLength": 1024
                },
                "peer_azure_tenant_id": {
                  "type": "string",
                  "description": "Azure tenant id in UUID4 form",
                  "maxLength": 1024
                },
                "peer_cloud_account": {
                  "type": "string",
                  "description": "AWS account ID, GCP project ID, Azure subscription ID of the peered VPC, or string &quot;upcloud&quot; for UpCloud peering connections",
                  "maxLength": 1024
                },
                "peer_region": {
                  "type": "string",
                  "description": "The peer VPC's region in AWS clouds. Always null in GCP, Azure, or UpCloud clouds",
                  "maxLength": 1024
                },
                "peer_resource_group": {
                  "type": "string",
                  "description": "Azure resource group name of the peered VPC",
                  "maxLength": 1024
                },
                "peer_vpc": {
                  "type": "string",
                  "description": "AWS VPC ID, GCP VPC network name, Azure Virtual network name of the peered VPC, or UpCloud VPC ID",
                  "maxLength": 1024
                },
                "peering_connection_id": {
                  "type": "string",
                  "description": "VPC peering connection ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "state": {
                  "type": "string",
                  "description": "Project VPC peering connection state",
                  "enum": [
                    "ACTIVE",
                    "APPROVED",
                    "APPROVED_PEER_REQUESTED",
                    "DELETED",
                    "DELETED_BY_PEER",
                    "DELETING",
                    "ERROR",
                    "INVALID_SPECIFICATION",
                    "PENDING_PEER",
                    "REJECTED_BY_PEER"
                  ]
                },
                "state_info": {
                  "type": "object",
                  "description": "State-specific help or error information",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Human-readable information message"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of state information"
                    },
                    "warnings": {
                      "type": "array",
                      "description": "List of warnings if any",
                      "items": {
                        "type": "object",
                        "properties": {
                          "conflicting_aws_account_id": {
                            "type": "string",
                            "description": "AWS account id of conflicting VPC"
                          },
                          "conflicting_aws_vpc_id": {
                            "type": "string",
                            "description": "VPC id which is conflicting with the current one"
                          },
                          "conflicting_aws_vpc_peering_connection_id": {
                            "type": "string",
                            "description": "AWS VPC connection id which is conflicting with current VPC"
                          },
                          "message": {
                            "type": "string",
                            "description": "Warning message to be shown to the user"
                          },
                          "type": {
                            "type": "string",
                            "description": "Type of warning",
                            "enum": [
                              "overlapping-peer-vpc-ip-ranges",
                              "upcloud-peering-in-error"
                            ]
                          }
                        },
                        "required": ["message", "type"]
                      }
                    }
                  },
                  "required": ["message", "type"]
                },
                "update_time": {
                  "type": "string",
                  "description": "Timestamp of last change to the VPC peering connection",
                  "maxLength": 36
                },
                "user_peer_network_cidrs": {
                  "type": "array",
                  "description": "List of private IPv4 ranges to route through the peering connection",
                  "maxItems": 128,
                  "items": { "type": "string" }
                },
                "vpc_peering_connection_type": {
                  "type": "string",
                  "description": "Type of network connection from the VPC",
                  "enum": [
                    "aws-tgw-vpc-attachment",
                    "aws-vpc-peering-connection",
                    "azure-vnet-peering",
                    "google-vpc-peering",
                    "upcloud-vpc-peering"
                  ]
                }
              },
              "required": [
                "create_time",
                "peer_azure_app_id",
                "peer_azure_tenant_id",
                "peer_cloud_account",
                "peer_resource_group",
                "peer_vpc",
                "state",
                "state_info",
                "update_time",
                "user_peer_network_cidrs",
                "vpc_peering_connection_type"
              ]
            }
          },
          "pending_build_only_peering_connections": {
            "type": "string",
            "description": "VPC rebuild is scheduled",
            "maxLength": 36
          },
          "project_vpc_id": {
            "type": "string",
            "description": "Project VPC ID",
            "minLength": 36,
            "maxLength": 36
          },
          "state": {
            "type": "string",
            "description": "Project VPC state",
            "enum": ["ACTIVE", "APPROVED", "DELETED", "DELETING"]
          },
          "update_time": {
            "type": "string",
            "description": "Timestamp of last change to VPC",
            "maxLength": 36
          }
        },
        "required": [
          "cloud_name",
          "create_time",
          "network_cidr",
          "peering_connections",
          "project_vpc_id",
          "state",
          "update_time"
        ]
      },
      "VpcGetResponse": {
        "type": "object",
        "description": "VpcGetResponse",
        "properties": {
          "cloud_name": {
            "type": "string",
            "description": "Target cloud",
            "maxLength": 256
          },
          "create_time": {
            "type": "string",
            "description": "VPC creation timestamp",
            "maxLength": 36
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "network_cidr": {
            "type": "string",
            "description": "IPv4 network range CIDR",
            "maxLength": 18
          },
          "peering_connections": {
            "type": "array",
            "description": "List of peering connections",
            "items": {
              "type": "object",
              "properties": {
                "create_time": {
                  "type": "string",
                  "description": "VPC peering connection creation timestamp",
                  "maxLength": 36
                },
                "peer_azure_app_id": {
                  "type": "string",
                  "description": "Azure app registration id in UUID4 form that is allowed to create a peering to the peer vnet",
                  "maxLength": 1024
                },
                "peer_azure_tenant_id": {
                  "type": "string",
                  "description": "Azure tenant id in UUID4 form",
                  "maxLength": 1024
                },
                "peer_cloud_account": {
                  "type": "string",
                  "description": "AWS account ID, GCP project ID, Azure subscription ID of the peered VPC, or string &quot;upcloud&quot; for UpCloud peering connections",
                  "maxLength": 1024
                },
                "peer_region": {
                  "type": "string",
                  "description": "The peer VPC's region in AWS clouds. Always null in GCP, Azure, or UpCloud clouds",
                  "maxLength": 1024
                },
                "peer_resource_group": {
                  "type": "string",
                  "description": "Azure resource group name of the peered VPC",
                  "maxLength": 1024
                },
                "peer_vpc": {
                  "type": "string",
                  "description": "AWS VPC ID, GCP VPC network name, Azure Virtual network name of the peered VPC, or UpCloud VPC ID",
                  "maxLength": 1024
                },
                "peering_connection_id": {
                  "type": "string",
                  "description": "VPC peering connection ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "state": {
                  "type": "string",
                  "description": "Project VPC peering connection state",
                  "enum": [
                    "ACTIVE",
                    "APPROVED",
                    "APPROVED_PEER_REQUESTED",
                    "DELETED",
                    "DELETED_BY_PEER",
                    "DELETING",
                    "ERROR",
                    "INVALID_SPECIFICATION",
                    "PENDING_PEER",
                    "REJECTED_BY_PEER"
                  ]
                },
                "state_info": {
                  "type": "object",
                  "description": "State-specific help or error information",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Human-readable information message"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of state information"
                    },
                    "warnings": {
                      "type": "array",
                      "description": "List of warnings if any",
                      "items": {
                        "type": "object",
                        "properties": {
                          "conflicting_aws_account_id": {
                            "type": "string",
                            "description": "AWS account id of conflicting VPC"
                          },
                          "conflicting_aws_vpc_id": {
                            "type": "string",
                            "description": "VPC id which is conflicting with the current one"
                          },
                          "conflicting_aws_vpc_peering_connection_id": {
                            "type": "string",
                            "description": "AWS VPC connection id which is conflicting with current VPC"
                          },
                          "message": {
                            "type": "string",
                            "description": "Warning message to be shown to the user"
                          },
                          "type": {
                            "type": "string",
                            "description": "Type of warning",
                            "enum": [
                              "overlapping-peer-vpc-ip-ranges",
                              "upcloud-peering-in-error"
                            ]
                          }
                        },
                        "required": ["message", "type"]
                      }
                    }
                  },
                  "required": ["message", "type"]
                },
                "update_time": {
                  "type": "string",
                  "description": "Timestamp of last change to the VPC peering connection",
                  "maxLength": 36
                },
                "user_peer_network_cidrs": {
                  "type": "array",
                  "description": "List of private IPv4 ranges to route through the peering connection",
                  "maxItems": 128,
                  "items": { "type": "string" }
                },
                "vpc_peering_connection_type": {
                  "type": "string",
                  "description": "Type of network connection from the VPC",
                  "enum": [
                    "aws-tgw-vpc-attachment",
                    "aws-vpc-peering-connection",
                    "azure-vnet-peering",
                    "google-vpc-peering",
                    "upcloud-vpc-peering"
                  ]
                }
              },
              "required": [
                "create_time",
                "peer_azure_app_id",
                "peer_azure_tenant_id",
                "peer_cloud_account",
                "peer_resource_group",
                "peer_vpc",
                "state",
                "state_info",
                "update_time",
                "user_peer_network_cidrs",
                "vpc_peering_connection_type"
              ]
            }
          },
          "pending_build_only_peering_connections": {
            "type": "string",
            "description": "VPC rebuild is scheduled",
            "maxLength": 36
          },
          "project_vpc_id": {
            "type": "string",
            "description": "Project VPC ID",
            "minLength": 36,
            "maxLength": 36
          },
          "state": {
            "type": "string",
            "description": "Project VPC state",
            "enum": ["ACTIVE", "APPROVED", "DELETED", "DELETING"]
          },
          "update_time": {
            "type": "string",
            "description": "Timestamp of last change to VPC",
            "maxLength": 36
          }
        },
        "required": [
          "cloud_name",
          "create_time",
          "network_cidr",
          "peering_connections",
          "project_vpc_id",
          "state",
          "update_time"
        ]
      },
      "VpcListResponse": {
        "type": "object",
        "description": "VpcListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "vpcs": {
            "type": "array",
            "description": "List of VPCs",
            "items": {
              "type": "object",
              "properties": {
                "cloud_name": {
                  "type": "string",
                  "description": "Target cloud",
                  "maxLength": 256
                },
                "create_time": {
                  "type": "string",
                  "description": "VPC creation timestamp",
                  "maxLength": 36
                },
                "network_cidr": {
                  "type": "string",
                  "description": "IPv4 network range CIDR",
                  "maxLength": 18
                },
                "project_vpc_id": {
                  "type": "string",
                  "description": "Project VPC ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "state": {
                  "type": "string",
                  "description": "Project VPC state",
                  "enum": ["ACTIVE", "APPROVED", "DELETED", "DELETING"]
                },
                "update_time": {
                  "type": "string",
                  "description": "Timestamp of last change to VPC",
                  "maxLength": 36
                }
              },
              "required": [
                "cloud_name",
                "create_time",
                "network_cidr",
                "project_vpc_id",
                "state",
                "update_time"
              ]
            }
          }
        },
        "required": ["vpcs"]
      },
      "VpcPeeringConnectionCreateRequestBody": {
        "type": "object",
        "description": "VpcPeeringConnectionCreateRequestBody",
        "properties": {
          "peer_azure_app_id": {
            "type": "string",
            "description": "Azure app registration id in UUID4 form that is allowed to create a peering to the peer vnet",
            "maxLength": 1024
          },
          "peer_azure_tenant_id": {
            "type": "string",
            "description": "Azure tenant id in UUID4 form",
            "maxLength": 1024
          },
          "peer_cloud_account": {
            "type": "string",
            "description": "AWS account ID, GCP project ID, Azure subscription ID of the peered VPC, or string &quot;upcloud&quot; for UpCloud peering connections",
            "maxLength": 1024
          },
          "peer_region": {
            "type": "string",
            "description": "The peer VPC's region on AWS. May be omitted or set to null if the peer is in the same region as the Aiven project VPC. Omit or set to null on GCP, Azure, or UpCloud.",
            "maxLength": 1024
          },
          "peer_resource_group": {
            "type": "string",
            "description": "Azure resource group name of the peered VPC",
            "maxLength": 1024
          },
          "peer_vpc": {
            "type": "string",
            "description": "AWS VPC ID, GCP VPC network name, Azure Virtual network name of the peered VPC, or UpCloud VPC ID",
            "maxLength": 1024
          },
          "user_peer_network_cidrs": {
            "type": "array",
            "description": "List of private IPv4 ranges to route through the peering connection",
            "maxItems": 128,
            "items": { "type": "string" }
          }
        },
        "required": ["peer_cloud_account", "peer_vpc"]
      },
      "VpcPeeringConnectionCreateResponse": {
        "type": "object",
        "description": "VpcPeeringConnectionCreateResponse",
        "properties": {
          "create_time": {
            "type": "string",
            "description": "VPC peering connection creation timestamp",
            "maxLength": 36
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "peer_azure_app_id": {
            "type": "string",
            "description": "Azure app registration id in UUID4 form that is allowed to create a peering to the peer vnet",
            "maxLength": 1024
          },
          "peer_azure_tenant_id": {
            "type": "string",
            "description": "Azure tenant id in UUID4 form",
            "maxLength": 1024
          },
          "peer_cloud_account": {
            "type": "string",
            "description": "AWS account ID, GCP project ID, Azure subscription ID of the peered VPC, or string &quot;upcloud&quot; for UpCloud peering connections",
            "maxLength": 1024
          },
          "peer_region": {
            "type": "string",
            "description": "The peer VPC's region in AWS clouds. Always null in GCP, Azure, or UpCloud clouds",
            "maxLength": 1024
          },
          "peer_resource_group": {
            "type": "string",
            "description": "Azure resource group name of the peered VPC",
            "maxLength": 1024
          },
          "peer_vpc": {
            "type": "string",
            "description": "AWS VPC ID, GCP VPC network name, Azure Virtual network name of the peered VPC, or UpCloud VPC ID",
            "maxLength": 1024
          },
          "peering_connection_id": {
            "type": "string",
            "description": "VPC peering connection ID",
            "minLength": 36,
            "maxLength": 36
          },
          "state": {
            "type": "string",
            "description": "Project VPC peering connection state",
            "enum": [
              "ACTIVE",
              "APPROVED",
              "APPROVED_PEER_REQUESTED",
              "DELETED",
              "DELETED_BY_PEER",
              "DELETING",
              "ERROR",
              "INVALID_SPECIFICATION",
              "PENDING_PEER",
              "REJECTED_BY_PEER"
            ]
          },
          "state_info": {
            "type": "object",
            "description": "State-specific help or error information",
            "properties": {
              "message": {
                "type": "string",
                "description": "Human-readable information message"
              },
              "type": {
                "type": "string",
                "description": "Type of state information"
              },
              "warnings": {
                "type": "array",
                "description": "List of warnings if any",
                "items": {
                  "type": "object",
                  "properties": {
                    "conflicting_aws_account_id": {
                      "type": "string",
                      "description": "AWS account id of conflicting VPC"
                    },
                    "conflicting_aws_vpc_id": {
                      "type": "string",
                      "description": "VPC id which is conflicting with the current one"
                    },
                    "conflicting_aws_vpc_peering_connection_id": {
                      "type": "string",
                      "description": "AWS VPC connection id which is conflicting with current VPC"
                    },
                    "message": {
                      "type": "string",
                      "description": "Warning message to be shown to the user"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of warning",
                      "enum": [
                        "overlapping-peer-vpc-ip-ranges",
                        "upcloud-peering-in-error"
                      ]
                    }
                  },
                  "required": ["message", "type"]
                }
              }
            },
            "required": ["message", "type"]
          },
          "update_time": {
            "type": "string",
            "description": "Timestamp of last change to the VPC peering connection",
            "maxLength": 36
          },
          "user_peer_network_cidrs": {
            "type": "array",
            "description": "List of private IPv4 ranges to route through the peering connection",
            "maxItems": 128,
            "items": { "type": "string" }
          },
          "vpc_peering_connection_type": {
            "type": "string",
            "description": "Type of network connection from the VPC",
            "enum": [
              "aws-tgw-vpc-attachment",
              "aws-vpc-peering-connection",
              "azure-vnet-peering",
              "google-vpc-peering",
              "upcloud-vpc-peering"
            ]
          }
        },
        "required": [
          "create_time",
          "peer_azure_app_id",
          "peer_azure_tenant_id",
          "peer_cloud_account",
          "peer_resource_group",
          "peer_vpc",
          "state",
          "state_info",
          "update_time",
          "user_peer_network_cidrs",
          "vpc_peering_connection_type"
        ]
      },
      "VpcPeeringConnectionDeleteResponse": {
        "type": "object",
        "description": "VpcPeeringConnectionDeleteResponse",
        "properties": {
          "create_time": {
            "type": "string",
            "description": "VPC peering connection creation timestamp",
            "maxLength": 36
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "peer_azure_app_id": {
            "type": "string",
            "description": "Azure app registration id in UUID4 form that is allowed to create a peering to the peer vnet",
            "maxLength": 1024
          },
          "peer_azure_tenant_id": {
            "type": "string",
            "description": "Azure tenant id in UUID4 form",
            "maxLength": 1024
          },
          "peer_cloud_account": {
            "type": "string",
            "description": "AWS account ID, GCP project ID, Azure subscription ID of the peered VPC, or string &quot;upcloud&quot; for UpCloud peering connections",
            "maxLength": 1024
          },
          "peer_region": {
            "type": "string",
            "description": "The peer VPC's region in AWS clouds. Always null in GCP, Azure, or UpCloud clouds",
            "maxLength": 1024
          },
          "peer_resource_group": {
            "type": "string",
            "description": "Azure resource group name of the peered VPC",
            "maxLength": 1024
          },
          "peer_vpc": {
            "type": "string",
            "description": "AWS VPC ID, GCP VPC network name, Azure Virtual network name of the peered VPC, or UpCloud VPC ID",
            "maxLength": 1024
          },
          "peering_connection_id": {
            "type": "string",
            "description": "VPC peering connection ID",
            "minLength": 36,
            "maxLength": 36
          },
          "state": {
            "type": "string",
            "description": "Project VPC peering connection state",
            "enum": [
              "ACTIVE",
              "APPROVED",
              "APPROVED_PEER_REQUESTED",
              "DELETED",
              "DELETED_BY_PEER",
              "DELETING",
              "ERROR",
              "INVALID_SPECIFICATION",
              "PENDING_PEER",
              "REJECTED_BY_PEER"
            ]
          },
          "state_info": {
            "type": "object",
            "description": "State-specific help or error information",
            "properties": {
              "message": {
                "type": "string",
                "description": "Human-readable information message"
              },
              "type": {
                "type": "string",
                "description": "Type of state information"
              },
              "warnings": {
                "type": "array",
                "description": "List of warnings if any",
                "items": {
                  "type": "object",
                  "properties": {
                    "conflicting_aws_account_id": {
                      "type": "string",
                      "description": "AWS account id of conflicting VPC"
                    },
                    "conflicting_aws_vpc_id": {
                      "type": "string",
                      "description": "VPC id which is conflicting with the current one"
                    },
                    "conflicting_aws_vpc_peering_connection_id": {
                      "type": "string",
                      "description": "AWS VPC connection id which is conflicting with current VPC"
                    },
                    "message": {
                      "type": "string",
                      "description": "Warning message to be shown to the user"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of warning",
                      "enum": [
                        "overlapping-peer-vpc-ip-ranges",
                        "upcloud-peering-in-error"
                      ]
                    }
                  },
                  "required": ["message", "type"]
                }
              }
            },
            "required": ["message", "type"]
          },
          "update_time": {
            "type": "string",
            "description": "Timestamp of last change to the VPC peering connection",
            "maxLength": 36
          },
          "user_peer_network_cidrs": {
            "type": "array",
            "description": "List of private IPv4 ranges to route through the peering connection",
            "maxItems": 128,
            "items": { "type": "string" }
          },
          "vpc_peering_connection_type": {
            "type": "string",
            "description": "Type of network connection from the VPC",
            "enum": [
              "aws-tgw-vpc-attachment",
              "aws-vpc-peering-connection",
              "azure-vnet-peering",
              "google-vpc-peering",
              "upcloud-vpc-peering"
            ]
          }
        },
        "required": [
          "create_time",
          "peer_azure_app_id",
          "peer_azure_tenant_id",
          "peer_cloud_account",
          "peer_resource_group",
          "peer_vpc",
          "state",
          "state_info",
          "update_time",
          "user_peer_network_cidrs",
          "vpc_peering_connection_type"
        ]
      },
      "VpcPeeringConnectionUpdateRequestBody": {
        "type": "object",
        "description": "VpcPeeringConnectionUpdateRequestBody",
        "properties": {
          "add": {
            "type": "array",
            "description": "CIDRs to add using a specific peering connection",
            "maxItems": 128,
            "items": {
              "type": "object",
              "properties": {
                "cidr": {
                  "type": "string",
                  "description": "IPv4 network range CIDR",
                  "maxLength": 18
                },
                "peer_cloud_account": {
                  "type": "string",
                  "description": "AWS account ID, GCP project ID, Azure subscription ID of the peered VPC, or string &quot;upcloud&quot; for UpCloud peering connections",
                  "maxLength": 1024
                },
                "peer_resource_group": {
                  "type": "string",
                  "description": "Azure resource group name of the peered VPC",
                  "maxLength": 1024
                },
                "peer_vpc": {
                  "type": "string",
                  "description": "AWS VPC ID, GCP VPC network name, Azure Virtual network name of the peered VPC, or UpCloud VPC ID",
                  "maxLength": 1024
                }
              },
              "required": ["cidr", "peer_cloud_account", "peer_vpc"]
            }
          },
          "delete": {
            "type": "array",
            "description": "Network CIDRs to remove from the VPC's peering connections' user_peer_network_cidrs",
            "maxItems": 128,
            "items": { "type": "string" }
          }
        }
      },
      "VpcPeeringConnectionUpdateResponse": {
        "type": "object",
        "description": "VpcPeeringConnectionUpdateResponse",
        "properties": {
          "cloud_name": {
            "type": "string",
            "description": "Target cloud",
            "maxLength": 256
          },
          "create_time": {
            "type": "string",
            "description": "VPC creation timestamp",
            "maxLength": 36
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "network_cidr": {
            "type": "string",
            "description": "IPv4 network range CIDR",
            "maxLength": 18
          },
          "peering_connections": {
            "type": "array",
            "description": "List of peering connections",
            "items": {
              "type": "object",
              "properties": {
                "create_time": {
                  "type": "string",
                  "description": "VPC peering connection creation timestamp",
                  "maxLength": 36
                },
                "peer_azure_app_id": {
                  "type": "string",
                  "description": "Azure app registration id in UUID4 form that is allowed to create a peering to the peer vnet",
                  "maxLength": 1024
                },
                "peer_azure_tenant_id": {
                  "type": "string",
                  "description": "Azure tenant id in UUID4 form",
                  "maxLength": 1024
                },
                "peer_cloud_account": {
                  "type": "string",
                  "description": "AWS account ID, GCP project ID, Azure subscription ID of the peered VPC, or string &quot;upcloud&quot; for UpCloud peering connections",
                  "maxLength": 1024
                },
                "peer_region": {
                  "type": "string",
                  "description": "The peer VPC's region in AWS clouds. Always null in GCP, Azure, or UpCloud clouds",
                  "maxLength": 1024
                },
                "peer_resource_group": {
                  "type": "string",
                  "description": "Azure resource group name of the peered VPC",
                  "maxLength": 1024
                },
                "peer_vpc": {
                  "type": "string",
                  "description": "AWS VPC ID, GCP VPC network name, Azure Virtual network name of the peered VPC, or UpCloud VPC ID",
                  "maxLength": 1024
                },
                "peering_connection_id": {
                  "type": "string",
                  "description": "VPC peering connection ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "state": {
                  "type": "string",
                  "description": "Project VPC peering connection state",
                  "enum": [
                    "ACTIVE",
                    "APPROVED",
                    "APPROVED_PEER_REQUESTED",
                    "DELETED",
                    "DELETED_BY_PEER",
                    "DELETING",
                    "ERROR",
                    "INVALID_SPECIFICATION",
                    "PENDING_PEER",
                    "REJECTED_BY_PEER"
                  ]
                },
                "state_info": {
                  "type": "object",
                  "description": "State-specific help or error information",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Human-readable information message"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of state information"
                    },
                    "warnings": {
                      "type": "array",
                      "description": "List of warnings if any",
                      "items": {
                        "type": "object",
                        "properties": {
                          "conflicting_aws_account_id": {
                            "type": "string",
                            "description": "AWS account id of conflicting VPC"
                          },
                          "conflicting_aws_vpc_id": {
                            "type": "string",
                            "description": "VPC id which is conflicting with the current one"
                          },
                          "conflicting_aws_vpc_peering_connection_id": {
                            "type": "string",
                            "description": "AWS VPC connection id which is conflicting with current VPC"
                          },
                          "message": {
                            "type": "string",
                            "description": "Warning message to be shown to the user"
                          },
                          "type": {
                            "type": "string",
                            "description": "Type of warning",
                            "enum": [
                              "overlapping-peer-vpc-ip-ranges",
                              "upcloud-peering-in-error"
                            ]
                          }
                        },
                        "required": ["message", "type"]
                      }
                    }
                  },
                  "required": ["message", "type"]
                },
                "update_time": {
                  "type": "string",
                  "description": "Timestamp of last change to the VPC peering connection",
                  "maxLength": 36
                },
                "user_peer_network_cidrs": {
                  "type": "array",
                  "description": "List of private IPv4 ranges to route through the peering connection",
                  "maxItems": 128,
                  "items": { "type": "string" }
                },
                "vpc_peering_connection_type": {
                  "type": "string",
                  "description": "Type of network connection from the VPC",
                  "enum": [
                    "aws-tgw-vpc-attachment",
                    "aws-vpc-peering-connection",
                    "azure-vnet-peering",
                    "google-vpc-peering",
                    "upcloud-vpc-peering"
                  ]
                }
              },
              "required": [
                "create_time",
                "peer_azure_app_id",
                "peer_azure_tenant_id",
                "peer_cloud_account",
                "peer_resource_group",
                "peer_vpc",
                "state",
                "state_info",
                "update_time",
                "user_peer_network_cidrs",
                "vpc_peering_connection_type"
              ]
            }
          },
          "pending_build_only_peering_connections": {
            "type": "string",
            "description": "VPC rebuild is scheduled",
            "maxLength": 36
          },
          "project_vpc_id": {
            "type": "string",
            "description": "Project VPC ID",
            "minLength": 36,
            "maxLength": 36
          },
          "state": {
            "type": "string",
            "description": "Project VPC state",
            "enum": ["ACTIVE", "APPROVED", "DELETED", "DELETING"]
          },
          "update_time": {
            "type": "string",
            "description": "Timestamp of last change to VPC",
            "maxLength": 36
          }
        },
        "required": [
          "cloud_name",
          "create_time",
          "network_cidr",
          "peering_connections",
          "project_vpc_id",
          "state",
          "update_time"
        ]
      },
      "VpcPeeringConnectionWithRegionDeleteResponse": {
        "type": "object",
        "description": "VpcPeeringConnectionWithRegionDeleteResponse",
        "properties": {
          "create_time": {
            "type": "string",
            "description": "VPC peering connection creation timestamp",
            "maxLength": 36
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "peer_azure_app_id": {
            "type": "string",
            "description": "Azure app registration id in UUID4 form that is allowed to create a peering to the peer vnet",
            "maxLength": 1024
          },
          "peer_azure_tenant_id": {
            "type": "string",
            "description": "Azure tenant id in UUID4 form",
            "maxLength": 1024
          },
          "peer_cloud_account": {
            "type": "string",
            "description": "AWS account ID, GCP project ID, Azure subscription ID of the peered VPC, or string &quot;upcloud&quot; for UpCloud peering connections",
            "maxLength": 1024
          },
          "peer_region": {
            "type": "string",
            "description": "The peer VPC's region in AWS clouds. Always null in GCP, Azure, or UpCloud clouds",
            "maxLength": 1024
          },
          "peer_resource_group": {
            "type": "string",
            "description": "Azure resource group name of the peered VPC",
            "maxLength": 1024
          },
          "peer_vpc": {
            "type": "string",
            "description": "AWS VPC ID, GCP VPC network name, Azure Virtual network name of the peered VPC, or UpCloud VPC ID",
            "maxLength": 1024
          },
          "peering_connection_id": {
            "type": "string",
            "description": "VPC peering connection ID",
            "minLength": 36,
            "maxLength": 36
          },
          "state": {
            "type": "string",
            "description": "Project VPC peering connection state",
            "enum": [
              "ACTIVE",
              "APPROVED",
              "APPROVED_PEER_REQUESTED",
              "DELETED",
              "DELETED_BY_PEER",
              "DELETING",
              "ERROR",
              "INVALID_SPECIFICATION",
              "PENDING_PEER",
              "REJECTED_BY_PEER"
            ]
          },
          "state_info": {
            "type": "object",
            "description": "State-specific help or error information",
            "properties": {
              "message": {
                "type": "string",
                "description": "Human-readable information message"
              },
              "type": {
                "type": "string",
                "description": "Type of state information"
              },
              "warnings": {
                "type": "array",
                "description": "List of warnings if any",
                "items": {
                  "type": "object",
                  "properties": {
                    "conflicting_aws_account_id": {
                      "type": "string",
                      "description": "AWS account id of conflicting VPC"
                    },
                    "conflicting_aws_vpc_id": {
                      "type": "string",
                      "description": "VPC id which is conflicting with the current one"
                    },
                    "conflicting_aws_vpc_peering_connection_id": {
                      "type": "string",
                      "description": "AWS VPC connection id which is conflicting with current VPC"
                    },
                    "message": {
                      "type": "string",
                      "description": "Warning message to be shown to the user"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of warning",
                      "enum": [
                        "overlapping-peer-vpc-ip-ranges",
                        "upcloud-peering-in-error"
                      ]
                    }
                  },
                  "required": ["message", "type"]
                }
              }
            },
            "required": ["message", "type"]
          },
          "update_time": {
            "type": "string",
            "description": "Timestamp of last change to the VPC peering connection",
            "maxLength": 36
          },
          "user_peer_network_cidrs": {
            "type": "array",
            "description": "List of private IPv4 ranges to route through the peering connection",
            "maxItems": 128,
            "items": { "type": "string" }
          },
          "vpc_peering_connection_type": {
            "type": "string",
            "description": "Type of network connection from the VPC",
            "enum": [
              "aws-tgw-vpc-attachment",
              "aws-vpc-peering-connection",
              "azure-vnet-peering",
              "google-vpc-peering",
              "upcloud-vpc-peering"
            ]
          }
        },
        "required": [
          "create_time",
          "peer_azure_app_id",
          "peer_azure_tenant_id",
          "peer_cloud_account",
          "peer_resource_group",
          "peer_vpc",
          "state",
          "state_info",
          "update_time",
          "user_peer_network_cidrs",
          "vpc_peering_connection_type"
        ]
      },
      "VpcPeeringConnectionWithResourceGroupDeleteResponse": {
        "type": "object",
        "description": "VpcPeeringConnectionWithResourceGroupDeleteResponse",
        "properties": {
          "create_time": {
            "type": "string",
            "description": "VPC peering connection creation timestamp",
            "maxLength": 36
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "peer_azure_app_id": {
            "type": "string",
            "description": "Azure app registration id in UUID4 form that is allowed to create a peering to the peer vnet",
            "maxLength": 1024
          },
          "peer_azure_tenant_id": {
            "type": "string",
            "description": "Azure tenant id in UUID4 form",
            "maxLength": 1024
          },
          "peer_cloud_account": {
            "type": "string",
            "description": "AWS account ID, GCP project ID, Azure subscription ID of the peered VPC, or string &quot;upcloud&quot; for UpCloud peering connections",
            "maxLength": 1024
          },
          "peer_region": {
            "type": "string",
            "description": "The peer VPC's region in AWS clouds. Always null in GCP, Azure, or UpCloud clouds",
            "maxLength": 1024
          },
          "peer_resource_group": {
            "type": "string",
            "description": "Azure resource group name of the peered VPC",
            "maxLength": 1024
          },
          "peer_vpc": {
            "type": "string",
            "description": "AWS VPC ID, GCP VPC network name, Azure Virtual network name of the peered VPC, or UpCloud VPC ID",
            "maxLength": 1024
          },
          "peering_connection_id": {
            "type": "string",
            "description": "VPC peering connection ID",
            "minLength": 36,
            "maxLength": 36
          },
          "state": {
            "type": "string",
            "description": "Project VPC peering connection state",
            "enum": [
              "ACTIVE",
              "APPROVED",
              "APPROVED_PEER_REQUESTED",
              "DELETED",
              "DELETED_BY_PEER",
              "DELETING",
              "ERROR",
              "INVALID_SPECIFICATION",
              "PENDING_PEER",
              "REJECTED_BY_PEER"
            ]
          },
          "state_info": {
            "type": "object",
            "description": "State-specific help or error information",
            "properties": {
              "message": {
                "type": "string",
                "description": "Human-readable information message"
              },
              "type": {
                "type": "string",
                "description": "Type of state information"
              },
              "warnings": {
                "type": "array",
                "description": "List of warnings if any",
                "items": {
                  "type": "object",
                  "properties": {
                    "conflicting_aws_account_id": {
                      "type": "string",
                      "description": "AWS account id of conflicting VPC"
                    },
                    "conflicting_aws_vpc_id": {
                      "type": "string",
                      "description": "VPC id which is conflicting with the current one"
                    },
                    "conflicting_aws_vpc_peering_connection_id": {
                      "type": "string",
                      "description": "AWS VPC connection id which is conflicting with current VPC"
                    },
                    "message": {
                      "type": "string",
                      "description": "Warning message to be shown to the user"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of warning",
                      "enum": [
                        "overlapping-peer-vpc-ip-ranges",
                        "upcloud-peering-in-error"
                      ]
                    }
                  },
                  "required": ["message", "type"]
                }
              }
            },
            "required": ["message", "type"]
          },
          "update_time": {
            "type": "string",
            "description": "Timestamp of last change to the VPC peering connection",
            "maxLength": 36
          },
          "user_peer_network_cidrs": {
            "type": "array",
            "description": "List of private IPv4 ranges to route through the peering connection",
            "maxItems": 128,
            "items": { "type": "string" }
          },
          "vpc_peering_connection_type": {
            "type": "string",
            "description": "Type of network connection from the VPC",
            "enum": [
              "aws-tgw-vpc-attachment",
              "aws-vpc-peering-connection",
              "azure-vnet-peering",
              "google-vpc-peering",
              "upcloud-vpc-peering"
            ]
          }
        },
        "required": [
          "create_time",
          "peer_azure_app_id",
          "peer_azure_tenant_id",
          "peer_cloud_account",
          "peer_resource_group",
          "peer_vpc",
          "state",
          "state_info",
          "update_time",
          "user_peer_network_cidrs",
          "vpc_peering_connection_type"
        ]
      },
      "ProjectCreditsClaimRequestBody": {
        "type": "object",
        "description": "ProjectCreditsClaimRequestBody",
        "properties": {
          "code": {
            "type": "string",
            "description": "Credit code",
            "maxLength": 1024
          }
        },
        "required": ["code"]
      },
      "ProjectCreditsClaimResponse": {
        "type": "object",
        "description": "ProjectCreditsClaimResponse",
        "properties": {
          "credit": {
            "type": "object",
            "description": "Assigned credit",
            "properties": {
              "code": {
                "type": "string",
                "description": "Credit code",
                "maxLength": 1024
              },
              "expire_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              },
              "remaining_value": {
                "type": "string",
                "description": "Remaining credit value"
              },
              "start_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              },
              "type": {
                "type": "string",
                "description": "Credit type",
                "enum": [
                  "discount",
                  "employee",
                  "evaluation",
                  "internal",
                  "other",
                  "outage",
                  "partner",
                  "promotion",
                  "purchase",
                  "referral",
                  "sponsorship",
                  "trial",
                  "trial_over"
                ]
              },
              "value": {
                "type": "string",
                "description": "Original credit value, or for expired credits, the consumed credit value"
              }
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["credit"]
      },
      "ProjectCreditsListResponse": {
        "type": "object",
        "description": "ProjectCreditsListResponse",
        "properties": {
          "credits": {
            "type": "array",
            "description": "List of credits assigned to a project",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "Credit code",
                  "maxLength": 1024
                },
                "expire_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "remaining_value": {
                  "type": "string",
                  "description": "Remaining credit value"
                },
                "start_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "type": {
                  "type": "string",
                  "description": "Credit type",
                  "enum": [
                    "discount",
                    "employee",
                    "evaluation",
                    "internal",
                    "other",
                    "outage",
                    "partner",
                    "promotion",
                    "purchase",
                    "referral",
                    "sponsorship",
                    "trial",
                    "trial_over"
                  ]
                },
                "value": {
                  "type": "string",
                  "description": "Original credit value, or for expired credits, the consumed credit value"
                }
              }
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["credits"]
      },
      "ProjectInvoiceListResponse": {
        "type": "object",
        "description": "ProjectInvoiceListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "invoices": {
            "type": "array",
            "description": "List of project invoices",
            "items": {
              "type": "object",
              "properties": {
                "billing_group_id": {
                  "type": "string",
                  "description": "Billing group ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "billing_group_name": {
                  "type": "string",
                  "description": "Billing group name",
                  "maxLength": 128
                },
                "billing_group_state": {
                  "type": "string",
                  "description": "Billing group state",
                  "enum": ["active", "deleted"]
                },
                "currency": {
                  "type": "string",
                  "description": "Billing currency",
                  "enum": [
                    "AUD",
                    "CAD",
                    "CHF",
                    "DKK",
                    "EUR",
                    "GBP",
                    "JPY",
                    "NOK",
                    "NZD",
                    "SEK",
                    "SGD",
                    "USD"
                  ]
                },
                "download_cookie": {
                  "type": "string",
                  "description": "Authentication cookie for downloads"
                },
                "due_date": {
                  "type": "string",
                  "description": "The time when the invoice is due"
                },
                "generated_at": {
                  "type": "string",
                  "description": "The time when the invoice was generated"
                },
                "invoice_number": {
                  "type": "string",
                  "description": "Unique invoice reference code",
                  "maxLength": 128
                },
                "period_begin": {
                  "type": "string",
                  "description": "Period begin",
                  "maxLength": 36
                },
                "period_end": {
                  "type": "string",
                  "description": "Period end",
                  "maxLength": 36
                },
                "state": {
                  "type": "string",
                  "description": "State of this invoice",
                  "enum": [
                    "accrual",
                    "consolidated",
                    "due",
                    "estimate",
                    "failed_credit_card_charge",
                    "failed_no_credit_card",
                    "mailed",
                    "no_payment_expected",
                    "paid",
                    "partner_metering",
                    "uncollectible",
                    "waived",
                    "due_only_project_charges_calculated",
                    "estimate_only_project_charges_calculated"
                  ]
                },
                "total_inc_vat": {
                  "type": "string",
                  "description": "Total including taxes"
                },
                "total_vat_zero": {
                  "type": "string",
                  "description": "Total excluding taxes"
                }
              },
              "required": [
                "billing_group_id",
                "billing_group_name",
                "billing_group_state",
                "currency",
                "download_cookie",
                "invoice_number",
                "period_begin",
                "period_end",
                "state",
                "total_inc_vat",
                "total_vat_zero"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["invoices"]
      },
      "ProjectKmsGetCAResponse": {
        "type": "object",
        "description": "ProjectKmsGetCAResponse",
        "properties": {
          "certificate": {
            "type": "string",
            "description": "PEM encoded certificate"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["certificate"]
      },
      "AlloyDbOmniGoogleCloudPrivateKeyIdentifyResponse": {
        "type": "object",
        "description": "AlloyDbOmniGoogleCloudPrivateKeyIdentifyResponse",
        "properties": {
          "client_email": {
            "type": "string",
            "description": "Email address of Google service account key"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "private_key_id": {
            "type": "string",
            "description": "Google service account key ID"
          }
        },
        "required": ["client_email", "private_key_id"]
      },
      "AlloyDbOmniGoogleCloudPrivateKeyRemoveResponse": {
        "type": "object",
        "description": "AlloyDbOmniGoogleCloudPrivateKeyRemoveResponse",
        "properties": {
          "client_email": {
            "type": "string",
            "description": "Email address of Google service account key"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "private_key_id": {
            "type": "string",
            "description": "Google service account key ID"
          }
        },
        "required": ["client_email", "private_key_id"]
      },
      "AlloyDbOmniGoogleCloudPrivateKeySetRequestBody": {
        "type": "object",
        "description": "AlloyDbOmniGoogleCloudPrivateKeySetRequestBody",
        "properties": {
          "private_key": {
            "type": "string",
            "description": "Google Service Account Credentials",
            "maxLength": 4096
          }
        },
        "required": ["private_key"]
      },
      "AlloyDbOmniGoogleCloudPrivateKeySetResponse": {
        "type": "object",
        "description": "AlloyDbOmniGoogleCloudPrivateKeySetResponse",
        "properties": {
          "client_email": {
            "type": "string",
            "description": "Email address of Google service account key"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "private_key_id": {
            "type": "string",
            "description": "Google service account key ID"
          }
        },
        "required": ["client_email", "private_key_id"]
      },
      "ServiceClickHouseCurrentQueriesResponse": {
        "type": "object",
        "description": "ServiceClickHouseCurrentQueriesResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "queries": {
            "type": "array",
            "description": "List of currently running queries",
            "items": {
              "type": "object",
              "properties": {
                "client_name": {
                  "type": "string",
                  "description": "Client name, if set"
                },
                "database": { "type": "string", "description": "Database" },
                "elapsed": {
                  "type": "number",
                  "description": "The time in seconds since request execution started"
                },
                "query": { "type": "string", "description": "The query text" },
                "user": {
                  "type": "string",
                  "description": "The user who made the query"
                }
              }
            }
          }
        },
        "required": ["queries"]
      },
      "ServiceClickHouseDatabaseCreateRequestBody": {
        "type": "object",
        "description": "ServiceClickHouseDatabaseCreateRequestBody",
        "properties": {
          "database": {
            "type": "string",
            "description": "Service database name",
            "maxLength": 40
          }
        },
        "required": ["database"]
      },
      "ServiceClickHouseDatabaseCreateResponse": {
        "type": "object",
        "description": "ServiceClickHouseDatabaseCreateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceClickHouseDatabaseDeleteResponse": {
        "type": "object",
        "description": "ServiceClickHouseDatabaseDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceClickHouseDatabaseListResponse": {
        "type": "object",
        "description": "ServiceClickHouseDatabaseListResponse",
        "properties": {
          "databases": {
            "type": "array",
            "description": "List of databases",
            "items": {
              "type": "object",
              "properties": {
                "engine": {
                  "type": "string",
                  "description": "Database engine"
                },
                "name": { "type": "string", "description": "Database name" },
                "required": {
                  "type": "boolean",
                  "description": "Required database"
                },
                "state": {
                  "type": "string",
                  "description": "Database state",
                  "enum": ["ok", "pending_creation", "pending_removal"]
                }
              },
              "required": ["engine", "name", "required"]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["databases"]
      },
      "ServiceClickHouseQueryRequestBody": {
        "type": "object",
        "description": "ServiceClickHouseQueryRequestBody",
        "properties": {
          "database": {
            "type": "string",
            "description": "Service database name",
            "maxLength": 250
          },
          "query": {
            "type": "string",
            "description": "Query",
            "maxLength": 20000
          }
        },
        "required": ["database", "query"]
      },
      "ServiceClickHouseQueryResponse": {
        "type": "object",
        "description": "ServiceClickHouseQueryResponse",
        "properties": {
          "data": {
            "type": "array",
            "description": "Data",
            "items": { "type": "array", "properties": {} }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "meta": {
            "type": "array",
            "description": "Meta",
            "items": {
              "type": "object",
              "properties": {
                "name": { "type": "string", "description": "Column name" },
                "type": { "type": "string", "description": "Column type" }
              },
              "required": ["name", "type"]
            }
          },
          "summary": {
            "type": "object",
            "description": "Summary",
            "properties": {
              "elapsed_ns": {
                "type": "integer",
                "description": "Elapsed time in nanoseconds"
              },
              "read_bytes": {
                "type": "integer",
                "description": "Number of bytes read"
              },
              "read_rows": {
                "type": "integer",
                "description": "Number of rows read"
              },
              "result_bytes": {
                "type": "integer",
                "description": "Number of bytes in the result"
              },
              "result_rows": {
                "type": "integer",
                "description": "Number of rows in the result"
              },
              "written_bytes": {
                "type": "integer",
                "description": "Number of bytes written"
              },
              "written_rows": {
                "type": "integer",
                "description": "Number of rows written"
              }
            }
          }
        },
        "required": ["data", "meta", "summary"]
      },
      "ServiceClickHouseQueryStatsResponse": {
        "type": "object",
        "description": "ServiceClickHouseQueryStatsResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "queries": {
            "type": "array",
            "description": "List of query statistics",
            "items": {
              "type": "object",
              "properties": {
                "calls": {
                  "type": "integer",
                  "description": "Number of calls"
                },
                "database": { "type": "string", "description": "Database" },
                "max_time": {
                  "type": "integer",
                  "description": "Maximum query duration in milliseconds"
                },
                "mean_time": {
                  "type": "integer",
                  "description": "Average query duration in milliseconds"
                },
                "min_time": {
                  "type": "integer",
                  "description": "Minimum query duration in milliseconds"
                },
                "p95_time": {
                  "type": "integer",
                  "description": "Query duration 95th percentile in milliseconds"
                },
                "query": {
                  "type": "string",
                  "description": "Normalized query"
                },
                "rows": {
                  "type": "number",
                  "description": "Average number of rows per call"
                },
                "stddev_time": {
                  "type": "integer",
                  "description": "Query duration standard deviation in milliseconds"
                },
                "total_time": {
                  "type": "integer",
                  "description": "Total duration of all calls in milliseconds"
                }
              }
            }
          }
        },
        "required": ["queries"]
      },
      "ServiceClickHouseTieredStorageSummaryResponse": {
        "type": "object",
        "description": "ServiceClickHouseTieredStorageSummaryResponse",
        "properties": {
          "current_cost": {
            "type": "string",
            "description": "The current cost in USD of tiered storage since the beginning of the billing period"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "forecasted_cost": {
            "type": "string",
            "description": "The forecasted cost in USD of tiered storage in the billing period"
          },
          "forecasted_rate": {
            "type": "string",
            "description": "The rate on GBs/hour used to calculate the forecasted cost"
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "storage_usage_history": {
            "type": "object",
            "description": "History of usage and cumulative costs in the billing period",
            "properties": {
              "hourly": {
                "type": "array",
                "description": "History by hour",
                "items": {
                  "type": "object",
                  "properties": {
                    "estimated_cost": {
                      "type": "string",
                      "description": "The estimated cost in USD of tiered storage for this hour"
                    },
                    "hour_start": {
                      "type": "string",
                      "description": "Timestamp in ISO 8601 format, always in UTC",
                      "maxLength": 36
                    },
                    "peak_stored_bytes": {
                      "type": "integer",
                      "description": "Peak bytes stored on object storage at this hour",
                      "minimum": 0
                    }
                  },
                  "required": ["hour_start", "peak_stored_bytes"]
                }
              }
            },
            "required": ["hourly"]
          },
          "total_storage_usage": {
            "type": "integer",
            "description": "Total storage usage by tiered storage, in bytes",
            "minimum": 0
          }
        },
        "required": [
          "current_cost",
          "forecasted_cost",
          "storage_usage_history",
          "total_storage_usage"
        ]
      },
      "ServiceFlinkCancelApplicationDeploymentResponse": {
        "type": "object",
        "description": "ServiceFlinkCancelApplicationDeploymentResponse",
        "properties": {
          "created_at": { "type": "string", "description": "Created at" },
          "created_by": { "type": "string", "description": "Created by" },
          "error_msg": { "type": "string", "description": "Deployment error" },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "id": {
            "type": "string",
            "description": "Deployment ID",
            "minLength": 36,
            "maxLength": 36
          },
          "job_id": {
            "type": "string",
            "description": "Job ID",
            "minLength": 1,
            "maxLength": 128
          },
          "last_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "parallelism": {
            "type": "integer",
            "description": "Flink Job parallelism",
            "minimum": 1,
            "maximum": 128
          },
          "restart_enabled": {
            "type": "boolean",
            "description": "Specifies whether a Flink Job is restarted in case it fails"
          },
          "starting_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "status": {
            "type": "string",
            "description": "Deployment status",
            "enum": [
              "INITIALIZING",
              "CREATED",
              "RUNNING",
              "FAILING",
              "FAILED",
              "SAVING",
              "CANCELLING_REQUESTED",
              "CANCELLING",
              "CANCELED",
              "SAVING_AND_STOP_REQUESTED",
              "SAVING_AND_STOP",
              "FINISHED",
              "RESTARTING",
              "SUSPENDED",
              "DELETE_REQUESTED",
              "DELETING",
              "RECONCILING"
            ]
          },
          "version_id": {
            "type": "string",
            "description": "ApplicationVersion ID",
            "minLength": 36,
            "maxLength": 36
          }
        },
        "required": [
          "created_at",
          "created_by",
          "id",
          "parallelism",
          "restart_enabled",
          "status",
          "version_id"
        ]
      },
      "ServiceFlinkCancelJarApplicationDeploymentResponse": {
        "type": "object",
        "description": "ServiceFlinkCancelJarApplicationDeploymentResponse",
        "properties": {
          "created_at": { "type": "string", "description": "Created at" },
          "created_by": { "type": "string", "description": "Created by" },
          "entry_class": {
            "type": "string",
            "description": "Entry class",
            "minLength": 1,
            "maxLength": 128
          },
          "error_msg": { "type": "string", "description": "Deployment error" },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "id": {
            "type": "string",
            "description": "Deployment ID",
            "minLength": 36,
            "maxLength": 36
          },
          "job_id": {
            "type": "string",
            "description": "Job ID",
            "minLength": 1,
            "maxLength": 128
          },
          "last_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "parallelism": {
            "type": "integer",
            "description": "Flink Job parallelism",
            "minimum": 1,
            "maximum": 128
          },
          "program_args": {
            "type": "array",
            "description": "Program arguments\n\nArguments to pass during Flink job submission through the programArgsList parameter",
            "maxItems": 32,
            "items": { "type": "string" }
          },
          "starting_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "status": {
            "type": "string",
            "description": "Deployment status",
            "enum": [
              "INITIALIZING",
              "CREATED",
              "RUNNING",
              "FAILING",
              "FAILED",
              "SAVING",
              "CANCELLING_REQUESTED",
              "CANCELLING",
              "CANCELED",
              "SAVING_AND_STOP_REQUESTED",
              "SAVING_AND_STOP",
              "FINISHED",
              "RESTARTING",
              "SUSPENDED",
              "DELETE_REQUESTED",
              "DELETING",
              "RECONCILING"
            ]
          },
          "version_id": {
            "type": "string",
            "description": "ApplicationVersion ID",
            "minLength": 36,
            "maxLength": 36
          }
        },
        "required": [
          "created_at",
          "created_by",
          "id",
          "parallelism",
          "status",
          "version_id"
        ]
      },
      "ServiceFlinkCreateApplicationRequestBody": {
        "type": "object",
        "description": "ServiceFlinkCreateApplicationRequestBody",
        "properties": {
          "application_version": {
            "type": "object",
            "description": "Flink ApplicationVersion",
            "properties": {
              "sinks": {
                "type": "array",
                "description": "Sinks",
                "maxItems": 64,
                "items": {
                  "type": "object",
                  "properties": {
                    "create_table": {
                      "type": "string",
                      "description": "The CREATE TABLE statement",
                      "maxLength": 4096
                    },
                    "integration_id": {
                      "type": "string",
                      "description": "Integration ID",
                      "minLength": 36,
                      "maxLength": 36
                    }
                  },
                  "required": ["create_table"]
                }
              },
              "sources": {
                "type": "array",
                "description": "Sources",
                "maxItems": 64,
                "items": {
                  "type": "object",
                  "properties": {
                    "create_table": {
                      "type": "string",
                      "description": "The CREATE TABLE statement",
                      "maxLength": 4096
                    },
                    "integration_id": {
                      "type": "string",
                      "description": "Integration ID",
                      "minLength": 36,
                      "maxLength": 36
                    }
                  },
                  "required": ["create_table"]
                }
              },
              "statement": {
                "type": "string",
                "description": "Job SQL statement",
                "maxLength": 50000
              }
            },
            "required": ["sinks", "sources", "statement"]
          },
          "name": {
            "type": "string",
            "description": "Application name",
            "maxLength": 128
          }
        },
        "required": ["name"]
      },
      "ServiceFlinkCreateApplicationResponse": {
        "type": "object",
        "description": "ServiceFlinkCreateApplicationResponse",
        "properties": {
          "application_versions": {
            "type": "array",
            "description": "ApplicationVersions",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "created_at": { "type": "string", "description": "Created at" },
                "created_by": { "type": "string", "description": "Created by" },
                "id": {
                  "type": "string",
                  "description": "ApplicationVersion ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "sinks": {
                  "type": "array",
                  "description": "Sinks",
                  "maxItems": 64,
                  "items": {
                    "type": "object",
                    "properties": {
                      "columns": {
                        "type": "array",
                        "description": "Columns",
                        "maxItems": 256,
                        "items": {
                          "type": "object",
                          "properties": {
                            "data_type": {
                              "type": "string",
                              "description": "The data type of the column",
                              "minLength": 1,
                              "maxLength": 2048
                            },
                            "extras": {
                              "type": "string",
                              "description": "Column extra information",
                              "maxLength": 256
                            },
                            "key": {
                              "type": "string",
                              "description": "The key info of the column",
                              "maxLength": 512
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the column",
                              "minLength": 1,
                              "maxLength": 256
                            },
                            "nullable": {
                              "type": "boolean",
                              "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                            },
                            "watermark": {
                              "type": "string",
                              "description": "Information of the watermark if the column is used for watermark.",
                              "maxLength": 512
                            }
                          },
                          "required": ["data_type", "name", "nullable"]
                        }
                      },
                      "create_table": {
                        "type": "string",
                        "description": "The CREATE TABLE statement",
                        "maxLength": 4096
                      },
                      "integration_id": {
                        "type": "string",
                        "description": "Integration ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "options": {
                        "type": "object",
                        "description": "Option",
                        "properties": {}
                      },
                      "table_id": {
                        "type": "string",
                        "description": "Sink ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "table_name": {
                        "type": "string",
                        "description": "Table name"
                      }
                    },
                    "required": [
                      "columns",
                      "create_table",
                      "options",
                      "table_id",
                      "table_name"
                    ]
                  }
                },
                "sources": {
                  "type": "array",
                  "description": "Sources",
                  "maxItems": 64,
                  "items": {
                    "type": "object",
                    "properties": {
                      "columns": {
                        "type": "array",
                        "description": "Columns",
                        "maxItems": 256,
                        "items": {
                          "type": "object",
                          "properties": {
                            "data_type": {
                              "type": "string",
                              "description": "The data type of the column",
                              "minLength": 1,
                              "maxLength": 2048
                            },
                            "extras": {
                              "type": "string",
                              "description": "Column extra information",
                              "maxLength": 256
                            },
                            "key": {
                              "type": "string",
                              "description": "The key info of the column",
                              "maxLength": 512
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the column",
                              "minLength": 1,
                              "maxLength": 256
                            },
                            "nullable": {
                              "type": "boolean",
                              "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                            },
                            "watermark": {
                              "type": "string",
                              "description": "Information of the watermark if the column is used for watermark.",
                              "maxLength": 512
                            }
                          },
                          "required": ["data_type", "name", "nullable"]
                        }
                      },
                      "create_table": {
                        "type": "string",
                        "description": "The CREATE TABLE statement",
                        "maxLength": 4096
                      },
                      "integration_id": {
                        "type": "string",
                        "description": "Integration ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "options": {
                        "type": "object",
                        "description": "Option",
                        "properties": {}
                      },
                      "table_id": {
                        "type": "string",
                        "description": "Source ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "table_name": {
                        "type": "string",
                        "description": "Table name"
                      }
                    },
                    "required": [
                      "columns",
                      "create_table",
                      "options",
                      "table_id",
                      "table_name"
                    ]
                  }
                },
                "statement": {
                  "type": "string",
                  "description": "Job SQL statement",
                  "maxLength": 50000
                },
                "version": {
                  "type": "integer",
                  "description": "Version number"
                }
              },
              "required": [
                "created_at",
                "created_by",
                "id",
                "sinks",
                "sources",
                "statement",
                "version"
              ]
            }
          },
          "created_at": { "type": "string", "description": "Created at" },
          "created_by": { "type": "string", "description": "Created by" },
          "current_deployment": {
            "type": "object",
            "description": "Flink ApplicationDeployment",
            "properties": {
              "created_at": { "type": "string", "description": "Created at" },
              "created_by": { "type": "string", "description": "Created by" },
              "error_msg": {
                "type": "string",
                "description": "Deployment error"
              },
              "id": {
                "type": "string",
                "description": "Deployment ID",
                "minLength": 36,
                "maxLength": 36
              },
              "job_id": {
                "type": "string",
                "description": "Job ID",
                "minLength": 1,
                "maxLength": 128
              },
              "last_savepoint": {
                "type": "string",
                "description": "Job savepoint",
                "minLength": 1,
                "maxLength": 2048
              },
              "parallelism": {
                "type": "integer",
                "description": "Flink Job parallelism",
                "minimum": 1,
                "maximum": 128
              },
              "restart_enabled": {
                "type": "boolean",
                "description": "Specifies whether a Flink Job is restarted in case it fails"
              },
              "starting_savepoint": {
                "type": "string",
                "description": "Job savepoint",
                "minLength": 1,
                "maxLength": 2048
              },
              "status": {
                "type": "string",
                "description": "Deployment status",
                "enum": [
                  "INITIALIZING",
                  "CREATED",
                  "RUNNING",
                  "FAILING",
                  "FAILED",
                  "SAVING",
                  "CANCELLING_REQUESTED",
                  "CANCELLING",
                  "CANCELED",
                  "SAVING_AND_STOP_REQUESTED",
                  "SAVING_AND_STOP",
                  "FINISHED",
                  "RESTARTING",
                  "SUSPENDED",
                  "DELETE_REQUESTED",
                  "DELETING",
                  "RECONCILING"
                ]
              },
              "version_id": {
                "type": "string",
                "description": "ApplicationVersion ID",
                "minLength": 36,
                "maxLength": 36
              }
            },
            "required": [
              "created_at",
              "created_by",
              "id",
              "parallelism",
              "restart_enabled",
              "status",
              "version_id"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "id": {
            "type": "string",
            "description": "Application ID",
            "minLength": 36,
            "maxLength": 36
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "name": {
            "type": "string",
            "description": "Application name",
            "maxLength": 128
          },
          "updated_at": { "type": "string", "description": "Updated at" },
          "updated_by": { "type": "string", "description": "Updated by" }
        },
        "required": [
          "application_versions",
          "created_at",
          "created_by",
          "id",
          "name",
          "updated_at",
          "updated_by"
        ]
      },
      "ServiceFlinkCreateApplicationDeploymentRequestBody": {
        "type": "object",
        "description": "ServiceFlinkCreateApplicationDeploymentRequestBody",
        "properties": {
          "parallelism": {
            "type": "integer",
            "description": "Flink Job parallelism",
            "minimum": 1,
            "maximum": 128
          },
          "restart_enabled": {
            "type": "boolean",
            "description": "Specifies whether a Flink Job is restarted in case it fails"
          },
          "starting_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "version_id": {
            "type": "string",
            "description": "ApplicationVersion ID",
            "minLength": 36,
            "maxLength": 36
          }
        },
        "required": ["version_id"]
      },
      "ServiceFlinkCreateApplicationDeploymentResponse": {
        "type": "object",
        "description": "ServiceFlinkCreateApplicationDeploymentResponse",
        "properties": {
          "created_at": { "type": "string", "description": "Created at" },
          "created_by": { "type": "string", "description": "Created by" },
          "error_msg": { "type": "string", "description": "Deployment error" },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "id": {
            "type": "string",
            "description": "Deployment ID",
            "minLength": 36,
            "maxLength": 36
          },
          "job_id": {
            "type": "string",
            "description": "Job ID",
            "minLength": 1,
            "maxLength": 128
          },
          "last_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "parallelism": {
            "type": "integer",
            "description": "Flink Job parallelism",
            "minimum": 1,
            "maximum": 128
          },
          "restart_enabled": {
            "type": "boolean",
            "description": "Specifies whether a Flink Job is restarted in case it fails"
          },
          "starting_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "status": {
            "type": "string",
            "description": "Deployment status",
            "enum": [
              "INITIALIZING",
              "CREATED",
              "RUNNING",
              "FAILING",
              "FAILED",
              "SAVING",
              "CANCELLING_REQUESTED",
              "CANCELLING",
              "CANCELED",
              "SAVING_AND_STOP_REQUESTED",
              "SAVING_AND_STOP",
              "FINISHED",
              "RESTARTING",
              "SUSPENDED",
              "DELETE_REQUESTED",
              "DELETING",
              "RECONCILING"
            ]
          },
          "version_id": {
            "type": "string",
            "description": "ApplicationVersion ID",
            "minLength": 36,
            "maxLength": 36
          }
        },
        "required": [
          "created_at",
          "created_by",
          "id",
          "parallelism",
          "restart_enabled",
          "status",
          "version_id"
        ]
      },
      "ServiceFlinkCreateApplicationVersionRequestBody": {
        "type": "object",
        "description": "ServiceFlinkCreateApplicationVersionRequestBody",
        "properties": {
          "sinks": {
            "type": "array",
            "description": "Sinks",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "create_table": {
                  "type": "string",
                  "description": "The CREATE TABLE statement",
                  "maxLength": 4096
                },
                "integration_id": {
                  "type": "string",
                  "description": "Integration ID",
                  "minLength": 36,
                  "maxLength": 36
                }
              },
              "required": ["create_table"]
            }
          },
          "sources": {
            "type": "array",
            "description": "Sources",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "create_table": {
                  "type": "string",
                  "description": "The CREATE TABLE statement",
                  "maxLength": 4096
                },
                "integration_id": {
                  "type": "string",
                  "description": "Integration ID",
                  "minLength": 36,
                  "maxLength": 36
                }
              },
              "required": ["create_table"]
            }
          },
          "statement": {
            "type": "string",
            "description": "Job SQL statement",
            "maxLength": 50000
          }
        },
        "required": ["sinks", "sources", "statement"]
      },
      "ServiceFlinkCreateApplicationVersionResponse": {
        "type": "object",
        "description": "ServiceFlinkCreateApplicationVersionResponse",
        "properties": {
          "created_at": { "type": "string", "description": "Created at" },
          "created_by": { "type": "string", "description": "Created by" },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "id": {
            "type": "string",
            "description": "ApplicationVersion ID",
            "minLength": 36,
            "maxLength": 36
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "sinks": {
            "type": "array",
            "description": "Sinks",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "columns": {
                  "type": "array",
                  "description": "Columns",
                  "maxItems": 256,
                  "items": {
                    "type": "object",
                    "properties": {
                      "data_type": {
                        "type": "string",
                        "description": "The data type of the column",
                        "minLength": 1,
                        "maxLength": 2048
                      },
                      "extras": {
                        "type": "string",
                        "description": "Column extra information",
                        "maxLength": 256
                      },
                      "key": {
                        "type": "string",
                        "description": "The key info of the column",
                        "maxLength": 512
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the column",
                        "minLength": 1,
                        "maxLength": 256
                      },
                      "nullable": {
                        "type": "boolean",
                        "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                      },
                      "watermark": {
                        "type": "string",
                        "description": "Information of the watermark if the column is used for watermark.",
                        "maxLength": 512
                      }
                    },
                    "required": ["data_type", "name", "nullable"]
                  }
                },
                "create_table": {
                  "type": "string",
                  "description": "The CREATE TABLE statement",
                  "maxLength": 4096
                },
                "integration_id": {
                  "type": "string",
                  "description": "Integration ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "options": {
                  "type": "object",
                  "description": "Option",
                  "properties": {}
                },
                "table_id": {
                  "type": "string",
                  "description": "Sink ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "table_name": { "type": "string", "description": "Table name" }
              },
              "required": [
                "columns",
                "create_table",
                "options",
                "table_id",
                "table_name"
              ]
            }
          },
          "sources": {
            "type": "array",
            "description": "Sources",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "columns": {
                  "type": "array",
                  "description": "Columns",
                  "maxItems": 256,
                  "items": {
                    "type": "object",
                    "properties": {
                      "data_type": {
                        "type": "string",
                        "description": "The data type of the column",
                        "minLength": 1,
                        "maxLength": 2048
                      },
                      "extras": {
                        "type": "string",
                        "description": "Column extra information",
                        "maxLength": 256
                      },
                      "key": {
                        "type": "string",
                        "description": "The key info of the column",
                        "maxLength": 512
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the column",
                        "minLength": 1,
                        "maxLength": 256
                      },
                      "nullable": {
                        "type": "boolean",
                        "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                      },
                      "watermark": {
                        "type": "string",
                        "description": "Information of the watermark if the column is used for watermark.",
                        "maxLength": 512
                      }
                    },
                    "required": ["data_type", "name", "nullable"]
                  }
                },
                "create_table": {
                  "type": "string",
                  "description": "The CREATE TABLE statement",
                  "maxLength": 4096
                },
                "integration_id": {
                  "type": "string",
                  "description": "Integration ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "options": {
                  "type": "object",
                  "description": "Option",
                  "properties": {}
                },
                "table_id": {
                  "type": "string",
                  "description": "Source ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "table_name": { "type": "string", "description": "Table name" }
              },
              "required": [
                "columns",
                "create_table",
                "options",
                "table_id",
                "table_name"
              ]
            }
          },
          "statement": {
            "type": "string",
            "description": "Job SQL statement",
            "maxLength": 50000
          },
          "version": { "type": "integer", "description": "Version number" }
        },
        "required": [
          "created_at",
          "created_by",
          "id",
          "sinks",
          "sources",
          "statement",
          "version"
        ]
      },
      "ServiceFlinkCreateJarApplicationRequestBody": {
        "type": "object",
        "description": "ServiceFlinkCreateJarApplicationRequestBody",
        "properties": {
          "name": {
            "type": "string",
            "description": "Application name",
            "maxLength": 128
          }
        },
        "required": ["name"]
      },
      "ServiceFlinkCreateJarApplicationResponse": {
        "type": "object",
        "description": "ServiceFlinkCreateJarApplicationResponse",
        "properties": {
          "application_versions": {
            "type": "array",
            "description": "JarApplicationVersions",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "created_at": { "type": "string", "description": "Created at" },
                "created_by": { "type": "string", "description": "Created by" },
                "file_info": {
                  "type": "object",
                  "description": "Flink JarApplicationVersion FileInfo",
                  "properties": {
                    "file_sha256": {
                      "type": "string",
                      "description": "sha256 of the file if known",
                      "minLength": 64,
                      "maxLength": 64
                    },
                    "file_size": {
                      "type": "integer",
                      "description": "The size of the file in bytes"
                    },
                    "file_status": {
                      "type": "string",
                      "description": "File status",
                      "enum": ["INITIAL", "READY", "FAILED"]
                    },
                    "url": {
                      "type": "string",
                      "description": "AWS s3 pre-signed url",
                      "minLength": 1,
                      "maxLength": 50000
                    },
                    "verify_error_code": {
                      "type": "integer",
                      "description": "Verify error code",
                      "enum": ["1", "2", "3"]
                    },
                    "verify_error_message": {
                      "type": "string",
                      "description": "Verify error message",
                      "minLength": 16,
                      "maxLength": 512
                    }
                  }
                },
                "id": {
                  "type": "string",
                  "description": "ApplicationVersion ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "version": {
                  "type": "integer",
                  "description": "Version number"
                }
              },
              "required": ["created_at", "created_by", "id", "version"]
            }
          },
          "created_at": { "type": "string", "description": "Created at" },
          "created_by": { "type": "string", "description": "Created by" },
          "current_deployment": {
            "type": "object",
            "description": "Flink JarApplicationDeployment",
            "properties": {
              "created_at": { "type": "string", "description": "Created at" },
              "created_by": { "type": "string", "description": "Created by" },
              "entry_class": {
                "type": "string",
                "description": "Entry class",
                "minLength": 1,
                "maxLength": 128
              },
              "error_msg": {
                "type": "string",
                "description": "Deployment error"
              },
              "id": {
                "type": "string",
                "description": "Deployment ID",
                "minLength": 36,
                "maxLength": 36
              },
              "job_id": {
                "type": "string",
                "description": "Job ID",
                "minLength": 1,
                "maxLength": 128
              },
              "last_savepoint": {
                "type": "string",
                "description": "Job savepoint",
                "minLength": 1,
                "maxLength": 2048
              },
              "parallelism": {
                "type": "integer",
                "description": "Flink Job parallelism",
                "minimum": 1,
                "maximum": 128
              },
              "program_args": {
                "type": "array",
                "description": "Program arguments\n\nArguments to pass during Flink job submission through the programArgsList parameter",
                "maxItems": 32,
                "items": { "type": "string" }
              },
              "starting_savepoint": {
                "type": "string",
                "description": "Job savepoint",
                "minLength": 1,
                "maxLength": 2048
              },
              "status": {
                "type": "string",
                "description": "Deployment status",
                "enum": [
                  "INITIALIZING",
                  "CREATED",
                  "RUNNING",
                  "FAILING",
                  "FAILED",
                  "SAVING",
                  "CANCELLING_REQUESTED",
                  "CANCELLING",
                  "CANCELED",
                  "SAVING_AND_STOP_REQUESTED",
                  "SAVING_AND_STOP",
                  "FINISHED",
                  "RESTARTING",
                  "SUSPENDED",
                  "DELETE_REQUESTED",
                  "DELETING",
                  "RECONCILING"
                ]
              },
              "version_id": {
                "type": "string",
                "description": "ApplicationVersion ID",
                "minLength": 36,
                "maxLength": 36
              }
            },
            "required": [
              "created_at",
              "created_by",
              "id",
              "parallelism",
              "status",
              "version_id"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "id": {
            "type": "string",
            "description": "Application ID",
            "minLength": 36,
            "maxLength": 36
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "name": {
            "type": "string",
            "description": "Application name",
            "maxLength": 128
          },
          "updated_at": { "type": "string", "description": "Updated at" },
          "updated_by": { "type": "string", "description": "Updated by" }
        },
        "required": [
          "application_versions",
          "created_at",
          "created_by",
          "id",
          "name",
          "updated_at",
          "updated_by"
        ]
      },
      "ServiceFlinkCreateJarApplicationDeploymentRequestBody": {
        "type": "object",
        "description": "ServiceFlinkCreateJarApplicationDeploymentRequestBody",
        "properties": {
          "entry_class": {
            "type": "string",
            "description": "Entry class",
            "minLength": 1,
            "maxLength": 128
          },
          "parallelism": {
            "type": "integer",
            "description": "Flink Job parallelism",
            "minimum": 1,
            "maximum": 128
          },
          "program_args": {
            "type": "array",
            "description": "Program arguments\n\nArguments to pass during Flink job submission through the programArgsList parameter",
            "maxItems": 32,
            "items": { "type": "string" }
          },
          "restart_enabled": {
            "type": "boolean",
            "description": "Specifies whether a Flink Job is restarted in case it fails"
          },
          "starting_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "version_id": {
            "type": "string",
            "description": "ApplicationVersion ID",
            "minLength": 36,
            "maxLength": 36
          }
        },
        "required": ["version_id"]
      },
      "ServiceFlinkCreateJarApplicationDeploymentResponse": {
        "type": "object",
        "description": "ServiceFlinkCreateJarApplicationDeploymentResponse",
        "properties": {
          "created_at": { "type": "string", "description": "Created at" },
          "created_by": { "type": "string", "description": "Created by" },
          "entry_class": {
            "type": "string",
            "description": "Entry class",
            "minLength": 1,
            "maxLength": 128
          },
          "error_msg": { "type": "string", "description": "Deployment error" },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "id": {
            "type": "string",
            "description": "Deployment ID",
            "minLength": 36,
            "maxLength": 36
          },
          "job_id": {
            "type": "string",
            "description": "Job ID",
            "minLength": 1,
            "maxLength": 128
          },
          "last_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "parallelism": {
            "type": "integer",
            "description": "Flink Job parallelism",
            "minimum": 1,
            "maximum": 128
          },
          "program_args": {
            "type": "array",
            "description": "Program arguments\n\nArguments to pass during Flink job submission through the programArgsList parameter",
            "maxItems": 32,
            "items": { "type": "string" }
          },
          "starting_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "status": {
            "type": "string",
            "description": "Deployment status",
            "enum": [
              "INITIALIZING",
              "CREATED",
              "RUNNING",
              "FAILING",
              "FAILED",
              "SAVING",
              "CANCELLING_REQUESTED",
              "CANCELLING",
              "CANCELED",
              "SAVING_AND_STOP_REQUESTED",
              "SAVING_AND_STOP",
              "FINISHED",
              "RESTARTING",
              "SUSPENDED",
              "DELETE_REQUESTED",
              "DELETING",
              "RECONCILING"
            ]
          },
          "version_id": {
            "type": "string",
            "description": "ApplicationVersion ID",
            "minLength": 36,
            "maxLength": 36
          }
        },
        "required": [
          "created_at",
          "created_by",
          "id",
          "parallelism",
          "status",
          "version_id"
        ]
      },
      "ServiceFlinkCreateJarApplicationVersionResponse": {
        "type": "object",
        "description": "ServiceFlinkCreateJarApplicationVersionResponse",
        "properties": {
          "created_at": { "type": "string", "description": "Created at" },
          "created_by": { "type": "string", "description": "Created by" },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "file_info": {
            "type": "object",
            "description": "Flink JarApplicationVersion FileInfo",
            "properties": {
              "file_sha256": {
                "type": "string",
                "description": "sha256 of the file if known",
                "minLength": 64,
                "maxLength": 64
              },
              "file_size": {
                "type": "integer",
                "description": "The size of the file in bytes"
              },
              "file_status": {
                "type": "string",
                "description": "File status",
                "enum": ["INITIAL", "READY", "FAILED"]
              },
              "url": {
                "type": "string",
                "description": "AWS s3 pre-signed url",
                "minLength": 1,
                "maxLength": 50000
              },
              "verify_error_code": {
                "type": "integer",
                "description": "Verify error code",
                "enum": ["1", "2", "3"]
              },
              "verify_error_message": {
                "type": "string",
                "description": "Verify error message",
                "minLength": 16,
                "maxLength": 512
              }
            }
          },
          "id": {
            "type": "string",
            "description": "ApplicationVersion ID",
            "minLength": 36,
            "maxLength": 36
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "version": { "type": "integer", "description": "Version number" }
        },
        "required": ["created_at", "created_by", "id", "version"]
      },
      "ServiceFlinkDeleteApplicationResponse": {
        "type": "object",
        "description": "ServiceFlinkDeleteApplicationResponse",
        "properties": {
          "application_versions": {
            "type": "array",
            "description": "ApplicationVersions",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "created_at": { "type": "string", "description": "Created at" },
                "created_by": { "type": "string", "description": "Created by" },
                "id": {
                  "type": "string",
                  "description": "ApplicationVersion ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "sinks": {
                  "type": "array",
                  "description": "Sinks",
                  "maxItems": 64,
                  "items": {
                    "type": "object",
                    "properties": {
                      "columns": {
                        "type": "array",
                        "description": "Columns",
                        "maxItems": 256,
                        "items": {
                          "type": "object",
                          "properties": {
                            "data_type": {
                              "type": "string",
                              "description": "The data type of the column",
                              "minLength": 1,
                              "maxLength": 2048
                            },
                            "extras": {
                              "type": "string",
                              "description": "Column extra information",
                              "maxLength": 256
                            },
                            "key": {
                              "type": "string",
                              "description": "The key info of the column",
                              "maxLength": 512
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the column",
                              "minLength": 1,
                              "maxLength": 256
                            },
                            "nullable": {
                              "type": "boolean",
                              "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                            },
                            "watermark": {
                              "type": "string",
                              "description": "Information of the watermark if the column is used for watermark.",
                              "maxLength": 512
                            }
                          },
                          "required": ["data_type", "name", "nullable"]
                        }
                      },
                      "create_table": {
                        "type": "string",
                        "description": "The CREATE TABLE statement",
                        "maxLength": 4096
                      },
                      "integration_id": {
                        "type": "string",
                        "description": "Integration ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "options": {
                        "type": "object",
                        "description": "Option",
                        "properties": {}
                      },
                      "table_id": {
                        "type": "string",
                        "description": "Sink ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "table_name": {
                        "type": "string",
                        "description": "Table name"
                      }
                    },
                    "required": [
                      "columns",
                      "create_table",
                      "options",
                      "table_id",
                      "table_name"
                    ]
                  }
                },
                "sources": {
                  "type": "array",
                  "description": "Sources",
                  "maxItems": 64,
                  "items": {
                    "type": "object",
                    "properties": {
                      "columns": {
                        "type": "array",
                        "description": "Columns",
                        "maxItems": 256,
                        "items": {
                          "type": "object",
                          "properties": {
                            "data_type": {
                              "type": "string",
                              "description": "The data type of the column",
                              "minLength": 1,
                              "maxLength": 2048
                            },
                            "extras": {
                              "type": "string",
                              "description": "Column extra information",
                              "maxLength": 256
                            },
                            "key": {
                              "type": "string",
                              "description": "The key info of the column",
                              "maxLength": 512
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the column",
                              "minLength": 1,
                              "maxLength": 256
                            },
                            "nullable": {
                              "type": "boolean",
                              "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                            },
                            "watermark": {
                              "type": "string",
                              "description": "Information of the watermark if the column is used for watermark.",
                              "maxLength": 512
                            }
                          },
                          "required": ["data_type", "name", "nullable"]
                        }
                      },
                      "create_table": {
                        "type": "string",
                        "description": "The CREATE TABLE statement",
                        "maxLength": 4096
                      },
                      "integration_id": {
                        "type": "string",
                        "description": "Integration ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "options": {
                        "type": "object",
                        "description": "Option",
                        "properties": {}
                      },
                      "table_id": {
                        "type": "string",
                        "description": "Source ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "table_name": {
                        "type": "string",
                        "description": "Table name"
                      }
                    },
                    "required": [
                      "columns",
                      "create_table",
                      "options",
                      "table_id",
                      "table_name"
                    ]
                  }
                },
                "statement": {
                  "type": "string",
                  "description": "Job SQL statement",
                  "maxLength": 50000
                },
                "version": {
                  "type": "integer",
                  "description": "Version number"
                }
              },
              "required": [
                "created_at",
                "created_by",
                "id",
                "sinks",
                "sources",
                "statement",
                "version"
              ]
            }
          },
          "created_at": { "type": "string", "description": "Created at" },
          "created_by": { "type": "string", "description": "Created by" },
          "current_deployment": {
            "type": "object",
            "description": "Flink ApplicationDeployment",
            "properties": {
              "created_at": { "type": "string", "description": "Created at" },
              "created_by": { "type": "string", "description": "Created by" },
              "error_msg": {
                "type": "string",
                "description": "Deployment error"
              },
              "id": {
                "type": "string",
                "description": "Deployment ID",
                "minLength": 36,
                "maxLength": 36
              },
              "job_id": {
                "type": "string",
                "description": "Job ID",
                "minLength": 1,
                "maxLength": 128
              },
              "last_savepoint": {
                "type": "string",
                "description": "Job savepoint",
                "minLength": 1,
                "maxLength": 2048
              },
              "parallelism": {
                "type": "integer",
                "description": "Flink Job parallelism",
                "minimum": 1,
                "maximum": 128
              },
              "restart_enabled": {
                "type": "boolean",
                "description": "Specifies whether a Flink Job is restarted in case it fails"
              },
              "starting_savepoint": {
                "type": "string",
                "description": "Job savepoint",
                "minLength": 1,
                "maxLength": 2048
              },
              "status": {
                "type": "string",
                "description": "Deployment status",
                "enum": [
                  "INITIALIZING",
                  "CREATED",
                  "RUNNING",
                  "FAILING",
                  "FAILED",
                  "SAVING",
                  "CANCELLING_REQUESTED",
                  "CANCELLING",
                  "CANCELED",
                  "SAVING_AND_STOP_REQUESTED",
                  "SAVING_AND_STOP",
                  "FINISHED",
                  "RESTARTING",
                  "SUSPENDED",
                  "DELETE_REQUESTED",
                  "DELETING",
                  "RECONCILING"
                ]
              },
              "version_id": {
                "type": "string",
                "description": "ApplicationVersion ID",
                "minLength": 36,
                "maxLength": 36
              }
            },
            "required": [
              "created_at",
              "created_by",
              "id",
              "parallelism",
              "restart_enabled",
              "status",
              "version_id"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "id": {
            "type": "string",
            "description": "Application ID",
            "minLength": 36,
            "maxLength": 36
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "name": {
            "type": "string",
            "description": "Application name",
            "maxLength": 128
          },
          "updated_at": { "type": "string", "description": "Updated at" },
          "updated_by": { "type": "string", "description": "Updated by" }
        },
        "required": [
          "application_versions",
          "created_at",
          "created_by",
          "id",
          "name",
          "updated_at",
          "updated_by"
        ]
      },
      "ServiceFlinkDeleteApplicationDeploymentResponse": {
        "type": "object",
        "description": "ServiceFlinkDeleteApplicationDeploymentResponse",
        "properties": {
          "created_at": { "type": "string", "description": "Created at" },
          "created_by": { "type": "string", "description": "Created by" },
          "error_msg": { "type": "string", "description": "Deployment error" },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "id": {
            "type": "string",
            "description": "Deployment ID",
            "minLength": 36,
            "maxLength": 36
          },
          "job_id": {
            "type": "string",
            "description": "Job ID",
            "minLength": 1,
            "maxLength": 128
          },
          "last_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "parallelism": {
            "type": "integer",
            "description": "Flink Job parallelism",
            "minimum": 1,
            "maximum": 128
          },
          "restart_enabled": {
            "type": "boolean",
            "description": "Specifies whether a Flink Job is restarted in case it fails"
          },
          "starting_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "status": {
            "type": "string",
            "description": "Deployment status",
            "enum": [
              "INITIALIZING",
              "CREATED",
              "RUNNING",
              "FAILING",
              "FAILED",
              "SAVING",
              "CANCELLING_REQUESTED",
              "CANCELLING",
              "CANCELED",
              "SAVING_AND_STOP_REQUESTED",
              "SAVING_AND_STOP",
              "FINISHED",
              "RESTARTING",
              "SUSPENDED",
              "DELETE_REQUESTED",
              "DELETING",
              "RECONCILING"
            ]
          },
          "version_id": {
            "type": "string",
            "description": "ApplicationVersion ID",
            "minLength": 36,
            "maxLength": 36
          }
        },
        "required": [
          "created_at",
          "created_by",
          "id",
          "parallelism",
          "restart_enabled",
          "status",
          "version_id"
        ]
      },
      "ServiceFlinkDeleteApplicationVersionResponse": {
        "type": "object",
        "description": "ServiceFlinkDeleteApplicationVersionResponse",
        "properties": {
          "created_at": { "type": "string", "description": "Created at" },
          "created_by": { "type": "string", "description": "Created by" },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "id": {
            "type": "string",
            "description": "ApplicationVersion ID",
            "minLength": 36,
            "maxLength": 36
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "sinks": {
            "type": "array",
            "description": "Sinks",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "columns": {
                  "type": "array",
                  "description": "Columns",
                  "maxItems": 256,
                  "items": {
                    "type": "object",
                    "properties": {
                      "data_type": {
                        "type": "string",
                        "description": "The data type of the column",
                        "minLength": 1,
                        "maxLength": 2048
                      },
                      "extras": {
                        "type": "string",
                        "description": "Column extra information",
                        "maxLength": 256
                      },
                      "key": {
                        "type": "string",
                        "description": "The key info of the column",
                        "maxLength": 512
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the column",
                        "minLength": 1,
                        "maxLength": 256
                      },
                      "nullable": {
                        "type": "boolean",
                        "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                      },
                      "watermark": {
                        "type": "string",
                        "description": "Information of the watermark if the column is used for watermark.",
                        "maxLength": 512
                      }
                    },
                    "required": ["data_type", "name", "nullable"]
                  }
                },
                "create_table": {
                  "type": "string",
                  "description": "The CREATE TABLE statement",
                  "maxLength": 4096
                },
                "integration_id": {
                  "type": "string",
                  "description": "Integration ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "options": {
                  "type": "object",
                  "description": "Option",
                  "properties": {}
                },
                "table_id": {
                  "type": "string",
                  "description": "Sink ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "table_name": { "type": "string", "description": "Table name" }
              },
              "required": [
                "columns",
                "create_table",
                "options",
                "table_id",
                "table_name"
              ]
            }
          },
          "sources": {
            "type": "array",
            "description": "Sources",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "columns": {
                  "type": "array",
                  "description": "Columns",
                  "maxItems": 256,
                  "items": {
                    "type": "object",
                    "properties": {
                      "data_type": {
                        "type": "string",
                        "description": "The data type of the column",
                        "minLength": 1,
                        "maxLength": 2048
                      },
                      "extras": {
                        "type": "string",
                        "description": "Column extra information",
                        "maxLength": 256
                      },
                      "key": {
                        "type": "string",
                        "description": "The key info of the column",
                        "maxLength": 512
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the column",
                        "minLength": 1,
                        "maxLength": 256
                      },
                      "nullable": {
                        "type": "boolean",
                        "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                      },
                      "watermark": {
                        "type": "string",
                        "description": "Information of the watermark if the column is used for watermark.",
                        "maxLength": 512
                      }
                    },
                    "required": ["data_type", "name", "nullable"]
                  }
                },
                "create_table": {
                  "type": "string",
                  "description": "The CREATE TABLE statement",
                  "maxLength": 4096
                },
                "integration_id": {
                  "type": "string",
                  "description": "Integration ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "options": {
                  "type": "object",
                  "description": "Option",
                  "properties": {}
                },
                "table_id": {
                  "type": "string",
                  "description": "Source ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "table_name": { "type": "string", "description": "Table name" }
              },
              "required": [
                "columns",
                "create_table",
                "options",
                "table_id",
                "table_name"
              ]
            }
          },
          "statement": {
            "type": "string",
            "description": "Job SQL statement",
            "maxLength": 50000
          },
          "version": { "type": "integer", "description": "Version number" }
        },
        "required": [
          "created_at",
          "created_by",
          "id",
          "sinks",
          "sources",
          "statement",
          "version"
        ]
      },
      "ServiceFlinkDeleteJarApplicationResponse": {
        "type": "object",
        "description": "ServiceFlinkDeleteJarApplicationResponse",
        "properties": {
          "application_versions": {
            "type": "array",
            "description": "JarApplicationVersions",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "created_at": { "type": "string", "description": "Created at" },
                "created_by": { "type": "string", "description": "Created by" },
                "file_info": {
                  "type": "object",
                  "description": "Flink JarApplicationVersion FileInfo",
                  "properties": {
                    "file_sha256": {
                      "type": "string",
                      "description": "sha256 of the file if known",
                      "minLength": 64,
                      "maxLength": 64
                    },
                    "file_size": {
                      "type": "integer",
                      "description": "The size of the file in bytes"
                    },
                    "file_status": {
                      "type": "string",
                      "description": "File status",
                      "enum": ["INITIAL", "READY", "FAILED"]
                    },
                    "url": {
                      "type": "string",
                      "description": "AWS s3 pre-signed url",
                      "minLength": 1,
                      "maxLength": 50000
                    },
                    "verify_error_code": {
                      "type": "integer",
                      "description": "Verify error code",
                      "enum": ["1", "2", "3"]
                    },
                    "verify_error_message": {
                      "type": "string",
                      "description": "Verify error message",
                      "minLength": 16,
                      "maxLength": 512
                    }
                  }
                },
                "id": {
                  "type": "string",
                  "description": "ApplicationVersion ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "version": {
                  "type": "integer",
                  "description": "Version number"
                }
              },
              "required": ["created_at", "created_by", "id", "version"]
            }
          },
          "created_at": { "type": "string", "description": "Created at" },
          "created_by": { "type": "string", "description": "Created by" },
          "current_deployment": {
            "type": "object",
            "description": "Flink JarApplicationDeployment",
            "properties": {
              "created_at": { "type": "string", "description": "Created at" },
              "created_by": { "type": "string", "description": "Created by" },
              "entry_class": {
                "type": "string",
                "description": "Entry class",
                "minLength": 1,
                "maxLength": 128
              },
              "error_msg": {
                "type": "string",
                "description": "Deployment error"
              },
              "id": {
                "type": "string",
                "description": "Deployment ID",
                "minLength": 36,
                "maxLength": 36
              },
              "job_id": {
                "type": "string",
                "description": "Job ID",
                "minLength": 1,
                "maxLength": 128
              },
              "last_savepoint": {
                "type": "string",
                "description": "Job savepoint",
                "minLength": 1,
                "maxLength": 2048
              },
              "parallelism": {
                "type": "integer",
                "description": "Flink Job parallelism",
                "minimum": 1,
                "maximum": 128
              },
              "program_args": {
                "type": "array",
                "description": "Program arguments\n\nArguments to pass during Flink job submission through the programArgsList parameter",
                "maxItems": 32,
                "items": { "type": "string" }
              },
              "starting_savepoint": {
                "type": "string",
                "description": "Job savepoint",
                "minLength": 1,
                "maxLength": 2048
              },
              "status": {
                "type": "string",
                "description": "Deployment status",
                "enum": [
                  "INITIALIZING",
                  "CREATED",
                  "RUNNING",
                  "FAILING",
                  "FAILED",
                  "SAVING",
                  "CANCELLING_REQUESTED",
                  "CANCELLING",
                  "CANCELED",
                  "SAVING_AND_STOP_REQUESTED",
                  "SAVING_AND_STOP",
                  "FINISHED",
                  "RESTARTING",
                  "SUSPENDED",
                  "DELETE_REQUESTED",
                  "DELETING",
                  "RECONCILING"
                ]
              },
              "version_id": {
                "type": "string",
                "description": "ApplicationVersion ID",
                "minLength": 36,
                "maxLength": 36
              }
            },
            "required": [
              "created_at",
              "created_by",
              "id",
              "parallelism",
              "status",
              "version_id"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "id": {
            "type": "string",
            "description": "Application ID",
            "minLength": 36,
            "maxLength": 36
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "name": {
            "type": "string",
            "description": "Application name",
            "maxLength": 128
          },
          "updated_at": { "type": "string", "description": "Updated at" },
          "updated_by": { "type": "string", "description": "Updated by" }
        },
        "required": [
          "application_versions",
          "created_at",
          "created_by",
          "id",
          "name",
          "updated_at",
          "updated_by"
        ]
      },
      "ServiceFlinkDeleteJarApplicationDeploymentResponse": {
        "type": "object",
        "description": "ServiceFlinkDeleteJarApplicationDeploymentResponse",
        "properties": {
          "created_at": { "type": "string", "description": "Created at" },
          "created_by": { "type": "string", "description": "Created by" },
          "entry_class": {
            "type": "string",
            "description": "Entry class",
            "minLength": 1,
            "maxLength": 128
          },
          "error_msg": { "type": "string", "description": "Deployment error" },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "id": {
            "type": "string",
            "description": "Deployment ID",
            "minLength": 36,
            "maxLength": 36
          },
          "job_id": {
            "type": "string",
            "description": "Job ID",
            "minLength": 1,
            "maxLength": 128
          },
          "last_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "parallelism": {
            "type": "integer",
            "description": "Flink Job parallelism",
            "minimum": 1,
            "maximum": 128
          },
          "program_args": {
            "type": "array",
            "description": "Program arguments\n\nArguments to pass during Flink job submission through the programArgsList parameter",
            "maxItems": 32,
            "items": { "type": "string" }
          },
          "starting_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "status": {
            "type": "string",
            "description": "Deployment status",
            "enum": [
              "INITIALIZING",
              "CREATED",
              "RUNNING",
              "FAILING",
              "FAILED",
              "SAVING",
              "CANCELLING_REQUESTED",
              "CANCELLING",
              "CANCELED",
              "SAVING_AND_STOP_REQUESTED",
              "SAVING_AND_STOP",
              "FINISHED",
              "RESTARTING",
              "SUSPENDED",
              "DELETE_REQUESTED",
              "DELETING",
              "RECONCILING"
            ]
          },
          "version_id": {
            "type": "string",
            "description": "ApplicationVersion ID",
            "minLength": 36,
            "maxLength": 36
          }
        },
        "required": [
          "created_at",
          "created_by",
          "id",
          "parallelism",
          "status",
          "version_id"
        ]
      },
      "ServiceFlinkDeleteJarApplicationVersionResponse": {
        "type": "object",
        "description": "ServiceFlinkDeleteJarApplicationVersionResponse",
        "properties": {
          "created_at": { "type": "string", "description": "Created at" },
          "created_by": { "type": "string", "description": "Created by" },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "file_info": {
            "type": "object",
            "description": "Flink JarApplicationVersion FileInfo",
            "properties": {
              "file_sha256": {
                "type": "string",
                "description": "sha256 of the file if known",
                "minLength": 64,
                "maxLength": 64
              },
              "file_size": {
                "type": "integer",
                "description": "The size of the file in bytes"
              },
              "file_status": {
                "type": "string",
                "description": "File status",
                "enum": ["INITIAL", "READY", "FAILED"]
              },
              "url": {
                "type": "string",
                "description": "AWS s3 pre-signed url",
                "minLength": 1,
                "maxLength": 50000
              },
              "verify_error_code": {
                "type": "integer",
                "description": "Verify error code",
                "enum": ["1", "2", "3"]
              },
              "verify_error_message": {
                "type": "string",
                "description": "Verify error message",
                "minLength": 16,
                "maxLength": 512
              }
            }
          },
          "id": {
            "type": "string",
            "description": "ApplicationVersion ID",
            "minLength": 36,
            "maxLength": 36
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "version": { "type": "integer", "description": "Version number" }
        },
        "required": ["created_at", "created_by", "id", "version"]
      },
      "ServiceFlinkGetApplicationResponse": {
        "type": "object",
        "description": "ServiceFlinkGetApplicationResponse",
        "properties": {
          "application_versions": {
            "type": "array",
            "description": "ApplicationVersions",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "created_at": { "type": "string", "description": "Created at" },
                "created_by": { "type": "string", "description": "Created by" },
                "id": {
                  "type": "string",
                  "description": "ApplicationVersion ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "sinks": {
                  "type": "array",
                  "description": "Sinks",
                  "maxItems": 64,
                  "items": {
                    "type": "object",
                    "properties": {
                      "columns": {
                        "type": "array",
                        "description": "Columns",
                        "maxItems": 256,
                        "items": {
                          "type": "object",
                          "properties": {
                            "data_type": {
                              "type": "string",
                              "description": "The data type of the column",
                              "minLength": 1,
                              "maxLength": 2048
                            },
                            "extras": {
                              "type": "string",
                              "description": "Column extra information",
                              "maxLength": 256
                            },
                            "key": {
                              "type": "string",
                              "description": "The key info of the column",
                              "maxLength": 512
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the column",
                              "minLength": 1,
                              "maxLength": 256
                            },
                            "nullable": {
                              "type": "boolean",
                              "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                            },
                            "watermark": {
                              "type": "string",
                              "description": "Information of the watermark if the column is used for watermark.",
                              "maxLength": 512
                            }
                          },
                          "required": ["data_type", "name", "nullable"]
                        }
                      },
                      "create_table": {
                        "type": "string",
                        "description": "The CREATE TABLE statement",
                        "maxLength": 4096
                      },
                      "integration_id": {
                        "type": "string",
                        "description": "Integration ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "options": {
                        "type": "object",
                        "description": "Option",
                        "properties": {}
                      },
                      "table_id": {
                        "type": "string",
                        "description": "Sink ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "table_name": {
                        "type": "string",
                        "description": "Table name"
                      }
                    },
                    "required": [
                      "columns",
                      "create_table",
                      "options",
                      "table_id",
                      "table_name"
                    ]
                  }
                },
                "sources": {
                  "type": "array",
                  "description": "Sources",
                  "maxItems": 64,
                  "items": {
                    "type": "object",
                    "properties": {
                      "columns": {
                        "type": "array",
                        "description": "Columns",
                        "maxItems": 256,
                        "items": {
                          "type": "object",
                          "properties": {
                            "data_type": {
                              "type": "string",
                              "description": "The data type of the column",
                              "minLength": 1,
                              "maxLength": 2048
                            },
                            "extras": {
                              "type": "string",
                              "description": "Column extra information",
                              "maxLength": 256
                            },
                            "key": {
                              "type": "string",
                              "description": "The key info of the column",
                              "maxLength": 512
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the column",
                              "minLength": 1,
                              "maxLength": 256
                            },
                            "nullable": {
                              "type": "boolean",
                              "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                            },
                            "watermark": {
                              "type": "string",
                              "description": "Information of the watermark if the column is used for watermark.",
                              "maxLength": 512
                            }
                          },
                          "required": ["data_type", "name", "nullable"]
                        }
                      },
                      "create_table": {
                        "type": "string",
                        "description": "The CREATE TABLE statement",
                        "maxLength": 4096
                      },
                      "integration_id": {
                        "type": "string",
                        "description": "Integration ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "options": {
                        "type": "object",
                        "description": "Option",
                        "properties": {}
                      },
                      "table_id": {
                        "type": "string",
                        "description": "Source ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "table_name": {
                        "type": "string",
                        "description": "Table name"
                      }
                    },
                    "required": [
                      "columns",
                      "create_table",
                      "options",
                      "table_id",
                      "table_name"
                    ]
                  }
                },
                "statement": {
                  "type": "string",
                  "description": "Job SQL statement",
                  "maxLength": 50000
                },
                "version": {
                  "type": "integer",
                  "description": "Version number"
                }
              },
              "required": [
                "created_at",
                "created_by",
                "id",
                "sinks",
                "sources",
                "statement",
                "version"
              ]
            }
          },
          "created_at": { "type": "string", "description": "Created at" },
          "created_by": { "type": "string", "description": "Created by" },
          "current_deployment": {
            "type": "object",
            "description": "Flink ApplicationDeployment",
            "properties": {
              "created_at": { "type": "string", "description": "Created at" },
              "created_by": { "type": "string", "description": "Created by" },
              "error_msg": {
                "type": "string",
                "description": "Deployment error"
              },
              "id": {
                "type": "string",
                "description": "Deployment ID",
                "minLength": 36,
                "maxLength": 36
              },
              "job_id": {
                "type": "string",
                "description": "Job ID",
                "minLength": 1,
                "maxLength": 128
              },
              "last_savepoint": {
                "type": "string",
                "description": "Job savepoint",
                "minLength": 1,
                "maxLength": 2048
              },
              "parallelism": {
                "type": "integer",
                "description": "Flink Job parallelism",
                "minimum": 1,
                "maximum": 128
              },
              "restart_enabled": {
                "type": "boolean",
                "description": "Specifies whether a Flink Job is restarted in case it fails"
              },
              "starting_savepoint": {
                "type": "string",
                "description": "Job savepoint",
                "minLength": 1,
                "maxLength": 2048
              },
              "status": {
                "type": "string",
                "description": "Deployment status",
                "enum": [
                  "INITIALIZING",
                  "CREATED",
                  "RUNNING",
                  "FAILING",
                  "FAILED",
                  "SAVING",
                  "CANCELLING_REQUESTED",
                  "CANCELLING",
                  "CANCELED",
                  "SAVING_AND_STOP_REQUESTED",
                  "SAVING_AND_STOP",
                  "FINISHED",
                  "RESTARTING",
                  "SUSPENDED",
                  "DELETE_REQUESTED",
                  "DELETING",
                  "RECONCILING"
                ]
              },
              "version_id": {
                "type": "string",
                "description": "ApplicationVersion ID",
                "minLength": 36,
                "maxLength": 36
              }
            },
            "required": [
              "created_at",
              "created_by",
              "id",
              "parallelism",
              "restart_enabled",
              "status",
              "version_id"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "id": {
            "type": "string",
            "description": "Application ID",
            "minLength": 36,
            "maxLength": 36
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "name": {
            "type": "string",
            "description": "Application name",
            "maxLength": 128
          },
          "updated_at": { "type": "string", "description": "Updated at" },
          "updated_by": { "type": "string", "description": "Updated by" }
        },
        "required": [
          "application_versions",
          "created_at",
          "created_by",
          "id",
          "name",
          "updated_at",
          "updated_by"
        ]
      },
      "ServiceFlinkGetApplicationDeploymentResponse": {
        "type": "object",
        "description": "ServiceFlinkGetApplicationDeploymentResponse",
        "properties": {
          "created_at": { "type": "string", "description": "Created at" },
          "created_by": { "type": "string", "description": "Created by" },
          "error_msg": { "type": "string", "description": "Deployment error" },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "id": {
            "type": "string",
            "description": "Deployment ID",
            "minLength": 36,
            "maxLength": 36
          },
          "job_id": {
            "type": "string",
            "description": "Job ID",
            "minLength": 1,
            "maxLength": 128
          },
          "last_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "parallelism": {
            "type": "integer",
            "description": "Flink Job parallelism",
            "minimum": 1,
            "maximum": 128
          },
          "restart_enabled": {
            "type": "boolean",
            "description": "Specifies whether a Flink Job is restarted in case it fails"
          },
          "starting_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "status": {
            "type": "string",
            "description": "Deployment status",
            "enum": [
              "INITIALIZING",
              "CREATED",
              "RUNNING",
              "FAILING",
              "FAILED",
              "SAVING",
              "CANCELLING_REQUESTED",
              "CANCELLING",
              "CANCELED",
              "SAVING_AND_STOP_REQUESTED",
              "SAVING_AND_STOP",
              "FINISHED",
              "RESTARTING",
              "SUSPENDED",
              "DELETE_REQUESTED",
              "DELETING",
              "RECONCILING"
            ]
          },
          "version_id": {
            "type": "string",
            "description": "ApplicationVersion ID",
            "minLength": 36,
            "maxLength": 36
          }
        },
        "required": [
          "created_at",
          "created_by",
          "id",
          "parallelism",
          "restart_enabled",
          "status",
          "version_id"
        ]
      },
      "ServiceFlinkGetApplicationVersionResponse": {
        "type": "object",
        "description": "ServiceFlinkGetApplicationVersionResponse",
        "properties": {
          "created_at": { "type": "string", "description": "Created at" },
          "created_by": { "type": "string", "description": "Created by" },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "id": {
            "type": "string",
            "description": "ApplicationVersion ID",
            "minLength": 36,
            "maxLength": 36
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "sinks": {
            "type": "array",
            "description": "Sinks",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "columns": {
                  "type": "array",
                  "description": "Columns",
                  "maxItems": 256,
                  "items": {
                    "type": "object",
                    "properties": {
                      "data_type": {
                        "type": "string",
                        "description": "The data type of the column",
                        "minLength": 1,
                        "maxLength": 2048
                      },
                      "extras": {
                        "type": "string",
                        "description": "Column extra information",
                        "maxLength": 256
                      },
                      "key": {
                        "type": "string",
                        "description": "The key info of the column",
                        "maxLength": 512
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the column",
                        "minLength": 1,
                        "maxLength": 256
                      },
                      "nullable": {
                        "type": "boolean",
                        "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                      },
                      "watermark": {
                        "type": "string",
                        "description": "Information of the watermark if the column is used for watermark.",
                        "maxLength": 512
                      }
                    },
                    "required": ["data_type", "name", "nullable"]
                  }
                },
                "create_table": {
                  "type": "string",
                  "description": "The CREATE TABLE statement",
                  "maxLength": 4096
                },
                "integration_id": {
                  "type": "string",
                  "description": "Integration ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "options": {
                  "type": "object",
                  "description": "Option",
                  "properties": {}
                },
                "table_id": {
                  "type": "string",
                  "description": "Sink ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "table_name": { "type": "string", "description": "Table name" }
              },
              "required": [
                "columns",
                "create_table",
                "options",
                "table_id",
                "table_name"
              ]
            }
          },
          "sources": {
            "type": "array",
            "description": "Sources",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "columns": {
                  "type": "array",
                  "description": "Columns",
                  "maxItems": 256,
                  "items": {
                    "type": "object",
                    "properties": {
                      "data_type": {
                        "type": "string",
                        "description": "The data type of the column",
                        "minLength": 1,
                        "maxLength": 2048
                      },
                      "extras": {
                        "type": "string",
                        "description": "Column extra information",
                        "maxLength": 256
                      },
                      "key": {
                        "type": "string",
                        "description": "The key info of the column",
                        "maxLength": 512
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the column",
                        "minLength": 1,
                        "maxLength": 256
                      },
                      "nullable": {
                        "type": "boolean",
                        "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                      },
                      "watermark": {
                        "type": "string",
                        "description": "Information of the watermark if the column is used for watermark.",
                        "maxLength": 512
                      }
                    },
                    "required": ["data_type", "name", "nullable"]
                  }
                },
                "create_table": {
                  "type": "string",
                  "description": "The CREATE TABLE statement",
                  "maxLength": 4096
                },
                "integration_id": {
                  "type": "string",
                  "description": "Integration ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "options": {
                  "type": "object",
                  "description": "Option",
                  "properties": {}
                },
                "table_id": {
                  "type": "string",
                  "description": "Source ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "table_name": { "type": "string", "description": "Table name" }
              },
              "required": [
                "columns",
                "create_table",
                "options",
                "table_id",
                "table_name"
              ]
            }
          },
          "statement": {
            "type": "string",
            "description": "Job SQL statement",
            "maxLength": 50000
          },
          "version": { "type": "integer", "description": "Version number" }
        },
        "required": [
          "created_at",
          "created_by",
          "id",
          "sinks",
          "sources",
          "statement",
          "version"
        ]
      },
      "ServiceFlinkGetJarApplicationResponse": {
        "type": "object",
        "description": "ServiceFlinkGetJarApplicationResponse",
        "properties": {
          "application_versions": {
            "type": "array",
            "description": "JarApplicationVersions",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "created_at": { "type": "string", "description": "Created at" },
                "created_by": { "type": "string", "description": "Created by" },
                "file_info": {
                  "type": "object",
                  "description": "Flink JarApplicationVersion FileInfo",
                  "properties": {
                    "file_sha256": {
                      "type": "string",
                      "description": "sha256 of the file if known",
                      "minLength": 64,
                      "maxLength": 64
                    },
                    "file_size": {
                      "type": "integer",
                      "description": "The size of the file in bytes"
                    },
                    "file_status": {
                      "type": "string",
                      "description": "File status",
                      "enum": ["INITIAL", "READY", "FAILED"]
                    },
                    "url": {
                      "type": "string",
                      "description": "AWS s3 pre-signed url",
                      "minLength": 1,
                      "maxLength": 50000
                    },
                    "verify_error_code": {
                      "type": "integer",
                      "description": "Verify error code",
                      "enum": ["1", "2", "3"]
                    },
                    "verify_error_message": {
                      "type": "string",
                      "description": "Verify error message",
                      "minLength": 16,
                      "maxLength": 512
                    }
                  }
                },
                "id": {
                  "type": "string",
                  "description": "ApplicationVersion ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "version": {
                  "type": "integer",
                  "description": "Version number"
                }
              },
              "required": ["created_at", "created_by", "id", "version"]
            }
          },
          "created_at": { "type": "string", "description": "Created at" },
          "created_by": { "type": "string", "description": "Created by" },
          "current_deployment": {
            "type": "object",
            "description": "Flink JarApplicationDeployment",
            "properties": {
              "created_at": { "type": "string", "description": "Created at" },
              "created_by": { "type": "string", "description": "Created by" },
              "entry_class": {
                "type": "string",
                "description": "Entry class",
                "minLength": 1,
                "maxLength": 128
              },
              "error_msg": {
                "type": "string",
                "description": "Deployment error"
              },
              "id": {
                "type": "string",
                "description": "Deployment ID",
                "minLength": 36,
                "maxLength": 36
              },
              "job_id": {
                "type": "string",
                "description": "Job ID",
                "minLength": 1,
                "maxLength": 128
              },
              "last_savepoint": {
                "type": "string",
                "description": "Job savepoint",
                "minLength": 1,
                "maxLength": 2048
              },
              "parallelism": {
                "type": "integer",
                "description": "Flink Job parallelism",
                "minimum": 1,
                "maximum": 128
              },
              "program_args": {
                "type": "array",
                "description": "Program arguments\n\nArguments to pass during Flink job submission through the programArgsList parameter",
                "maxItems": 32,
                "items": { "type": "string" }
              },
              "starting_savepoint": {
                "type": "string",
                "description": "Job savepoint",
                "minLength": 1,
                "maxLength": 2048
              },
              "status": {
                "type": "string",
                "description": "Deployment status",
                "enum": [
                  "INITIALIZING",
                  "CREATED",
                  "RUNNING",
                  "FAILING",
                  "FAILED",
                  "SAVING",
                  "CANCELLING_REQUESTED",
                  "CANCELLING",
                  "CANCELED",
                  "SAVING_AND_STOP_REQUESTED",
                  "SAVING_AND_STOP",
                  "FINISHED",
                  "RESTARTING",
                  "SUSPENDED",
                  "DELETE_REQUESTED",
                  "DELETING",
                  "RECONCILING"
                ]
              },
              "version_id": {
                "type": "string",
                "description": "ApplicationVersion ID",
                "minLength": 36,
                "maxLength": 36
              }
            },
            "required": [
              "created_at",
              "created_by",
              "id",
              "parallelism",
              "status",
              "version_id"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "id": {
            "type": "string",
            "description": "Application ID",
            "minLength": 36,
            "maxLength": 36
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "name": {
            "type": "string",
            "description": "Application name",
            "maxLength": 128
          },
          "updated_at": { "type": "string", "description": "Updated at" },
          "updated_by": { "type": "string", "description": "Updated by" }
        },
        "required": [
          "application_versions",
          "created_at",
          "created_by",
          "id",
          "name",
          "updated_at",
          "updated_by"
        ]
      },
      "ServiceFlinkGetJarApplicationDeploymentResponse": {
        "type": "object",
        "description": "ServiceFlinkGetJarApplicationDeploymentResponse",
        "properties": {
          "created_at": { "type": "string", "description": "Created at" },
          "created_by": { "type": "string", "description": "Created by" },
          "entry_class": {
            "type": "string",
            "description": "Entry class",
            "minLength": 1,
            "maxLength": 128
          },
          "error_msg": { "type": "string", "description": "Deployment error" },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "id": {
            "type": "string",
            "description": "Deployment ID",
            "minLength": 36,
            "maxLength": 36
          },
          "job_id": {
            "type": "string",
            "description": "Job ID",
            "minLength": 1,
            "maxLength": 128
          },
          "last_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "parallelism": {
            "type": "integer",
            "description": "Flink Job parallelism",
            "minimum": 1,
            "maximum": 128
          },
          "program_args": {
            "type": "array",
            "description": "Program arguments\n\nArguments to pass during Flink job submission through the programArgsList parameter",
            "maxItems": 32,
            "items": { "type": "string" }
          },
          "starting_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "status": {
            "type": "string",
            "description": "Deployment status",
            "enum": [
              "INITIALIZING",
              "CREATED",
              "RUNNING",
              "FAILING",
              "FAILED",
              "SAVING",
              "CANCELLING_REQUESTED",
              "CANCELLING",
              "CANCELED",
              "SAVING_AND_STOP_REQUESTED",
              "SAVING_AND_STOP",
              "FINISHED",
              "RESTARTING",
              "SUSPENDED",
              "DELETE_REQUESTED",
              "DELETING",
              "RECONCILING"
            ]
          },
          "version_id": {
            "type": "string",
            "description": "ApplicationVersion ID",
            "minLength": 36,
            "maxLength": 36
          }
        },
        "required": [
          "created_at",
          "created_by",
          "id",
          "parallelism",
          "status",
          "version_id"
        ]
      },
      "ServiceFlinkGetJarApplicationVersionResponse": {
        "type": "object",
        "description": "ServiceFlinkGetJarApplicationVersionResponse",
        "properties": {
          "created_at": { "type": "string", "description": "Created at" },
          "created_by": { "type": "string", "description": "Created by" },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "file_info": {
            "type": "object",
            "description": "Flink JarApplicationVersion FileInfo",
            "properties": {
              "file_sha256": {
                "type": "string",
                "description": "sha256 of the file if known",
                "minLength": 64,
                "maxLength": 64
              },
              "file_size": {
                "type": "integer",
                "description": "The size of the file in bytes"
              },
              "file_status": {
                "type": "string",
                "description": "File status",
                "enum": ["INITIAL", "READY", "FAILED"]
              },
              "url": {
                "type": "string",
                "description": "AWS s3 pre-signed url",
                "minLength": 1,
                "maxLength": 50000
              },
              "verify_error_code": {
                "type": "integer",
                "description": "Verify error code",
                "enum": ["1", "2", "3"]
              },
              "verify_error_message": {
                "type": "string",
                "description": "Verify error message",
                "minLength": 16,
                "maxLength": 512
              }
            }
          },
          "id": {
            "type": "string",
            "description": "ApplicationVersion ID",
            "minLength": 36,
            "maxLength": 36
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "version": { "type": "integer", "description": "Version number" }
        },
        "required": ["created_at", "created_by", "id", "version"]
      },
      "ServiceFlinkJobDetailsResponse": {
        "type": "object",
        "description": "ServiceFlinkJobDetailsResponse",
        "properties": {
          "duration": {
            "type": "integer",
            "description": "Duration of the job"
          },
          "end\\-time": {
            "type": "integer",
            "description": "End time of the job"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "isStoppable": {
            "type": "boolean",
            "description": "Whether the job is stoppable"
          },
          "jid": { "type": "string", "description": "Job ID" },
          "maxParallelism": {
            "type": "integer",
            "description": "Max parallelism"
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "name": { "type": "string", "description": "Job name" },
          "now": { "type": "integer", "description": "Epoch time" },
          "plan": { "type": "object", "description": "Plan", "properties": {} },
          "start\\-time": {
            "type": "integer",
            "description": "Start time epoch"
          },
          "state": {
            "type": "string",
            "description": "Job state",
            "enum": [
              "INITIALIZING",
              "CREATED",
              "RUNNING",
              "FAILING",
              "FAILED",
              "CANCELLING",
              "CANCELED",
              "FINISHED",
              "RESTARTING",
              "SUSPENDED",
              "RECONCILING"
            ]
          },
          "status\\-counts": {
            "type": "object",
            "description": "Status counts",
            "properties": {
              "CANCELED": { "type": "integer", "description": "CANCELED" },
              "CANCELING": { "type": "integer", "description": "CANCELING" },
              "CREATED": { "type": "integer", "description": "CREATED" },
              "DEPLOYING": { "type": "integer", "description": "DEPLOYING" },
              "FAILED": { "type": "integer", "description": "FAILED" },
              "FINISHED": { "type": "integer", "description": "FINISHED" },
              "INITIALIZING": {
                "type": "integer",
                "description": "INITIALIZING"
              },
              "RECONCILING": {
                "type": "integer",
                "description": "RECONCILING"
              },
              "RUNNING": { "type": "integer", "description": "RUNNING" },
              "SCHEDULED": { "type": "integer", "description": "SCHEDULED" }
            }
          },
          "timestamps": {
            "type": "object",
            "description": "Timestamps",
            "properties": {}
          },
          "vertices": {
            "type": "array",
            "description": "Vertices",
            "items": { "type": "object", "properties": {} }
          }
        }
      },
      "ServiceFlinkJobsListResponse": {
        "type": "object",
        "description": "ServiceFlinkJobsListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "jobs": {
            "type": "array",
            "description": "Jobs",
            "items": {
              "type": "object",
              "properties": {
                "id": { "type": "string", "description": "Job ID" },
                "status": {
                  "type": "string",
                  "description": "Job status",
                  "enum": [
                    "INITIALIZING",
                    "CREATED",
                    "RUNNING",
                    "FAILING",
                    "FAILED",
                    "CANCELLING",
                    "CANCELED",
                    "FINISHED",
                    "RESTARTING",
                    "SUSPENDED",
                    "RECONCILING"
                  ]
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceFlinkListApplicationDeploymentsResponse": {
        "type": "object",
        "description": "ServiceFlinkListApplicationDeploymentsResponse",
        "properties": {
          "deployments": {
            "type": "array",
            "description": "Flink ApplicationDeployments",
            "maxItems": 1024,
            "items": {
              "type": "object",
              "properties": {
                "created_at": { "type": "string", "description": "Created at" },
                "created_by": { "type": "string", "description": "Created by" },
                "error_msg": {
                  "type": "string",
                  "description": "Deployment error"
                },
                "id": {
                  "type": "string",
                  "description": "Deployment ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "job_id": {
                  "type": "string",
                  "description": "Job ID",
                  "minLength": 1,
                  "maxLength": 128
                },
                "last_savepoint": {
                  "type": "string",
                  "description": "Job savepoint",
                  "minLength": 1,
                  "maxLength": 2048
                },
                "parallelism": {
                  "type": "integer",
                  "description": "Flink Job parallelism",
                  "minimum": 1,
                  "maximum": 128
                },
                "restart_enabled": {
                  "type": "boolean",
                  "description": "Specifies whether a Flink Job is restarted in case it fails"
                },
                "starting_savepoint": {
                  "type": "string",
                  "description": "Job savepoint",
                  "minLength": 1,
                  "maxLength": 2048
                },
                "status": {
                  "type": "string",
                  "description": "Deployment status",
                  "enum": [
                    "INITIALIZING",
                    "CREATED",
                    "RUNNING",
                    "FAILING",
                    "FAILED",
                    "SAVING",
                    "CANCELLING_REQUESTED",
                    "CANCELLING",
                    "CANCELED",
                    "SAVING_AND_STOP_REQUESTED",
                    "SAVING_AND_STOP",
                    "FINISHED",
                    "RESTARTING",
                    "SUSPENDED",
                    "DELETE_REQUESTED",
                    "DELETING",
                    "RECONCILING"
                  ]
                },
                "version_id": {
                  "type": "string",
                  "description": "ApplicationVersion ID",
                  "minLength": 36,
                  "maxLength": 36
                }
              },
              "required": [
                "created_at",
                "created_by",
                "id",
                "parallelism",
                "restart_enabled",
                "status",
                "version_id"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["deployments"]
      },
      "ServiceFlinkListApplicationsResponse": {
        "type": "object",
        "description": "ServiceFlinkListApplicationsResponse",
        "properties": {
          "applications": {
            "type": "array",
            "description": "Flink Applications",
            "maxItems": 1024,
            "items": {
              "type": "object",
              "properties": {
                "created_at": { "type": "string", "description": "Created at" },
                "created_by": { "type": "string", "description": "Created by" },
                "id": {
                  "type": "string",
                  "description": "Application ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "name": {
                  "type": "string",
                  "description": "Application name",
                  "maxLength": 128
                },
                "updated_at": { "type": "string", "description": "Updated at" },
                "updated_by": { "type": "string", "description": "Updated by" }
              },
              "required": ["id", "name"]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["applications"]
      },
      "ServiceFlinkListJarApplicationDeploymentsResponse": {
        "type": "object",
        "description": "ServiceFlinkListJarApplicationDeploymentsResponse",
        "properties": {
          "deployments": {
            "type": "array",
            "description": "Flink JarApplicationDeployments",
            "maxItems": 1024,
            "items": {
              "type": "object",
              "properties": {
                "created_at": { "type": "string", "description": "Created at" },
                "created_by": { "type": "string", "description": "Created by" },
                "entry_class": {
                  "type": "string",
                  "description": "Entry class",
                  "minLength": 1,
                  "maxLength": 128
                },
                "error_msg": {
                  "type": "string",
                  "description": "Deployment error"
                },
                "id": {
                  "type": "string",
                  "description": "Deployment ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "job_id": {
                  "type": "string",
                  "description": "Job ID",
                  "minLength": 1,
                  "maxLength": 128
                },
                "last_savepoint": {
                  "type": "string",
                  "description": "Job savepoint",
                  "minLength": 1,
                  "maxLength": 2048
                },
                "parallelism": {
                  "type": "integer",
                  "description": "Flink Job parallelism",
                  "minimum": 1,
                  "maximum": 128
                },
                "program_args": {
                  "type": "array",
                  "description": "Program arguments\n\nArguments to pass during Flink job submission through the programArgsList parameter",
                  "maxItems": 32,
                  "items": { "type": "string" }
                },
                "starting_savepoint": {
                  "type": "string",
                  "description": "Job savepoint",
                  "minLength": 1,
                  "maxLength": 2048
                },
                "status": {
                  "type": "string",
                  "description": "Deployment status",
                  "enum": [
                    "INITIALIZING",
                    "CREATED",
                    "RUNNING",
                    "FAILING",
                    "FAILED",
                    "SAVING",
                    "CANCELLING_REQUESTED",
                    "CANCELLING",
                    "CANCELED",
                    "SAVING_AND_STOP_REQUESTED",
                    "SAVING_AND_STOP",
                    "FINISHED",
                    "RESTARTING",
                    "SUSPENDED",
                    "DELETE_REQUESTED",
                    "DELETING",
                    "RECONCILING"
                  ]
                },
                "version_id": {
                  "type": "string",
                  "description": "ApplicationVersion ID",
                  "minLength": 36,
                  "maxLength": 36
                }
              },
              "required": [
                "created_at",
                "created_by",
                "id",
                "parallelism",
                "status",
                "version_id"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["deployments"]
      },
      "ServiceFlinkListJarApplicationsResponse": {
        "type": "object",
        "description": "ServiceFlinkListJarApplicationsResponse",
        "properties": {
          "applications": {
            "type": "array",
            "description": "Flink JarApplications",
            "maxItems": 1024,
            "items": {
              "type": "object",
              "properties": {
                "created_at": { "type": "string", "description": "Created at" },
                "created_by": { "type": "string", "description": "Created by" },
                "id": {
                  "type": "string",
                  "description": "Application ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "name": {
                  "type": "string",
                  "description": "Application name",
                  "maxLength": 128
                },
                "updated_at": { "type": "string", "description": "Updated at" },
                "updated_by": { "type": "string", "description": "Updated by" }
              },
              "required": ["id", "name"]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["applications"]
      },
      "ServiceFlinkOverviewResponse": {
        "type": "object",
        "description": "ServiceFlinkOverviewResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "flink\\-commit": {
            "type": "string",
            "description": "Commit of Flink version"
          },
          "flink\\-version": {
            "type": "string",
            "description": "Flink version"
          },
          "jobs\\-cancelled": {
            "type": "integer",
            "description": "Number of cancelled jobs"
          },
          "jobs\\-failed": {
            "type": "integer",
            "description": "Number of failed jobs"
          },
          "jobs\\-finished": {
            "type": "integer",
            "description": "Number of finished jobs"
          },
          "jobs\\-running": {
            "type": "integer",
            "description": "Number of running jobs"
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "slots\\-available": {
            "type": "integer",
            "description": "Number of slots available"
          },
          "slots\\-total": {
            "type": "integer",
            "description": "Number of slots"
          },
          "taskmanagers": {
            "type": "integer",
            "description": "Number of TaskManagers"
          }
        }
      },
      "ServiceFlinkStopApplicationDeploymentResponse": {
        "type": "object",
        "description": "ServiceFlinkStopApplicationDeploymentResponse",
        "properties": {
          "created_at": { "type": "string", "description": "Created at" },
          "created_by": { "type": "string", "description": "Created by" },
          "error_msg": { "type": "string", "description": "Deployment error" },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "id": {
            "type": "string",
            "description": "Deployment ID",
            "minLength": 36,
            "maxLength": 36
          },
          "job_id": {
            "type": "string",
            "description": "Job ID",
            "minLength": 1,
            "maxLength": 128
          },
          "last_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "parallelism": {
            "type": "integer",
            "description": "Flink Job parallelism",
            "minimum": 1,
            "maximum": 128
          },
          "restart_enabled": {
            "type": "boolean",
            "description": "Specifies whether a Flink Job is restarted in case it fails"
          },
          "starting_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "status": {
            "type": "string",
            "description": "Deployment status",
            "enum": [
              "INITIALIZING",
              "CREATED",
              "RUNNING",
              "FAILING",
              "FAILED",
              "SAVING",
              "CANCELLING_REQUESTED",
              "CANCELLING",
              "CANCELED",
              "SAVING_AND_STOP_REQUESTED",
              "SAVING_AND_STOP",
              "FINISHED",
              "RESTARTING",
              "SUSPENDED",
              "DELETE_REQUESTED",
              "DELETING",
              "RECONCILING"
            ]
          },
          "version_id": {
            "type": "string",
            "description": "ApplicationVersion ID",
            "minLength": 36,
            "maxLength": 36
          }
        },
        "required": [
          "created_at",
          "created_by",
          "id",
          "parallelism",
          "restart_enabled",
          "status",
          "version_id"
        ]
      },
      "ServiceFlinkStopJarApplicationDeploymentResponse": {
        "type": "object",
        "description": "ServiceFlinkStopJarApplicationDeploymentResponse",
        "properties": {
          "created_at": { "type": "string", "description": "Created at" },
          "created_by": { "type": "string", "description": "Created by" },
          "entry_class": {
            "type": "string",
            "description": "Entry class",
            "minLength": 1,
            "maxLength": 128
          },
          "error_msg": { "type": "string", "description": "Deployment error" },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "id": {
            "type": "string",
            "description": "Deployment ID",
            "minLength": 36,
            "maxLength": 36
          },
          "job_id": {
            "type": "string",
            "description": "Job ID",
            "minLength": 1,
            "maxLength": 128
          },
          "last_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "parallelism": {
            "type": "integer",
            "description": "Flink Job parallelism",
            "minimum": 1,
            "maximum": 128
          },
          "program_args": {
            "type": "array",
            "description": "Program arguments\n\nArguments to pass during Flink job submission through the programArgsList parameter",
            "maxItems": 32,
            "items": { "type": "string" }
          },
          "starting_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "status": {
            "type": "string",
            "description": "Deployment status",
            "enum": [
              "INITIALIZING",
              "CREATED",
              "RUNNING",
              "FAILING",
              "FAILED",
              "SAVING",
              "CANCELLING_REQUESTED",
              "CANCELLING",
              "CANCELED",
              "SAVING_AND_STOP_REQUESTED",
              "SAVING_AND_STOP",
              "FINISHED",
              "RESTARTING",
              "SUSPENDED",
              "DELETE_REQUESTED",
              "DELETING",
              "RECONCILING"
            ]
          },
          "version_id": {
            "type": "string",
            "description": "ApplicationVersion ID",
            "minLength": 36,
            "maxLength": 36
          }
        },
        "required": [
          "created_at",
          "created_by",
          "id",
          "parallelism",
          "status",
          "version_id"
        ]
      },
      "ServiceFlinkUpdateApplicationRequestBody": {
        "type": "object",
        "description": "ServiceFlinkUpdateApplicationRequestBody",
        "properties": {
          "name": {
            "type": "string",
            "description": "Application name",
            "maxLength": 128
          }
        },
        "required": ["name"]
      },
      "ServiceFlinkUpdateApplicationResponse": {
        "type": "object",
        "description": "ServiceFlinkUpdateApplicationResponse",
        "properties": {
          "application_versions": {
            "type": "array",
            "description": "ApplicationVersions",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "created_at": { "type": "string", "description": "Created at" },
                "created_by": { "type": "string", "description": "Created by" },
                "id": {
                  "type": "string",
                  "description": "ApplicationVersion ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "sinks": {
                  "type": "array",
                  "description": "Sinks",
                  "maxItems": 64,
                  "items": {
                    "type": "object",
                    "properties": {
                      "columns": {
                        "type": "array",
                        "description": "Columns",
                        "maxItems": 256,
                        "items": {
                          "type": "object",
                          "properties": {
                            "data_type": {
                              "type": "string",
                              "description": "The data type of the column",
                              "minLength": 1,
                              "maxLength": 2048
                            },
                            "extras": {
                              "type": "string",
                              "description": "Column extra information",
                              "maxLength": 256
                            },
                            "key": {
                              "type": "string",
                              "description": "The key info of the column",
                              "maxLength": 512
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the column",
                              "minLength": 1,
                              "maxLength": 256
                            },
                            "nullable": {
                              "type": "boolean",
                              "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                            },
                            "watermark": {
                              "type": "string",
                              "description": "Information of the watermark if the column is used for watermark.",
                              "maxLength": 512
                            }
                          },
                          "required": ["data_type", "name", "nullable"]
                        }
                      },
                      "create_table": {
                        "type": "string",
                        "description": "The CREATE TABLE statement",
                        "maxLength": 4096
                      },
                      "integration_id": {
                        "type": "string",
                        "description": "Integration ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "options": {
                        "type": "object",
                        "description": "Option",
                        "properties": {}
                      },
                      "table_id": {
                        "type": "string",
                        "description": "Sink ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "table_name": {
                        "type": "string",
                        "description": "Table name"
                      }
                    },
                    "required": [
                      "columns",
                      "create_table",
                      "options",
                      "table_id",
                      "table_name"
                    ]
                  }
                },
                "sources": {
                  "type": "array",
                  "description": "Sources",
                  "maxItems": 64,
                  "items": {
                    "type": "object",
                    "properties": {
                      "columns": {
                        "type": "array",
                        "description": "Columns",
                        "maxItems": 256,
                        "items": {
                          "type": "object",
                          "properties": {
                            "data_type": {
                              "type": "string",
                              "description": "The data type of the column",
                              "minLength": 1,
                              "maxLength": 2048
                            },
                            "extras": {
                              "type": "string",
                              "description": "Column extra information",
                              "maxLength": 256
                            },
                            "key": {
                              "type": "string",
                              "description": "The key info of the column",
                              "maxLength": 512
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the column",
                              "minLength": 1,
                              "maxLength": 256
                            },
                            "nullable": {
                              "type": "boolean",
                              "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                            },
                            "watermark": {
                              "type": "string",
                              "description": "Information of the watermark if the column is used for watermark.",
                              "maxLength": 512
                            }
                          },
                          "required": ["data_type", "name", "nullable"]
                        }
                      },
                      "create_table": {
                        "type": "string",
                        "description": "The CREATE TABLE statement",
                        "maxLength": 4096
                      },
                      "integration_id": {
                        "type": "string",
                        "description": "Integration ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "options": {
                        "type": "object",
                        "description": "Option",
                        "properties": {}
                      },
                      "table_id": {
                        "type": "string",
                        "description": "Source ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "table_name": {
                        "type": "string",
                        "description": "Table name"
                      }
                    },
                    "required": [
                      "columns",
                      "create_table",
                      "options",
                      "table_id",
                      "table_name"
                    ]
                  }
                },
                "statement": {
                  "type": "string",
                  "description": "Job SQL statement",
                  "maxLength": 50000
                },
                "version": {
                  "type": "integer",
                  "description": "Version number"
                }
              },
              "required": [
                "created_at",
                "created_by",
                "id",
                "sinks",
                "sources",
                "statement",
                "version"
              ]
            }
          },
          "created_at": { "type": "string", "description": "Created at" },
          "created_by": { "type": "string", "description": "Created by" },
          "current_deployment": {
            "type": "object",
            "description": "Flink ApplicationDeployment",
            "properties": {
              "created_at": { "type": "string", "description": "Created at" },
              "created_by": { "type": "string", "description": "Created by" },
              "error_msg": {
                "type": "string",
                "description": "Deployment error"
              },
              "id": {
                "type": "string",
                "description": "Deployment ID",
                "minLength": 36,
                "maxLength": 36
              },
              "job_id": {
                "type": "string",
                "description": "Job ID",
                "minLength": 1,
                "maxLength": 128
              },
              "last_savepoint": {
                "type": "string",
                "description": "Job savepoint",
                "minLength": 1,
                "maxLength": 2048
              },
              "parallelism": {
                "type": "integer",
                "description": "Flink Job parallelism",
                "minimum": 1,
                "maximum": 128
              },
              "restart_enabled": {
                "type": "boolean",
                "description": "Specifies whether a Flink Job is restarted in case it fails"
              },
              "starting_savepoint": {
                "type": "string",
                "description": "Job savepoint",
                "minLength": 1,
                "maxLength": 2048
              },
              "status": {
                "type": "string",
                "description": "Deployment status",
                "enum": [
                  "INITIALIZING",
                  "CREATED",
                  "RUNNING",
                  "FAILING",
                  "FAILED",
                  "SAVING",
                  "CANCELLING_REQUESTED",
                  "CANCELLING",
                  "CANCELED",
                  "SAVING_AND_STOP_REQUESTED",
                  "SAVING_AND_STOP",
                  "FINISHED",
                  "RESTARTING",
                  "SUSPENDED",
                  "DELETE_REQUESTED",
                  "DELETING",
                  "RECONCILING"
                ]
              },
              "version_id": {
                "type": "string",
                "description": "ApplicationVersion ID",
                "minLength": 36,
                "maxLength": 36
              }
            },
            "required": [
              "created_at",
              "created_by",
              "id",
              "parallelism",
              "restart_enabled",
              "status",
              "version_id"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "id": {
            "type": "string",
            "description": "Application ID",
            "minLength": 36,
            "maxLength": 36
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "name": {
            "type": "string",
            "description": "Application name",
            "maxLength": 128
          },
          "updated_at": { "type": "string", "description": "Updated at" },
          "updated_by": { "type": "string", "description": "Updated by" }
        },
        "required": [
          "application_versions",
          "created_at",
          "created_by",
          "id",
          "name",
          "updated_at",
          "updated_by"
        ]
      },
      "ServiceFlinkUpdateJarApplicationRequestBody": {
        "type": "object",
        "description": "ServiceFlinkUpdateJarApplicationRequestBody",
        "properties": {
          "name": {
            "type": "string",
            "description": "Application name",
            "maxLength": 128
          }
        },
        "required": ["name"]
      },
      "ServiceFlinkUpdateJarApplicationResponse": {
        "type": "object",
        "description": "ServiceFlinkUpdateJarApplicationResponse",
        "properties": {
          "application_versions": {
            "type": "array",
            "description": "JarApplicationVersions",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "created_at": { "type": "string", "description": "Created at" },
                "created_by": { "type": "string", "description": "Created by" },
                "file_info": {
                  "type": "object",
                  "description": "Flink JarApplicationVersion FileInfo",
                  "properties": {
                    "file_sha256": {
                      "type": "string",
                      "description": "sha256 of the file if known",
                      "minLength": 64,
                      "maxLength": 64
                    },
                    "file_size": {
                      "type": "integer",
                      "description": "The size of the file in bytes"
                    },
                    "file_status": {
                      "type": "string",
                      "description": "File status",
                      "enum": ["INITIAL", "READY", "FAILED"]
                    },
                    "url": {
                      "type": "string",
                      "description": "AWS s3 pre-signed url",
                      "minLength": 1,
                      "maxLength": 50000
                    },
                    "verify_error_code": {
                      "type": "integer",
                      "description": "Verify error code",
                      "enum": ["1", "2", "3"]
                    },
                    "verify_error_message": {
                      "type": "string",
                      "description": "Verify error message",
                      "minLength": 16,
                      "maxLength": 512
                    }
                  }
                },
                "id": {
                  "type": "string",
                  "description": "ApplicationVersion ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "version": {
                  "type": "integer",
                  "description": "Version number"
                }
              },
              "required": ["created_at", "created_by", "id", "version"]
            }
          },
          "created_at": { "type": "string", "description": "Created at" },
          "created_by": { "type": "string", "description": "Created by" },
          "current_deployment": {
            "type": "object",
            "description": "Flink JarApplicationDeployment",
            "properties": {
              "created_at": { "type": "string", "description": "Created at" },
              "created_by": { "type": "string", "description": "Created by" },
              "entry_class": {
                "type": "string",
                "description": "Entry class",
                "minLength": 1,
                "maxLength": 128
              },
              "error_msg": {
                "type": "string",
                "description": "Deployment error"
              },
              "id": {
                "type": "string",
                "description": "Deployment ID",
                "minLength": 36,
                "maxLength": 36
              },
              "job_id": {
                "type": "string",
                "description": "Job ID",
                "minLength": 1,
                "maxLength": 128
              },
              "last_savepoint": {
                "type": "string",
                "description": "Job savepoint",
                "minLength": 1,
                "maxLength": 2048
              },
              "parallelism": {
                "type": "integer",
                "description": "Flink Job parallelism",
                "minimum": 1,
                "maximum": 128
              },
              "program_args": {
                "type": "array",
                "description": "Program arguments\n\nArguments to pass during Flink job submission through the programArgsList parameter",
                "maxItems": 32,
                "items": { "type": "string" }
              },
              "starting_savepoint": {
                "type": "string",
                "description": "Job savepoint",
                "minLength": 1,
                "maxLength": 2048
              },
              "status": {
                "type": "string",
                "description": "Deployment status",
                "enum": [
                  "INITIALIZING",
                  "CREATED",
                  "RUNNING",
                  "FAILING",
                  "FAILED",
                  "SAVING",
                  "CANCELLING_REQUESTED",
                  "CANCELLING",
                  "CANCELED",
                  "SAVING_AND_STOP_REQUESTED",
                  "SAVING_AND_STOP",
                  "FINISHED",
                  "RESTARTING",
                  "SUSPENDED",
                  "DELETE_REQUESTED",
                  "DELETING",
                  "RECONCILING"
                ]
              },
              "version_id": {
                "type": "string",
                "description": "ApplicationVersion ID",
                "minLength": 36,
                "maxLength": 36
              }
            },
            "required": [
              "created_at",
              "created_by",
              "id",
              "parallelism",
              "status",
              "version_id"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "id": {
            "type": "string",
            "description": "Application ID",
            "minLength": 36,
            "maxLength": 36
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "name": {
            "type": "string",
            "description": "Application name",
            "maxLength": 128
          },
          "updated_at": { "type": "string", "description": "Updated at" },
          "updated_by": { "type": "string", "description": "Updated by" }
        },
        "required": [
          "application_versions",
          "created_at",
          "created_by",
          "id",
          "name",
          "updated_at",
          "updated_by"
        ]
      },
      "ServiceFlinkValidateApplicationVersionRequestBody": {
        "type": "object",
        "description": "ServiceFlinkValidateApplicationVersionRequestBody",
        "properties": {
          "sinks": {
            "type": "array",
            "description": "Sinks",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "create_table": {
                  "type": "string",
                  "description": "The CREATE TABLE statement",
                  "maxLength": 4096
                },
                "integration_id": {
                  "type": "string",
                  "description": "Integration ID",
                  "minLength": 36,
                  "maxLength": 36
                }
              },
              "required": ["create_table"]
            }
          },
          "sources": {
            "type": "array",
            "description": "Sources",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "create_table": {
                  "type": "string",
                  "description": "The CREATE TABLE statement",
                  "maxLength": 4096
                },
                "integration_id": {
                  "type": "string",
                  "description": "Integration ID",
                  "minLength": 36,
                  "maxLength": 36
                }
              },
              "required": ["create_table"]
            }
          },
          "statement": {
            "type": "string",
            "description": "Job SQL statement",
            "maxLength": 50000
          }
        },
        "required": ["sinks", "sources"]
      },
      "ServiceFlinkValidateApplicationVersionResponse": {
        "type": "object",
        "description": "ServiceFlinkValidateApplicationVersionResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "sinks": {
            "type": "array",
            "description": "Sinks and sink validation errors",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "columns": {
                  "type": "array",
                  "description": "Columns",
                  "maxItems": 256,
                  "items": {
                    "type": "object",
                    "properties": {
                      "data_type": {
                        "type": "string",
                        "description": "The data type of the column",
                        "minLength": 1,
                        "maxLength": 2048
                      },
                      "extras": {
                        "type": "string",
                        "description": "Column extra information",
                        "maxLength": 256
                      },
                      "key": {
                        "type": "string",
                        "description": "The key info of the column",
                        "maxLength": 512
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the column",
                        "minLength": 1,
                        "maxLength": 256
                      },
                      "nullable": {
                        "type": "boolean",
                        "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                      },
                      "watermark": {
                        "type": "string",
                        "description": "Information of the watermark if the column is used for watermark.",
                        "maxLength": 512
                      }
                    },
                    "required": ["data_type", "name", "nullable"]
                  }
                },
                "create_table": {
                  "type": "string",
                  "description": "The CREATE TABLE statement",
                  "maxLength": 4096
                },
                "integration_id": {
                  "type": "string",
                  "description": "Integration ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "message": {
                  "type": "string",
                  "description": "The error message."
                },
                "options": {
                  "type": "object",
                  "description": "Option",
                  "properties": {}
                },
                "position": {
                  "type": "object",
                  "description": "Error position in the SQL.",
                  "properties": {
                    "character_number": {
                      "type": "integer",
                      "description": "Character number of where the error starts, starting from 1."
                    },
                    "end_character_number": {
                      "type": "integer",
                      "description": "Character number of where the error starts, starting from 1."
                    },
                    "end_line_number": {
                      "type": "integer",
                      "description": "Line number of where the error ends, starting from 1."
                    },
                    "line_number": {
                      "type": "integer",
                      "description": "Line number of where the error starts, starting from 1."
                    }
                  },
                  "required": [
                    "character_number",
                    "end_character_number",
                    "end_line_number",
                    "line_number"
                  ]
                },
                "table_name": { "type": "string", "description": "Table name" }
              },
              "required": ["create_table"]
            }
          },
          "sources": {
            "type": "array",
            "description": "Sources and source validation errors",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "columns": {
                  "type": "array",
                  "description": "Columns",
                  "maxItems": 256,
                  "items": {
                    "type": "object",
                    "properties": {
                      "data_type": {
                        "type": "string",
                        "description": "The data type of the column",
                        "minLength": 1,
                        "maxLength": 2048
                      },
                      "extras": {
                        "type": "string",
                        "description": "Column extra information",
                        "maxLength": 256
                      },
                      "key": {
                        "type": "string",
                        "description": "The key info of the column",
                        "maxLength": 512
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the column",
                        "minLength": 1,
                        "maxLength": 256
                      },
                      "nullable": {
                        "type": "boolean",
                        "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                      },
                      "watermark": {
                        "type": "string",
                        "description": "Information of the watermark if the column is used for watermark.",
                        "maxLength": 512
                      }
                    },
                    "required": ["data_type", "name", "nullable"]
                  }
                },
                "create_table": {
                  "type": "string",
                  "description": "The CREATE TABLE statement",
                  "maxLength": 4096
                },
                "integration_id": {
                  "type": "string",
                  "description": "Integration ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "message": {
                  "type": "string",
                  "description": "The error message."
                },
                "options": {
                  "type": "object",
                  "description": "Option",
                  "properties": {}
                },
                "position": {
                  "type": "object",
                  "description": "Error position in the SQL.",
                  "properties": {
                    "character_number": {
                      "type": "integer",
                      "description": "Character number of where the error starts, starting from 1."
                    },
                    "end_character_number": {
                      "type": "integer",
                      "description": "Character number of where the error starts, starting from 1."
                    },
                    "end_line_number": {
                      "type": "integer",
                      "description": "Line number of where the error ends, starting from 1."
                    },
                    "line_number": {
                      "type": "integer",
                      "description": "Line number of where the error starts, starting from 1."
                    }
                  },
                  "required": [
                    "character_number",
                    "end_character_number",
                    "end_line_number",
                    "line_number"
                  ]
                },
                "table_name": { "type": "string", "description": "Table name" }
              },
              "required": ["create_table"]
            }
          },
          "statement": {
            "type": "string",
            "description": "Job SQL statement",
            "maxLength": 50000
          },
          "statement_error": {
            "type": "object",
            "description": "Job validation error",
            "properties": {
              "message": {
                "type": "string",
                "description": "The error message."
              },
              "position": {
                "type": "object",
                "description": "Error position in the SQL.",
                "properties": {
                  "character_number": {
                    "type": "integer",
                    "description": "Character number of where the error starts, starting from 1."
                  },
                  "end_character_number": {
                    "type": "integer",
                    "description": "Character number of where the error starts, starting from 1."
                  },
                  "end_line_number": {
                    "type": "integer",
                    "description": "Line number of where the error ends, starting from 1."
                  },
                  "line_number": {
                    "type": "integer",
                    "description": "Line number of where the error starts, starting from 1."
                  }
                },
                "required": [
                  "character_number",
                  "end_character_number",
                  "end_line_number",
                  "line_number"
                ]
              }
            },
            "required": ["message"]
          }
        },
        "required": ["sinks", "sources"]
      },
      "ServiceKafkaAclAddRequestBody": {
        "type": "object",
        "description": "ServiceKafkaAclAddRequestBody",
        "properties": {
          "permission": {
            "type": "string",
            "description": "Kafka permission",
            "enum": ["admin", "read", "readwrite", "write"]
          },
          "topic": {
            "type": "string",
            "description": "Topic name pattern",
            "minLength": 1,
            "maxLength": 249
          },
          "username": {
            "type": "string",
            "description": "Username",
            "minLength": 1,
            "maxLength": 64
          }
        },
        "required": ["permission", "topic", "username"]
      },
      "ServiceKafkaAclAddResponse": {
        "type": "object",
        "description": "ServiceKafkaAclAddResponse",
        "properties": {
          "acl": {
            "type": "array",
            "description": "List of Aiven ACL entries for Kafka service",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "ID",
                  "maxLength": 40
                },
                "permission": {
                  "type": "string",
                  "description": "Kafka permission",
                  "enum": ["admin", "read", "readwrite", "write"]
                },
                "topic": {
                  "type": "string",
                  "description": "Topic name pattern",
                  "minLength": 1,
                  "maxLength": 249
                },
                "username": {
                  "type": "string",
                  "description": "Username",
                  "minLength": 1,
                  "maxLength": 64
                }
              },
              "required": ["permission", "topic", "username"]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["acl"]
      },
      "ServiceKafkaAclDeleteResponse": {
        "type": "object",
        "description": "ServiceKafkaAclDeleteResponse",
        "properties": {
          "acl": {
            "type": "array",
            "description": "List of Aiven ACL entries for Kafka service",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "ID",
                  "maxLength": 40
                },
                "permission": {
                  "type": "string",
                  "description": "Kafka permission",
                  "enum": ["admin", "read", "readwrite", "write"]
                },
                "topic": {
                  "type": "string",
                  "description": "Topic name pattern",
                  "minLength": 1,
                  "maxLength": 249
                },
                "username": {
                  "type": "string",
                  "description": "Username",
                  "minLength": 1,
                  "maxLength": 64
                }
              },
              "required": ["permission", "topic", "username"]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["acl"]
      },
      "ServiceKafkaAclListResponse": {
        "type": "object",
        "description": "ServiceKafkaAclListResponse",
        "properties": {
          "acl": {
            "type": "array",
            "description": "List of Aiven ACL entries for Kafka service",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "ID",
                  "maxLength": 40
                },
                "permission": {
                  "type": "string",
                  "description": "Kafka permission",
                  "enum": ["admin", "read", "readwrite", "write"]
                },
                "topic": {
                  "type": "string",
                  "description": "Topic name pattern",
                  "minLength": 1,
                  "maxLength": 249
                },
                "username": {
                  "type": "string",
                  "description": "Username",
                  "minLength": 1,
                  "maxLength": 64
                }
              },
              "required": ["permission", "topic", "username"]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["acl"]
      },
      "ServiceKafkaConnectCreateConnectorRequestBody": {
        "type": "object",
        "description": "ServiceKafkaConnectCreateConnectorRequestBody",
        "properties": {
          "connector.class": {
            "type": "string",
            "description": "The Java class for the connector",
            "maxLength": 1024
          },
          "name": {
            "type": "string",
            "description": "Unique name for the connector",
            "maxLength": 1024
          }
        },
        "required": ["connector.class", "name"]
      },
      "ServiceKafkaConnectCreateConnectorResponse": {
        "type": "object",
        "description": "ServiceKafkaConnectCreateConnectorResponse",
        "properties": {
          "connector": {
            "type": "object",
            "description": "Kafka connector information",
            "properties": {
              "config": {
                "type": "object",
                "description": "Connector configuration parameters",
                "properties": {
                  "connector.class": {
                    "type": "string",
                    "description": "The Java class for the connector",
                    "maxLength": 1024
                  },
                  "name": {
                    "type": "string",
                    "description": "Unique name for the connector",
                    "maxLength": 1024
                  }
                },
                "required": ["connector.class", "name"]
              },
              "name": {
                "type": "string",
                "description": "Connector name",
                "maxLength": 1024
              },
              "plugin": {
                "type": "object",
                "description": "Kafka Connector plugin information",
                "properties": {
                  "author": {
                    "type": "string",
                    "description": "Connector author name"
                  },
                  "available_versions": {
                    "type": "array",
                    "description": "Versions available on the service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "deprecated": {
                          "type": "boolean",
                          "description": "If the version is deprecated."
                        },
                        "needs_maintenance": {
                          "type": "boolean",
                          "description": "Using this version requires a maintenance update."
                        },
                        "version": {
                          "type": "string",
                          "description": "Connector version number"
                        }
                      }
                    }
                  },
                  "class": {
                    "type": "string",
                    "description": "Connector class name"
                  },
                  "docURL": {
                    "type": "string",
                    "description": "Connector documentation URL"
                  },
                  "plugin_name": {
                    "type": "string",
                    "description": "Connector plugin name"
                  },
                  "preview": {
                    "type": "boolean",
                    "description": "Describes if connector is in beta"
                  },
                  "preview_info": {
                    "type": "string",
                    "description": "Information about beta stage of connector"
                  },
                  "title": {
                    "type": "string",
                    "description": "Descriptive human readable name defined by Aiven"
                  },
                  "type": {
                    "type": "string",
                    "description": "Describes whether data flows from or to Kafka",
                    "enum": ["sink", "source", "unknown"]
                  },
                  "version": {
                    "type": "string",
                    "description": "Connector version number"
                  }
                },
                "required": [
                  "author",
                  "class",
                  "docURL",
                  "title",
                  "type",
                  "version"
                ]
              },
              "tasks": {
                "type": "array",
                "description": "List of tasks of a connector",
                "items": {
                  "type": "object",
                  "properties": {
                    "connector": {
                      "type": "string",
                      "description": "Related connector name"
                    },
                    "task": {
                      "type": "integer",
                      "description": "Task id / number"
                    }
                  },
                  "required": ["connector", "task"]
                }
              }
            },
            "required": ["config", "name", "plugin", "tasks"]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["connector"]
      },
      "ServiceKafkaConnectDeleteConnectorResponse": {
        "type": "object",
        "description": "ServiceKafkaConnectDeleteConnectorResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceKafkaConnectEditConnectorRequestBody": {
        "type": "object",
        "description": "ServiceKafkaConnectEditConnectorRequestBody",
        "properties": {
          "connector.class": {
            "type": "string",
            "description": "The Java class for the connector",
            "maxLength": 1024
          },
          "name": {
            "type": "string",
            "description": "Unique name for the connector",
            "maxLength": 1024
          }
        },
        "required": ["connector.class", "name"]
      },
      "ServiceKafkaConnectEditConnectorResponse": {
        "type": "object",
        "description": "ServiceKafkaConnectEditConnectorResponse",
        "properties": {
          "connector": {
            "type": "object",
            "description": "Kafka connector information",
            "properties": {
              "config": {
                "type": "object",
                "description": "Connector configuration parameters",
                "properties": {
                  "connector.class": {
                    "type": "string",
                    "description": "The Java class for the connector",
                    "maxLength": 1024
                  },
                  "name": {
                    "type": "string",
                    "description": "Unique name for the connector",
                    "maxLength": 1024
                  }
                },
                "required": ["connector.class", "name"]
              },
              "name": {
                "type": "string",
                "description": "Connector name",
                "maxLength": 1024
              },
              "plugin": {
                "type": "object",
                "description": "Kafka Connector plugin information",
                "properties": {
                  "author": {
                    "type": "string",
                    "description": "Connector author name"
                  },
                  "available_versions": {
                    "type": "array",
                    "description": "Versions available on the service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "deprecated": {
                          "type": "boolean",
                          "description": "If the version is deprecated."
                        },
                        "needs_maintenance": {
                          "type": "boolean",
                          "description": "Using this version requires a maintenance update."
                        },
                        "version": {
                          "type": "string",
                          "description": "Connector version number"
                        }
                      }
                    }
                  },
                  "class": {
                    "type": "string",
                    "description": "Connector class name"
                  },
                  "docURL": {
                    "type": "string",
                    "description": "Connector documentation URL"
                  },
                  "plugin_name": {
                    "type": "string",
                    "description": "Connector plugin name"
                  },
                  "preview": {
                    "type": "boolean",
                    "description": "Describes if connector is in beta"
                  },
                  "preview_info": {
                    "type": "string",
                    "description": "Information about beta stage of connector"
                  },
                  "title": {
                    "type": "string",
                    "description": "Descriptive human readable name defined by Aiven"
                  },
                  "type": {
                    "type": "string",
                    "description": "Describes whether data flows from or to Kafka",
                    "enum": ["sink", "source", "unknown"]
                  },
                  "version": {
                    "type": "string",
                    "description": "Connector version number"
                  }
                },
                "required": [
                  "author",
                  "class",
                  "docURL",
                  "title",
                  "type",
                  "version"
                ]
              },
              "tasks": {
                "type": "array",
                "description": "List of tasks of a connector",
                "items": {
                  "type": "object",
                  "properties": {
                    "connector": {
                      "type": "string",
                      "description": "Related connector name"
                    },
                    "task": {
                      "type": "integer",
                      "description": "Task id / number"
                    }
                  },
                  "required": ["connector", "task"]
                }
              }
            },
            "required": ["config", "name", "plugin", "tasks"]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["connector"]
      },
      "ServiceKafkaConnectGetAvailableConnectorsResponse": {
        "type": "object",
        "description": "ServiceKafkaConnectGetAvailableConnectorsResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "plugins": {
            "type": "array",
            "description": "List of available Kafka Connect connector plugins",
            "items": {
              "type": "object",
              "properties": {
                "author": {
                  "type": "string",
                  "description": "Connector author name"
                },
                "available_versions": {
                  "type": "array",
                  "description": "Versions available on the service",
                  "items": {
                    "type": "object",
                    "properties": {
                      "deprecated": {
                        "type": "boolean",
                        "description": "If the version is deprecated."
                      },
                      "needs_maintenance": {
                        "type": "boolean",
                        "description": "Using this version requires a maintenance update."
                      },
                      "version": {
                        "type": "string",
                        "description": "Connector version number"
                      }
                    }
                  }
                },
                "class": {
                  "type": "string",
                  "description": "Connector class name"
                },
                "docURL": {
                  "type": "string",
                  "description": "Connector documentation URL"
                },
                "plugin_name": {
                  "type": "string",
                  "description": "Connector plugin name"
                },
                "preview": {
                  "type": "boolean",
                  "description": "Describes if connector is in beta"
                },
                "preview_info": {
                  "type": "string",
                  "description": "Information about beta stage of connector"
                },
                "title": {
                  "type": "string",
                  "description": "Descriptive human readable name defined by Aiven"
                },
                "type": {
                  "type": "string",
                  "description": "Describes whether data flows from or to Kafka",
                  "enum": ["sink", "source", "unknown"]
                },
                "version": {
                  "type": "string",
                  "description": "Connector version number"
                }
              },
              "required": [
                "author",
                "class",
                "docURL",
                "title",
                "type",
                "version"
              ]
            }
          }
        },
        "required": ["plugins"]
      },
      "ServiceKafkaConnectGetConnectorConfigurationResponse": {
        "type": "object",
        "description": "ServiceKafkaConnectGetConnectorConfigurationResponse",
        "properties": {
          "configuration_schema": {
            "type": "array",
            "description": "List of connector configuration field definitions",
            "items": {
              "type": "object",
              "properties": {
                "default_value": {
                  "type": "string",
                  "description": "Default value to be set if field omitted in configuration"
                },
                "display_name": {
                  "type": "string",
                  "description": "Human friendly name of the field"
                },
                "documentation": {
                  "type": "string",
                  "description": "Assisting help text"
                },
                "group": {
                  "type": "string",
                  "description": "Name of the field group to which the field belongs to"
                },
                "importance": {
                  "type": "string",
                  "description": "How important is the field",
                  "enum": ["LOW", "MEDIUM", "HIGH"]
                },
                "name": {
                  "type": "string",
                  "description": "Machine friendly name of the field"
                },
                "order": {
                  "type": "integer",
                  "description": "Position of the field in the configuration form"
                },
                "required": {
                  "type": "boolean",
                  "description": "Defines if the field value is mandatory or not"
                },
                "type": {
                  "type": "string",
                  "description": "Configuration value type",
                  "enum": [
                    "STRING",
                    "INT",
                    "SHORT",
                    "LONG",
                    "DOUBLE",
                    "BOOLEAN",
                    "LIST",
                    "CLASS",
                    "PASSWORD"
                  ]
                },
                "width": {
                  "type": "string",
                  "description": "Expected length of the input value",
                  "enum": ["NONE", "SHORT", "MEDIUM", "LONG"]
                }
              },
              "required": [
                "default_value",
                "display_name",
                "documentation",
                "group",
                "importance",
                "name",
                "order",
                "required",
                "type",
                "width"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["configuration_schema"]
      },
      "ServiceKafkaConnectGetConnectorStatusResponse": {
        "type": "object",
        "description": "ServiceKafkaConnectGetConnectorStatusResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "status": {
            "type": "object",
            "description": "Connector status information",
            "properties": {
              "state": {
                "type": "string",
                "description": "Current status of the connector",
                "enum": ["FAILED", "PAUSED", "RUNNING", "UNASSIGNED"]
              },
              "tasks": {
                "type": "array",
                "description": "List of tasks currently running for the connector",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "Task identifier"
                    },
                    "state": {
                      "type": "string",
                      "description": "Current status of the task",
                      "enum": ["FAILED", "PAUSED", "RUNNING", "UNASSIGNED"]
                    },
                    "trace": {
                      "type": "string",
                      "description": "Task error information"
                    }
                  },
                  "required": ["id", "state", "trace"]
                }
              }
            },
            "required": ["state", "tasks"]
          }
        },
        "required": ["status"]
      },
      "ServiceKafkaConnectListResponse": {
        "type": "object",
        "description": "ServiceKafkaConnectListResponse",
        "properties": {
          "connectors": {
            "type": "array",
            "description": "List of active Kafka Connect connectors",
            "items": {
              "type": "object",
              "properties": {
                "config": {
                  "type": "object",
                  "description": "Connector configuration parameters",
                  "properties": {
                    "connector.class": {
                      "type": "string",
                      "description": "The Java class for the connector",
                      "maxLength": 1024
                    },
                    "name": {
                      "type": "string",
                      "description": "Unique name for the connector",
                      "maxLength": 1024
                    }
                  },
                  "required": ["connector.class", "name"]
                },
                "name": {
                  "type": "string",
                  "description": "Connector name",
                  "maxLength": 1024
                },
                "plugin": {
                  "type": "object",
                  "description": "Kafka Connector plugin information",
                  "properties": {
                    "author": {
                      "type": "string",
                      "description": "Connector author name"
                    },
                    "available_versions": {
                      "type": "array",
                      "description": "Versions available on the service",
                      "items": {
                        "type": "object",
                        "properties": {
                          "deprecated": {
                            "type": "boolean",
                            "description": "If the version is deprecated."
                          },
                          "needs_maintenance": {
                            "type": "boolean",
                            "description": "Using this version requires a maintenance update."
                          },
                          "version": {
                            "type": "string",
                            "description": "Connector version number"
                          }
                        }
                      }
                    },
                    "class": {
                      "type": "string",
                      "description": "Connector class name"
                    },
                    "docURL": {
                      "type": "string",
                      "description": "Connector documentation URL"
                    },
                    "plugin_name": {
                      "type": "string",
                      "description": "Connector plugin name"
                    },
                    "preview": {
                      "type": "boolean",
                      "description": "Describes if connector is in beta"
                    },
                    "preview_info": {
                      "type": "string",
                      "description": "Information about beta stage of connector"
                    },
                    "title": {
                      "type": "string",
                      "description": "Descriptive human readable name defined by Aiven"
                    },
                    "type": {
                      "type": "string",
                      "description": "Describes whether data flows from or to Kafka",
                      "enum": ["sink", "source", "unknown"]
                    },
                    "version": {
                      "type": "string",
                      "description": "Connector version number"
                    }
                  },
                  "required": [
                    "author",
                    "class",
                    "docURL",
                    "title",
                    "type",
                    "version"
                  ]
                },
                "tasks": {
                  "type": "array",
                  "description": "List of tasks of a connector",
                  "items": {
                    "type": "object",
                    "properties": {
                      "connector": {
                        "type": "string",
                        "description": "Related connector name"
                      },
                      "task": {
                        "type": "integer",
                        "description": "Task id / number"
                      }
                    },
                    "required": ["connector", "task"]
                  }
                }
              },
              "required": ["config", "name", "plugin", "tasks"]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["connectors"]
      },
      "ServiceKafkaConnectPauseConnectorResponse": {
        "type": "object",
        "description": "ServiceKafkaConnectPauseConnectorResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceKafkaConnectRestartConnectorResponse": {
        "type": "object",
        "description": "ServiceKafkaConnectRestartConnectorResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceKafkaConnectRestartConnectorTaskResponse": {
        "type": "object",
        "description": "ServiceKafkaConnectRestartConnectorTaskResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceKafkaConnectResumeConnectorResponse": {
        "type": "object",
        "description": "ServiceKafkaConnectResumeConnectorResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceKafkaNativeAclAddRequestBody": {
        "type": "object",
        "description": "ServiceKafkaNativeAclAddRequestBody",
        "properties": {
          "host": {
            "type": "string",
            "description": "the host or * for all hosts",
            "minLength": 0,
            "maxLength": 256
          },
          "operation": {
            "type": "string",
            "description": "Kafka ACL operation represents an operation which an ACL grants or denies permission to perform",
            "enum": [
              "All",
              "Alter",
              "AlterConfigs",
              "ClusterAction",
              "Create",
              "CreateTokens",
              "Delete",
              "Describe",
              "DescribeConfigs",
              "DescribeTokens",
              "IdempotentWrite",
              "Read",
              "Write"
            ]
          },
          "pattern_type": {
            "type": "string",
            "description": "Kafka ACL pattern type of resource name",
            "enum": ["LITERAL", "PREFIXED"]
          },
          "permission_type": {
            "type": "string",
            "description": "Kafka ACL permission type",
            "enum": ["ALLOW", "DENY"]
          },
          "principal": {
            "type": "string",
            "description": "principal is in 'PrincipalType:name' format",
            "minLength": 0,
            "maxLength": 256
          },
          "resource_name": {
            "type": "string",
            "description": "Resource pattern used to match specified resources",
            "minLength": 0,
            "maxLength": 256
          },
          "resource_type": {
            "type": "string",
            "description": "Kafka ACL resource type represents a type of resource which an ACL can be applied to",
            "enum": [
              "Cluster",
              "DelegationToken",
              "Group",
              "Topic",
              "TransactionalId",
              "User"
            ]
          }
        },
        "required": [
          "operation",
          "pattern_type",
          "permission_type",
          "principal",
          "resource_name",
          "resource_type"
        ]
      },
      "ServiceKafkaNativeAclAddResponse": {
        "type": "object",
        "description": "ServiceKafkaNativeAclAddResponse",
        "properties": {
          "acl": {
            "type": "object",
            "description": "Kafka-native ACL entry for Kafka service",
            "properties": {
              "host": {
                "type": "string",
                "description": "the host or * for all hosts",
                "minLength": 0,
                "maxLength": 256
              },
              "id": { "type": "string", "description": "ID", "maxLength": 40 },
              "operation": {
                "type": "string",
                "description": "Kafka ACL operation represents an operation which an ACL grants or denies permission to perform",
                "enum": [
                  "All",
                  "Alter",
                  "AlterConfigs",
                  "ClusterAction",
                  "Create",
                  "CreateTokens",
                  "Delete",
                  "Describe",
                  "DescribeConfigs",
                  "DescribeTokens",
                  "IdempotentWrite",
                  "Read",
                  "Write"
                ]
              },
              "pattern_type": {
                "type": "string",
                "description": "Kafka ACL pattern type of resource name",
                "enum": ["LITERAL", "PREFIXED"]
              },
              "permission_type": {
                "type": "string",
                "description": "Kafka ACL permission type",
                "enum": ["ALLOW", "DENY"]
              },
              "principal": {
                "type": "string",
                "description": "principal is in 'principalType:name' format",
                "minLength": 0,
                "maxLength": 256
              },
              "resource_name": {
                "type": "string",
                "description": "Resource pattern used to match specified resources",
                "minLength": 0,
                "maxLength": 256
              },
              "resource_type": {
                "type": "string",
                "description": "Kafka ACL resource type represents a type of resource which an ACL can be applied to",
                "enum": [
                  "Cluster",
                  "DelegationToken",
                  "Group",
                  "Topic",
                  "TransactionalId",
                  "User"
                ]
              }
            },
            "required": [
              "host",
              "id",
              "operation",
              "pattern_type",
              "permission_type",
              "principal",
              "resource_name",
              "resource_type"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["acl"]
      },
      "ServiceKafkaNativeAclDeleteResponse": {
        "type": "object",
        "description": "ServiceKafkaNativeAclDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceKafkaNativeAclGetResponse": {
        "type": "object",
        "description": "ServiceKafkaNativeAclGetResponse",
        "properties": {
          "acl": {
            "type": "object",
            "description": "Kafka-native ACL entry for Kafka service",
            "properties": {
              "host": {
                "type": "string",
                "description": "the host or * for all hosts",
                "minLength": 0,
                "maxLength": 256
              },
              "id": { "type": "string", "description": "ID", "maxLength": 40 },
              "operation": {
                "type": "string",
                "description": "Kafka ACL operation represents an operation which an ACL grants or denies permission to perform",
                "enum": [
                  "All",
                  "Alter",
                  "AlterConfigs",
                  "ClusterAction",
                  "Create",
                  "CreateTokens",
                  "Delete",
                  "Describe",
                  "DescribeConfigs",
                  "DescribeTokens",
                  "IdempotentWrite",
                  "Read",
                  "Write"
                ]
              },
              "pattern_type": {
                "type": "string",
                "description": "Kafka ACL pattern type of resource name",
                "enum": ["LITERAL", "PREFIXED"]
              },
              "permission_type": {
                "type": "string",
                "description": "Kafka ACL permission type",
                "enum": ["ALLOW", "DENY"]
              },
              "principal": {
                "type": "string",
                "description": "principal is in 'principalType:name' format",
                "minLength": 0,
                "maxLength": 256
              },
              "resource_name": {
                "type": "string",
                "description": "Resource pattern used to match specified resources",
                "minLength": 0,
                "maxLength": 256
              },
              "resource_type": {
                "type": "string",
                "description": "Kafka ACL resource type represents a type of resource which an ACL can be applied to",
                "enum": [
                  "Cluster",
                  "DelegationToken",
                  "Group",
                  "Topic",
                  "TransactionalId",
                  "User"
                ]
              }
            },
            "required": [
              "host",
              "id",
              "operation",
              "pattern_type",
              "permission_type",
              "principal",
              "resource_name",
              "resource_type"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["acl"]
      },
      "ServiceKafkaNativeAclListResponse": {
        "type": "object",
        "description": "ServiceKafkaNativeAclListResponse",
        "properties": {
          "acl": {
            "type": "array",
            "description": "List of Aiven ACL entries for Kafka service",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "ID",
                  "maxLength": 40
                },
                "permission": {
                  "type": "string",
                  "description": "Kafka permission",
                  "enum": ["admin", "read", "readwrite", "write"]
                },
                "topic": {
                  "type": "string",
                  "description": "Topic name pattern",
                  "minLength": 1,
                  "maxLength": 249
                },
                "username": {
                  "type": "string",
                  "description": "Username",
                  "minLength": 1,
                  "maxLength": 64
                }
              },
              "required": ["permission", "topic", "username"]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "kafka_acl": {
            "type": "array",
            "description": "List of Kafka-native ACL entries",
            "items": {
              "type": "object",
              "properties": {
                "host": {
                  "type": "string",
                  "description": "the host or * for all hosts",
                  "minLength": 0,
                  "maxLength": 256
                },
                "id": {
                  "type": "string",
                  "description": "ID",
                  "maxLength": 40
                },
                "operation": {
                  "type": "string",
                  "description": "Kafka ACL operation represents an operation which an ACL grants or denies permission to perform",
                  "enum": [
                    "All",
                    "Alter",
                    "AlterConfigs",
                    "ClusterAction",
                    "Create",
                    "CreateTokens",
                    "Delete",
                    "Describe",
                    "DescribeConfigs",
                    "DescribeTokens",
                    "IdempotentWrite",
                    "Read",
                    "Write"
                  ]
                },
                "pattern_type": {
                  "type": "string",
                  "description": "Kafka ACL pattern type of resource name",
                  "enum": ["LITERAL", "PREFIXED"]
                },
                "permission_type": {
                  "type": "string",
                  "description": "Kafka ACL permission type",
                  "enum": ["ALLOW", "DENY"]
                },
                "principal": {
                  "type": "string",
                  "description": "principal is in 'principalType:name' format",
                  "minLength": 0,
                  "maxLength": 256
                },
                "resource_name": {
                  "type": "string",
                  "description": "Resource pattern used to match specified resources",
                  "minLength": 0,
                  "maxLength": 256
                },
                "resource_type": {
                  "type": "string",
                  "description": "Kafka ACL resource type represents a type of resource which an ACL can be applied to",
                  "enum": [
                    "Cluster",
                    "DelegationToken",
                    "Group",
                    "Topic",
                    "TransactionalId",
                    "User"
                  ]
                }
              },
              "required": [
                "host",
                "id",
                "operation",
                "pattern_type",
                "permission_type",
                "principal",
                "resource_name",
                "resource_type"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["acl", "kafka_acl"]
      },
      "ServiceKafkaQuotaCreateRequestBody": {
        "type": "object",
        "description": "ServiceKafkaQuotaCreateRequestBody",
        "properties": {
          "client\\-id": {
            "type": "string",
            "description": "client-id",
            "maxLength": 255
          },
          "consumer_byte_rate": {
            "type": "number",
            "description": "consumer network throttle",
            "minimum": 0,
            "maximum": 1073741824
          },
          "producer_byte_rate": {
            "type": "number",
            "description": "producer network throttle",
            "minimum": 0,
            "maximum": 1073741824
          },
          "request_percentage": {
            "type": "number",
            "description": "cpu percentage throttle",
            "minimum": 0,
            "maximum": 100
          },
          "user": { "type": "string", "description": "user", "maxLength": 64 }
        }
      },
      "ServiceKafkaQuotaCreateResponse": {
        "type": "object",
        "description": "ServiceKafkaQuotaCreateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceKafkaQuotaDeleteResponse": {
        "type": "object",
        "description": "ServiceKafkaQuotaDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceKafkaQuotaDescribeResponse": {
        "type": "object",
        "description": "ServiceKafkaQuotaDescribeResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "quota": {
            "type": "object",
            "description": "kafka quota",
            "properties": {
              "client\\-id": {
                "type": "string",
                "description": "client-id",
                "maxLength": 255
              },
              "consumer_byte_rate": {
                "type": "number",
                "description": "consumer network throttle",
                "minimum": 0,
                "maximum": 1073741824
              },
              "producer_byte_rate": {
                "type": "number",
                "description": "producer network throttle",
                "minimum": 0,
                "maximum": 1073741824
              },
              "request_percentage": {
                "type": "number",
                "description": "cpu percentage throttle",
                "minimum": 0,
                "maximum": 100
              },
              "user": {
                "type": "string",
                "description": "user",
                "maxLength": 64
              }
            },
            "required": [
              "client\\-id",
              "consumer_byte_rate",
              "producer_byte_rate",
              "request_percentage",
              "user"
            ]
          }
        },
        "required": ["quota"]
      },
      "ServiceKafkaQuotaListResponse": {
        "type": "object",
        "description": "ServiceKafkaQuotaListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "quotas": {
            "type": "array",
            "description": "List of kafka quotas",
            "items": {
              "type": "object",
              "properties": {
                "client\\-id": {
                  "type": "string",
                  "description": "client-id",
                  "maxLength": 255
                },
                "consumer_byte_rate": {
                  "type": "number",
                  "description": "consumer network throttle",
                  "minimum": 0,
                  "maximum": 1073741824
                },
                "producer_byte_rate": {
                  "type": "number",
                  "description": "producer network throttle",
                  "minimum": 0,
                  "maximum": 1073741824
                },
                "request_percentage": {
                  "type": "number",
                  "description": "cpu percentage throttle",
                  "minimum": 0,
                  "maximum": 100
                },
                "user": {
                  "type": "string",
                  "description": "user",
                  "maxLength": 64
                }
              },
              "required": [
                "client\\-id",
                "consumer_byte_rate",
                "producer_byte_rate",
                "request_percentage",
                "user"
              ]
            }
          }
        },
        "required": ["quotas"]
      },
      "ServiceKafkaTieredStorageStorageUsageByTopicResponse": {
        "type": "object",
        "description": "ServiceKafkaTieredStorageStorageUsageByTopicResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "storage_usage": {
            "type": "object",
            "description": "Storage usage by tiered storage by topics",
            "properties": {}
          }
        },
        "required": ["storage_usage"]
      },
      "ServiceKafkaTieredStorageStorageUsageTotalResponse": {
        "type": "object",
        "description": "ServiceKafkaTieredStorageStorageUsageTotalResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "total_storage_usage": {
            "type": "integer",
            "description": "Total storage usage by tiered storage, in bytes",
            "minimum": 0
          }
        },
        "required": ["total_storage_usage"]
      },
      "ServiceKafkaTieredStorageSummaryResponse": {
        "type": "object",
        "description": "ServiceKafkaTieredStorageSummaryResponse",
        "properties": {
          "current_cost": {
            "type": "string",
            "description": "The current cost in USD of tiered storage since the beginning of the billing period"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "forecasted_cost": {
            "type": "string",
            "description": "The forecasted cost in USD of tiered storage in the billing period"
          },
          "forecasted_rate": {
            "type": "string",
            "description": "The rate on GBs/hour used to calculate the forecasted cost"
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "storage_usage_history": {
            "type": "object",
            "description": "History of usage and cumulative costs in the billing period",
            "properties": {
              "hourly": {
                "type": "array",
                "description": "History by hour",
                "items": {
                  "type": "object",
                  "properties": {
                    "estimated_cost": {
                      "type": "string",
                      "description": "The estimated cost in USD of tiered storage for this hour"
                    },
                    "hour_start": {
                      "type": "string",
                      "description": "Timestamp in ISO 8601 format, always in UTC",
                      "maxLength": 36
                    },
                    "peak_stored_bytes": {
                      "type": "integer",
                      "description": "Peak bytes stored on object storage at this hour",
                      "minimum": 0
                    }
                  },
                  "required": ["hour_start", "peak_stored_bytes"]
                }
              }
            },
            "required": ["hourly"]
          },
          "total_storage_usage": {
            "type": "integer",
            "description": "Total storage usage by tiered storage, in bytes",
            "minimum": 0
          }
        },
        "required": [
          "current_cost",
          "forecasted_cost",
          "storage_usage_history",
          "total_storage_usage"
        ]
      },
      "ServiceKafkaTopicCreateRequestBody": {
        "type": "object",
        "description": "ServiceKafkaTopicCreateRequestBody",
        "properties": {
          "cleanup_policy": {
            "type": "string",
            "description": "DEPRECATED: use config.cleanup_policy",
            "enum": ["delete", "compact", "compact,delete"]
          },
          "config": {
            "type": "object",
            "description": "Kafka topic configuration",
            "properties": {
              "cleanup_policy": {
                "type": "string",
                "description": "cleanup.policy",
                "enum": ["delete", "compact", "compact,delete"]
              },
              "compression_type": {
                "type": "string",
                "description": "compression.type",
                "enum": [
                  "snappy",
                  "gzip",
                  "lz4",
                  "producer",
                  "uncompressed",
                  "zstd"
                ]
              },
              "delete_retention_ms": {
                "type": "integer",
                "description": "delete.retention.ms",
                "minimum": 0
              },
              "file_delete_delay_ms": {
                "type": "integer",
                "description": "file.delete.delay.ms",
                "minimum": 0
              },
              "flush_messages": {
                "type": "integer",
                "description": "flush.messages",
                "minimum": 0
              },
              "flush_ms": {
                "type": "integer",
                "description": "flush.ms",
                "minimum": 0
              },
              "index_interval_bytes": {
                "type": "integer",
                "description": "index.interval.bytes",
                "minimum": 0
              },
              "local_retention_bytes": {
                "type": "integer",
                "description": "local.retention.bytes"
              },
              "local_retention_ms": {
                "type": "integer",
                "description": "local.retention.ms"
              },
              "max_compaction_lag_ms": {
                "type": "integer",
                "description": "max.compaction.lag.ms",
                "minimum": 0
              },
              "max_message_bytes": {
                "type": "integer",
                "description": "max.message.bytes",
                "minimum": 0
              },
              "message_downconversion_enable": {
                "type": "boolean",
                "description": "message.downconversion.enable"
              },
              "message_format_version": {
                "type": "string",
                "description": "message.format.version",
                "enum": [
                  "0.8.0",
                  "0.8.1",
                  "0.8.2",
                  "0.9.0",
                  "0.10.0",
                  "0.10.0-IV0",
                  "0.10.0-IV1",
                  "0.10.1",
                  "0.10.1-IV0",
                  "0.10.1-IV1",
                  "0.10.1-IV2",
                  "0.10.2",
                  "0.10.2-IV0",
                  "0.11.0",
                  "0.11.0-IV0",
                  "0.11.0-IV1",
                  "0.11.0-IV2",
                  "1.0",
                  "1.0-IV0",
                  "1.1",
                  "1.1-IV0",
                  "2.0",
                  "2.0-IV0",
                  "2.0-IV1",
                  "2.1",
                  "2.1-IV0",
                  "2.1-IV1",
                  "2.1-IV2",
                  "2.2",
                  "2.2-IV0",
                  "2.2-IV1",
                  "2.3",
                  "2.3-IV0",
                  "2.3-IV1",
                  "2.4",
                  "2.4-IV0",
                  "2.4-IV1",
                  "2.5",
                  "2.5-IV0",
                  "2.6",
                  "2.6-IV0",
                  "2.7",
                  "2.7-IV0",
                  "2.7-IV1",
                  "2.7-IV2",
                  "2.8",
                  "2.8-IV0",
                  "2.8-IV1",
                  "3.0",
                  "3.0-IV0",
                  "3.0-IV1",
                  "3.1",
                  "3.1-IV0",
                  "3.2",
                  "3.2-IV0",
                  "3.3",
                  "3.3-IV0",
                  "3.3-IV1",
                  "3.3-IV2",
                  "3.3-IV3",
                  "3.4",
                  "3.4-IV0",
                  "3.5",
                  "3.5-IV0",
                  "3.5-IV1",
                  "3.5-IV2",
                  "3.6",
                  "3.6-IV0",
                  "3.6-IV1",
                  "3.6-IV2",
                  "3.7",
                  "3.7-IV0",
                  "3.7-IV1",
                  "3.7-IV2",
                  "3.7-IV3",
                  "3.7-IV4",
                  "3.8",
                  "3.8-IV0",
                  "3.9",
                  "3.9-IV0",
                  "3.9-IV1"
                ]
              },
              "message_timestamp_difference_max_ms": {
                "type": "integer",
                "description": "message.timestamp.difference.max.ms",
                "minimum": 0
              },
              "message_timestamp_type": {
                "type": "string",
                "description": "message.timestamp.type",
                "enum": ["CreateTime", "LogAppendTime"]
              },
              "min_cleanable_dirty_ratio": {
                "type": "number",
                "description": "min.cleanable.dirty.ratio",
                "minimum": 0,
                "maximum": 1
              },
              "min_compaction_lag_ms": {
                "type": "integer",
                "description": "min.compaction.lag.ms",
                "minimum": 0
              },
              "min_insync_replicas": {
                "type": "integer",
                "description": "min.insync.replicas",
                "minimum": 1
              },
              "preallocate": {
                "type": "boolean",
                "description": "preallocate"
              },
              "remote_storage_enable": {
                "type": "boolean",
                "description": "remote.storage.enable"
              },
              "retention_bytes": {
                "type": "integer",
                "description": "retention.bytes"
              },
              "retention_ms": {
                "type": "integer",
                "description": "retention.ms"
              },
              "segment_bytes": {
                "type": "integer",
                "description": "segment.bytes",
                "minimum": 14
              },
              "segment_index_bytes": {
                "type": "integer",
                "description": "segment.index.bytes",
                "minimum": 0
              },
              "segment_jitter_ms": {
                "type": "integer",
                "description": "segment.jitter.ms",
                "minimum": 0
              },
              "segment_ms": {
                "type": "integer",
                "description": "segment.ms",
                "minimum": 1
              },
              "unclean_leader_election_enable": {
                "type": "boolean",
                "description": "unclean.leader.election.enable"
              }
            }
          },
          "min_insync_replicas": {
            "type": "integer",
            "description": "DEPRECATED: use config.min_insync_replicas",
            "minimum": 1
          },
          "owner_user_group_id": {
            "type": "string",
            "description": "The user group that owns this topic",
            "minLength": 1,
            "maxLength": 36
          },
          "partitions": {
            "type": "integer",
            "description": "Number of partitions",
            "minimum": 1,
            "maximum": 1000000
          },
          "replication": {
            "type": "integer",
            "description": "Number of replicas",
            "minimum": 1
          },
          "retention_bytes": {
            "type": "integer",
            "description": "DEPRECATED: use config.retention_bytes"
          },
          "retention_hours": {
            "type": "integer",
            "description": "DEPRECATED: use config.retention_ms",
            "maximum": 2562047788015
          },
          "tags": {
            "type": "array",
            "description": "Topic tags",
            "minItems": 0,
            "maxItems": 3,
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "Tag key",
                  "minLength": 1,
                  "maxLength": 64
                },
                "value": {
                  "type": "string",
                  "description": "Tag value",
                  "minLength": 0,
                  "maxLength": 256
                }
              },
              "required": ["key", "value"]
            }
          },
          "topic_description": {
            "type": "string",
            "description": "Topic description",
            "minLength": 1,
            "maxLength": 256
          },
          "topic_name": {
            "type": "string",
            "description": "Topic name",
            "minLength": 1,
            "maxLength": 249
          }
        },
        "required": ["topic_name"]
      },
      "ServiceKafkaTopicCreateResponse": {
        "type": "object",
        "description": "ServiceKafkaTopicCreateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceKafkaTopicDeleteResponse": {
        "type": "object",
        "description": "ServiceKafkaTopicDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceKafkaTopicGetResponse": {
        "type": "object",
        "description": "ServiceKafkaTopicGetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "topic": {
            "type": "object",
            "description": "Kafka topic information",
            "properties": {
              "cleanup_policy": {
                "type": "string",
                "description": "DEPRECATED: use config.cleanup_policy",
                "maxLength": 64
              },
              "config": {
                "type": "object",
                "description": "Kafka topic configuration",
                "properties": {
                  "cleanup_policy": {
                    "type": "object",
                    "description": "cleanup.policy value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "string",
                              "description": "Synonym value"
                            }
                          },
                          "required": ["name", "source", "value"]
                        }
                      },
                      "value": {
                        "type": "string",
                        "description": "cleanup.policy",
                        "maxLength": 64
                      }
                    },
                    "required": ["source", "value"]
                  },
                  "compression_type": {
                    "type": "object",
                    "description": "compression.type value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "string",
                              "description": "Synonym value"
                            }
                          },
                          "required": ["name", "source", "value"]
                        }
                      },
                      "value": {
                        "type": "string",
                        "description": "compression.type",
                        "enum": [
                          "snappy",
                          "gzip",
                          "lz4",
                          "producer",
                          "uncompressed",
                          "zstd"
                        ]
                      }
                    },
                    "required": ["source", "value"]
                  },
                  "delete_retention_ms": {
                    "type": "object",
                    "description": "delete.retention.ms value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "integer",
                              "description": "Synonym value"
                            }
                          },
                          "required": ["name", "source", "value"]
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "delete.retention.ms",
                        "minimum": 0
                      }
                    },
                    "required": ["source", "value"]
                  },
                  "file_delete_delay_ms": {
                    "type": "object",
                    "description": "file.delete.delay.ms value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "integer",
                              "description": "Synonym value"
                            }
                          },
                          "required": ["name", "source", "value"]
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "file.delete.delay.ms",
                        "minimum": 0
                      }
                    },
                    "required": ["source", "value"]
                  },
                  "flush_messages": {
                    "type": "object",
                    "description": "flush.messages value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "integer",
                              "description": "Synonym value"
                            }
                          },
                          "required": ["name", "source", "value"]
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "flush.messages",
                        "minimum": 0
                      }
                    },
                    "required": ["source", "value"]
                  },
                  "flush_ms": {
                    "type": "object",
                    "description": "flush.ms value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "integer",
                              "description": "Synonym value"
                            }
                          },
                          "required": ["name", "source", "value"]
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "flush.ms",
                        "minimum": 0
                      }
                    },
                    "required": ["source", "value"]
                  },
                  "index_interval_bytes": {
                    "type": "object",
                    "description": "index.interval.bytes value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "integer",
                              "description": "Synonym value"
                            }
                          },
                          "required": ["name", "source", "value"]
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "index.interval.bytes",
                        "minimum": 0
                      }
                    },
                    "required": ["source", "value"]
                  },
                  "local_retention_bytes": {
                    "type": "object",
                    "description": "local.retention.bytes value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "integer",
                              "description": "Synonym value"
                            }
                          },
                          "required": ["name", "source", "value"]
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "local.retention.bytes"
                      }
                    },
                    "required": ["source", "value"]
                  },
                  "local_retention_ms": {
                    "type": "object",
                    "description": "local.retention.ms value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "integer",
                              "description": "Synonym value"
                            }
                          },
                          "required": ["name", "source", "value"]
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "local.retention.ms"
                      }
                    },
                    "required": ["source", "value"]
                  },
                  "max_compaction_lag_ms": {
                    "type": "object",
                    "description": "max.compaction.lag.ms value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "integer",
                              "description": "Synonym value"
                            }
                          },
                          "required": ["name", "source", "value"]
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "max.compaction.lag.ms",
                        "minimum": 0
                      }
                    },
                    "required": ["source", "value"]
                  },
                  "max_message_bytes": {
                    "type": "object",
                    "description": "max.message.bytes value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "integer",
                              "description": "Synonym value"
                            }
                          },
                          "required": ["name", "source", "value"]
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "max.message.bytes",
                        "minimum": 0
                      }
                    },
                    "required": ["source", "value"]
                  },
                  "message_downconversion_enable": {
                    "type": "object",
                    "description": "message.downconversion.enable value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "boolean",
                              "description": "Synonym value"
                            }
                          },
                          "required": ["name", "source", "value"]
                        }
                      },
                      "value": {
                        "type": "boolean",
                        "description": "message.downconversion.enable"
                      }
                    },
                    "required": ["source", "value"]
                  },
                  "message_format_version": {
                    "type": "object",
                    "description": "message.format.version value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "string",
                              "description": "Synonym value"
                            }
                          },
                          "required": ["name", "source", "value"]
                        }
                      },
                      "value": {
                        "type": "string",
                        "description": "message.format.version",
                        "enum": [
                          "0.8.0",
                          "0.8.1",
                          "0.8.2",
                          "0.9.0",
                          "0.10.0",
                          "0.10.0-IV0",
                          "0.10.0-IV1",
                          "0.10.1",
                          "0.10.1-IV0",
                          "0.10.1-IV1",
                          "0.10.1-IV2",
                          "0.10.2",
                          "0.10.2-IV0",
                          "0.11.0",
                          "0.11.0-IV0",
                          "0.11.0-IV1",
                          "0.11.0-IV2",
                          "1.0",
                          "1.0-IV0",
                          "1.1",
                          "1.1-IV0",
                          "2.0",
                          "2.0-IV0",
                          "2.0-IV1",
                          "2.1",
                          "2.1-IV0",
                          "2.1-IV1",
                          "2.1-IV2",
                          "2.2",
                          "2.2-IV0",
                          "2.2-IV1",
                          "2.3",
                          "2.3-IV0",
                          "2.3-IV1",
                          "2.4",
                          "2.4-IV0",
                          "2.4-IV1",
                          "2.5",
                          "2.5-IV0",
                          "2.6",
                          "2.6-IV0",
                          "2.7",
                          "2.7-IV0",
                          "2.7-IV1",
                          "2.7-IV2",
                          "2.8",
                          "2.8-IV0",
                          "2.8-IV1",
                          "3.0",
                          "3.0-IV0",
                          "3.0-IV1",
                          "3.1",
                          "3.1-IV0",
                          "3.2",
                          "3.2-IV0",
                          "3.3",
                          "3.3-IV0",
                          "3.3-IV1",
                          "3.3-IV2",
                          "3.3-IV3",
                          "3.4",
                          "3.4-IV0",
                          "3.5",
                          "3.5-IV0",
                          "3.5-IV1",
                          "3.5-IV2",
                          "3.6",
                          "3.6-IV0",
                          "3.6-IV1",
                          "3.6-IV2",
                          "3.7",
                          "3.7-IV0",
                          "3.7-IV1",
                          "3.7-IV2",
                          "3.7-IV3",
                          "3.7-IV4",
                          "3.8",
                          "3.8-IV0",
                          "3.9",
                          "3.9-IV0",
                          "3.9-IV1"
                        ]
                      }
                    },
                    "required": ["source", "value"]
                  },
                  "message_timestamp_difference_max_ms": {
                    "type": "object",
                    "description": "message.timestamp.difference.max.ms value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "integer",
                              "description": "Synonym value"
                            }
                          },
                          "required": ["name", "source", "value"]
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "message.timestamp.difference.max.ms",
                        "minimum": 0
                      }
                    },
                    "required": ["source", "value"]
                  },
                  "message_timestamp_type": {
                    "type": "object",
                    "description": "message.timestamp.type value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "string",
                              "description": "Synonym value"
                            }
                          },
                          "required": ["name", "source", "value"]
                        }
                      },
                      "value": {
                        "type": "string",
                        "description": "message.timestamp.type",
                        "enum": ["CreateTime", "LogAppendTime"]
                      }
                    },
                    "required": ["source", "value"]
                  },
                  "min_cleanable_dirty_ratio": {
                    "type": "object",
                    "description": "min.cleanable.dirty.ratio value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "number",
                              "description": "Synonym value"
                            }
                          },
                          "required": ["name", "source", "value"]
                        }
                      },
                      "value": {
                        "type": "number",
                        "description": "min.cleanable.dirty.ratio",
                        "minimum": 0,
                        "maximum": 1
                      }
                    },
                    "required": ["source", "value"]
                  },
                  "min_compaction_lag_ms": {
                    "type": "object",
                    "description": "min.compaction.lag.ms value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "integer",
                              "description": "Synonym value"
                            }
                          },
                          "required": ["name", "source", "value"]
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "min.compaction.lag.ms",
                        "minimum": 0
                      }
                    },
                    "required": ["source", "value"]
                  },
                  "min_insync_replicas": {
                    "type": "object",
                    "description": "min.insync.replicas value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "integer",
                              "description": "Synonym value"
                            }
                          },
                          "required": ["name", "source", "value"]
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "min.insync.replicas",
                        "minimum": 1
                      }
                    },
                    "required": ["source", "value"]
                  },
                  "preallocate": {
                    "type": "object",
                    "description": "preallocate value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "boolean",
                              "description": "Synonym value"
                            }
                          },
                          "required": ["name", "source", "value"]
                        }
                      },
                      "value": {
                        "type": "boolean",
                        "description": "preallocate"
                      }
                    },
                    "required": ["source", "value"]
                  },
                  "remote_storage_enable": {
                    "type": "object",
                    "description": "remote.storage.enable value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "boolean",
                              "description": "Synonym value"
                            }
                          },
                          "required": ["name", "source", "value"]
                        }
                      },
                      "value": {
                        "type": "boolean",
                        "description": "remote.storage.enable"
                      }
                    },
                    "required": ["source", "value"]
                  },
                  "retention_bytes": {
                    "type": "object",
                    "description": "retention.bytes value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "integer",
                              "description": "Synonym value"
                            }
                          },
                          "required": ["name", "source", "value"]
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "retention.bytes"
                      }
                    },
                    "required": ["source", "value"]
                  },
                  "retention_ms": {
                    "type": "object",
                    "description": "retention.ms value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "integer",
                              "description": "Synonym value"
                            }
                          },
                          "required": ["name", "source", "value"]
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "retention.ms"
                      }
                    },
                    "required": ["source", "value"]
                  },
                  "segment_bytes": {
                    "type": "object",
                    "description": "segment.bytes value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "integer",
                              "description": "Synonym value"
                            }
                          },
                          "required": ["name", "source", "value"]
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "segment.bytes",
                        "minimum": 14
                      }
                    },
                    "required": ["source", "value"]
                  },
                  "segment_index_bytes": {
                    "type": "object",
                    "description": "segment.index.bytes value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "integer",
                              "description": "Synonym value"
                            }
                          },
                          "required": ["name", "source", "value"]
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "segment.index.bytes",
                        "minimum": 0
                      }
                    },
                    "required": ["source", "value"]
                  },
                  "segment_jitter_ms": {
                    "type": "object",
                    "description": "segment.jitter.ms value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "integer",
                              "description": "Synonym value"
                            }
                          },
                          "required": ["name", "source", "value"]
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "segment.jitter.ms",
                        "minimum": 0
                      }
                    },
                    "required": ["source", "value"]
                  },
                  "segment_ms": {
                    "type": "object",
                    "description": "segment.ms value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "integer",
                              "description": "Synonym value"
                            }
                          },
                          "required": ["name", "source", "value"]
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "segment.ms",
                        "minimum": 1
                      }
                    },
                    "required": ["source", "value"]
                  },
                  "unclean_leader_election_enable": {
                    "type": "object",
                    "description": "unclean.leader.election.enable value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "boolean",
                              "description": "Synonym value"
                            }
                          },
                          "required": ["name", "source", "value"]
                        }
                      },
                      "value": {
                        "type": "boolean",
                        "description": "unclean.leader.election.enable"
                      }
                    },
                    "required": ["source", "value"]
                  }
                }
              },
              "min_insync_replicas": {
                "type": "integer",
                "description": "DEPRECATED: use config.min_insync_replicas",
                "minimum": 1
              },
              "owner_user_group_id": {
                "type": "string",
                "description": "The user group that owns this topic",
                "minLength": 1,
                "maxLength": 36
              },
              "partitions": {
                "type": "array",
                "description": "Topic partitions",
                "items": {
                  "type": "object",
                  "properties": {
                    "consumer_groups": {
                      "type": "array",
                      "description": "List of Kafka consumer groups",
                      "items": {
                        "type": "object",
                        "properties": {
                          "group_name": {
                            "type": "string",
                            "description": "consumer group"
                          },
                          "offset": {
                            "type": "integer",
                            "description": "Latest partition message offset",
                            "minimum": 0
                          }
                        },
                        "required": ["group_name", "offset"]
                      }
                    },
                    "earliest_offset": {
                      "type": "integer",
                      "description": "Earliest partition message offset"
                    },
                    "isr": {
                      "type": "integer",
                      "description": "Number of In Sync Replicas (ISR)",
                      "minimum": 0
                    },
                    "latest_offset": {
                      "type": "integer",
                      "description": "Latest partition message offset"
                    },
                    "partition": {
                      "type": "integer",
                      "description": "Partition number"
                    },
                    "remote_size": {
                      "type": "integer",
                      "description": "Size of tiered data from partition in bytes",
                      "minimum": 0
                    },
                    "size": {
                      "type": "integer",
                      "description": "Size of partition in bytes",
                      "minimum": 0
                    }
                  },
                  "required": [
                    "consumer_groups",
                    "earliest_offset",
                    "isr",
                    "latest_offset",
                    "partition",
                    "size"
                  ]
                }
              },
              "replication": {
                "type": "integer",
                "description": "Number of replicas",
                "minimum": 1
              },
              "retention_bytes": {
                "type": "integer",
                "description": "DEPRECATED: use config.retention_bytes"
              },
              "retention_hours": {
                "type": "integer",
                "description": "DEPRECATED: use config.retention_ms",
                "maximum": 2562047788015
              },
              "state": {
                "type": "string",
                "description": "Topic state",
                "enum": ["ACTIVE", "CONFIGURING", "DELETING"]
              },
              "tags": {
                "type": "array",
                "description": "Topic tags",
                "minItems": 0,
                "maxItems": 3,
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "Tag key",
                      "minLength": 1,
                      "maxLength": 64
                    },
                    "value": {
                      "type": "string",
                      "description": "Tag value",
                      "minLength": 0,
                      "maxLength": 256
                    }
                  },
                  "required": ["key", "value"]
                }
              },
              "topic_description": {
                "type": "string",
                "description": "Topic description",
                "minLength": 1,
                "maxLength": 256
              },
              "topic_name": {
                "type": "string",
                "description": "Topic name",
                "minLength": 1,
                "maxLength": 249
              }
            },
            "required": [
              "cleanup_policy",
              "config",
              "min_insync_replicas",
              "owner_user_group_id",
              "partitions",
              "replication",
              "retention_bytes",
              "retention_hours",
              "state",
              "tags",
              "topic_description",
              "topic_name"
            ]
          }
        },
        "required": ["topic"]
      },
      "ServiceKafkaTopicListResponse": {
        "type": "object",
        "description": "ServiceKafkaTopicListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "topics": {
            "type": "array",
            "description": "List of Kafka topics",
            "items": {
              "type": "object",
              "properties": {
                "cleanup_policy": {
                  "type": "string",
                  "description": "cleanup.policy",
                  "maxLength": 64
                },
                "min_insync_replicas": {
                  "type": "integer",
                  "description": "min.insync.replicas",
                  "minimum": 1
                },
                "owner_user_group_id": {
                  "type": "string",
                  "description": "The user group that owns this topic",
                  "minLength": 1,
                  "maxLength": 36
                },
                "partitions": {
                  "type": "integer",
                  "description": "Number of partitions",
                  "minimum": 1,
                  "maximum": 1000000
                },
                "remote_storage_enable": {
                  "type": "boolean",
                  "description": "remote.storage.enable"
                },
                "replication": {
                  "type": "integer",
                  "description": "Number of replicas",
                  "minimum": 1
                },
                "retention_bytes": {
                  "type": "integer",
                  "description": "retention.bytes"
                },
                "retention_hours": {
                  "type": "integer",
                  "description": "Retention period (hours)",
                  "maximum": 2562047788015
                },
                "state": {
                  "type": "string",
                  "description": "Topic state",
                  "enum": ["ACTIVE", "CONFIGURING", "DELETING"]
                },
                "tags": {
                  "type": "array",
                  "description": "Topic tags",
                  "minItems": 0,
                  "maxItems": 3,
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "type": "string",
                        "description": "Tag key",
                        "minLength": 1,
                        "maxLength": 64
                      },
                      "value": {
                        "type": "string",
                        "description": "Tag value",
                        "minLength": 0,
                        "maxLength": 256
                      }
                    },
                    "required": ["key", "value"]
                  }
                },
                "topic_description": {
                  "type": "string",
                  "description": "Topic description",
                  "minLength": 1,
                  "maxLength": 256
                },
                "topic_name": {
                  "type": "string",
                  "description": "Topic name",
                  "minLength": 1,
                  "maxLength": 249
                }
              },
              "required": [
                "cleanup_policy",
                "min_insync_replicas",
                "owner_user_group_id",
                "partitions",
                "replication",
                "retention_bytes",
                "retention_hours",
                "state",
                "tags",
                "topic_description",
                "topic_name"
              ]
            }
          }
        },
        "required": ["topics"]
      },
      "ServiceKafkaTopicMessageListRequestBody": {
        "type": "object",
        "description": "ServiceKafkaTopicMessageListRequestBody",
        "properties": {
          "format": {
            "type": "string",
            "description": "The format of consumed messages, which is used to convert messages into a JSON-compatible form. If unspecified, defaults to binary",
            "enum": ["binary", "json", "avro", "protobuf", "jsonschema"]
          },
          "max_bytes": {
            "type": "integer",
            "description": "The maximum number of bytes of unencoded keys and values that should be included in the response. This provides approximate control over the size of responses and the amount of memory required to store the decoded response. The actual limit will be the minimum of this setting and the server-side configuration consumer.request.max.bytes. Default is unlimited",
            "minimum": 1024,
            "maximum": 1000000000
          },
          "partitions": {
            "type": "object",
            "description": "Object of desired partition / offset mappings",
            "properties": {}
          },
          "timeout": {
            "type": "integer",
            "description": "The maximum total time to wait for messages for a request if the maximum request size has not yet been reached",
            "minimum": 3000,
            "maximum": 40000
          }
        },
        "required": ["partitions"]
      },
      "ServiceKafkaTopicMessageListResponse": {
        "type": "object",
        "description": "ServiceKafkaTopicMessageListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "messages": {
            "type": "array",
            "description": "List of messages from topic",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "object",
                  "description": "The message key, formatted according to the embedded format",
                  "properties": {}
                },
                "offset": {
                  "type": "integer",
                  "description": "Offset of the message"
                },
                "partition": {
                  "type": "integer",
                  "description": "Partition of the message"
                },
                "topic": {
                  "type": "string",
                  "description": "The name of the topic"
                },
                "value": {
                  "type": "object",
                  "description": "The message value, formatted according to the embedded format",
                  "properties": {}
                }
              }
            }
          }
        }
      },
      "ServiceKafkaTopicMessageProduceRequestBody": {
        "type": "object",
        "description": "ServiceKafkaTopicMessageProduceRequestBody",
        "properties": {
          "format": {
            "type": "string",
            "description": "The format of the content.",
            "enum": ["binary", "json", "avro", "protobuf", "jsonschema"]
          },
          "key_schema": {
            "type": "string",
            "description": "Full schema encoded as a string (e.g. JSON serialized for Avro data)",
            "minLength": 18,
            "maxLength": 2048
          },
          "key_schema_id": {
            "type": "integer",
            "description": "ID returned by a previous request using the same schema. This ID corresponds to the ID of the schema in the registry.",
            "minimum": 1,
            "maximum": 50000
          },
          "records": {
            "type": "array",
            "description": "List of records to produce to the topic",
            "maxItems": 32,
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "object",
                  "description": "Key for the produced record",
                  "properties": {}
                },
                "partition": {
                  "type": "integer",
                  "description": "Optionally specify the partition where to produce the record",
                  "minimum": 0,
                  "maximum": 10000
                },
                "value": {
                  "type": "object",
                  "description": "Value for the produced record",
                  "properties": {}
                }
              }
            }
          },
          "value_schema": {
            "type": "string",
            "description": "Full schema encoded as a string (e.g. JSON serialized for Avro data)",
            "minLength": 18,
            "maxLength": 2048
          },
          "value_schema_id": {
            "type": "integer",
            "description": "ID returned by a previous request using the same schema. This ID corresponds to the ID of the schema in the registry.",
            "minimum": 1,
            "maximum": 50000
          }
        },
        "required": ["format", "records"]
      },
      "ServiceKafkaTopicMessageProduceResponse": {
        "type": "object",
        "description": "ServiceKafkaTopicMessageProduceResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "key_schema_id": {
            "type": "integer",
            "description": "The ID for the schema used to produce keys, or null if keys were not used"
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "offsets": {
            "type": "array",
            "description": "List of offsets for the produced record",
            "items": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "An error message describing why the operation failed, or null if it succeeded"
                },
                "error_code": {
                  "type": "integer",
                  "description": "An error code classifying the reason this operation failed, or null if it succeeded. 1 = Non-retriable Kafka exception, 2 = Retriable Kafka exception; the message might be sent successfully if retried"
                },
                "offset": {
                  "type": "integer",
                  "description": "Offset of the message, or null if publishing the message failed"
                },
                "partition": {
                  "type": "integer",
                  "description": "Partition the message was published to, or null if publishing the message failed"
                }
              }
            }
          },
          "value_schema_id": {
            "type": "integer",
            "description": "The ID for the schema used to produce values"
          }
        }
      },
      "ServiceKafkaTopicUpdateRequestBody": {
        "type": "object",
        "description": "ServiceKafkaTopicUpdateRequestBody",
        "properties": {
          "config": {
            "type": "object",
            "description": "Kafka topic configuration",
            "properties": {
              "cleanup_policy": {
                "type": "string",
                "description": "cleanup.policy",
                "enum": ["delete", "compact", "compact,delete"]
              },
              "compression_type": {
                "type": "string",
                "description": "compression.type",
                "enum": [
                  "snappy",
                  "gzip",
                  "lz4",
                  "producer",
                  "uncompressed",
                  "zstd"
                ]
              },
              "delete_retention_ms": {
                "type": "integer",
                "description": "delete.retention.ms",
                "minimum": 0
              },
              "file_delete_delay_ms": {
                "type": "integer",
                "description": "file.delete.delay.ms",
                "minimum": 0
              },
              "flush_messages": {
                "type": "integer",
                "description": "flush.messages",
                "minimum": 0
              },
              "flush_ms": {
                "type": "integer",
                "description": "flush.ms",
                "minimum": 0
              },
              "index_interval_bytes": {
                "type": "integer",
                "description": "index.interval.bytes",
                "minimum": 0
              },
              "local_retention_bytes": {
                "type": "integer",
                "description": "local.retention.bytes"
              },
              "local_retention_ms": {
                "type": "integer",
                "description": "local.retention.ms"
              },
              "max_compaction_lag_ms": {
                "type": "integer",
                "description": "max.compaction.lag.ms",
                "minimum": 0
              },
              "max_message_bytes": {
                "type": "integer",
                "description": "max.message.bytes",
                "minimum": 0
              },
              "message_downconversion_enable": {
                "type": "boolean",
                "description": "message.downconversion.enable"
              },
              "message_format_version": {
                "type": "string",
                "description": "message.format.version",
                "enum": [
                  "0.8.0",
                  "0.8.1",
                  "0.8.2",
                  "0.9.0",
                  "0.10.0",
                  "0.10.0-IV0",
                  "0.10.0-IV1",
                  "0.10.1",
                  "0.10.1-IV0",
                  "0.10.1-IV1",
                  "0.10.1-IV2",
                  "0.10.2",
                  "0.10.2-IV0",
                  "0.11.0",
                  "0.11.0-IV0",
                  "0.11.0-IV1",
                  "0.11.0-IV2",
                  "1.0",
                  "1.0-IV0",
                  "1.1",
                  "1.1-IV0",
                  "2.0",
                  "2.0-IV0",
                  "2.0-IV1",
                  "2.1",
                  "2.1-IV0",
                  "2.1-IV1",
                  "2.1-IV2",
                  "2.2",
                  "2.2-IV0",
                  "2.2-IV1",
                  "2.3",
                  "2.3-IV0",
                  "2.3-IV1",
                  "2.4",
                  "2.4-IV0",
                  "2.4-IV1",
                  "2.5",
                  "2.5-IV0",
                  "2.6",
                  "2.6-IV0",
                  "2.7",
                  "2.7-IV0",
                  "2.7-IV1",
                  "2.7-IV2",
                  "2.8",
                  "2.8-IV0",
                  "2.8-IV1",
                  "3.0",
                  "3.0-IV0",
                  "3.0-IV1",
                  "3.1",
                  "3.1-IV0",
                  "3.2",
                  "3.2-IV0",
                  "3.3",
                  "3.3-IV0",
                  "3.3-IV1",
                  "3.3-IV2",
                  "3.3-IV3",
                  "3.4",
                  "3.4-IV0",
                  "3.5",
                  "3.5-IV0",
                  "3.5-IV1",
                  "3.5-IV2",
                  "3.6",
                  "3.6-IV0",
                  "3.6-IV1",
                  "3.6-IV2",
                  "3.7",
                  "3.7-IV0",
                  "3.7-IV1",
                  "3.7-IV2",
                  "3.7-IV3",
                  "3.7-IV4",
                  "3.8",
                  "3.8-IV0",
                  "3.9",
                  "3.9-IV0",
                  "3.9-IV1"
                ]
              },
              "message_timestamp_difference_max_ms": {
                "type": "integer",
                "description": "message.timestamp.difference.max.ms",
                "minimum": 0
              },
              "message_timestamp_type": {
                "type": "string",
                "description": "message.timestamp.type",
                "enum": ["CreateTime", "LogAppendTime"]
              },
              "min_cleanable_dirty_ratio": {
                "type": "number",
                "description": "min.cleanable.dirty.ratio",
                "minimum": 0,
                "maximum": 1
              },
              "min_compaction_lag_ms": {
                "type": "integer",
                "description": "min.compaction.lag.ms",
                "minimum": 0
              },
              "min_insync_replicas": {
                "type": "integer",
                "description": "min.insync.replicas",
                "minimum": 1
              },
              "preallocate": {
                "type": "boolean",
                "description": "preallocate"
              },
              "remote_storage_enable": {
                "type": "boolean",
                "description": "remote.storage.enable"
              },
              "retention_bytes": {
                "type": "integer",
                "description": "retention.bytes"
              },
              "retention_ms": {
                "type": "integer",
                "description": "retention.ms"
              },
              "segment_bytes": {
                "type": "integer",
                "description": "segment.bytes",
                "minimum": 14
              },
              "segment_index_bytes": {
                "type": "integer",
                "description": "segment.index.bytes",
                "minimum": 0
              },
              "segment_jitter_ms": {
                "type": "integer",
                "description": "segment.jitter.ms",
                "minimum": 0
              },
              "segment_ms": {
                "type": "integer",
                "description": "segment.ms",
                "minimum": 1
              },
              "unclean_leader_election_enable": {
                "type": "boolean",
                "description": "unclean.leader.election.enable"
              }
            }
          },
          "min_insync_replicas": {
            "type": "integer",
            "description": "DEPRECATED: use config.min_insync_replicas",
            "minimum": 1
          },
          "owner_user_group_id": {
            "type": "string",
            "description": "The user group that owns this topic",
            "minLength": 1,
            "maxLength": 36
          },
          "partitions": {
            "type": "integer",
            "description": "Number of partitions",
            "minimum": 1,
            "maximum": 1000000
          },
          "replication": {
            "type": "integer",
            "description": "Number of replicas",
            "minimum": 1
          },
          "retention_bytes": {
            "type": "integer",
            "description": "DEPRECATED: use config.retention_bytes"
          },
          "retention_hours": {
            "type": "integer",
            "description": "DEPRECATED: use config.retention_ms",
            "maximum": 2562047788015
          },
          "tags": {
            "type": "array",
            "description": "Topic tags",
            "minItems": 0,
            "maxItems": 3,
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "Tag key",
                  "minLength": 1,
                  "maxLength": 64
                },
                "value": {
                  "type": "string",
                  "description": "Tag value",
                  "minLength": 0,
                  "maxLength": 256
                }
              },
              "required": ["key", "value"]
            }
          },
          "topic_description": {
            "type": "string",
            "description": "Topic description",
            "minLength": 1,
            "maxLength": 256
          }
        }
      },
      "ServiceKafkaTopicUpdateResponse": {
        "type": "object",
        "description": "ServiceKafkaTopicUpdateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceSchemaRegistryAclAddRequestBody": {
        "type": "object",
        "description": "ServiceSchemaRegistryAclAddRequestBody",
        "properties": {
          "permission": {
            "type": "string",
            "description": "ACL entry for Schema Registry",
            "enum": ["schema_registry_read", "schema_registry_write"]
          },
          "resource": {
            "type": "string",
            "description": "Schema Registry ACL entry resource name pattern",
            "minLength": 1,
            "maxLength": 249
          },
          "username": {
            "type": "string",
            "description": "Username",
            "minLength": 1,
            "maxLength": 64
          }
        },
        "required": ["permission", "resource", "username"]
      },
      "ServiceSchemaRegistryAclAddResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistryAclAddResponse",
        "properties": {
          "acl": {
            "type": "array",
            "description": "List of Schema Registry ACL entries",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "ID",
                  "maxLength": 40
                },
                "permission": {
                  "type": "string",
                  "description": "ACL entry for Schema Registry",
                  "enum": ["schema_registry_read", "schema_registry_write"]
                },
                "resource": {
                  "type": "string",
                  "description": "Schema Registry ACL entry resource name pattern",
                  "minLength": 1,
                  "maxLength": 249
                },
                "username": {
                  "type": "string",
                  "description": "Username",
                  "minLength": 1,
                  "maxLength": 64
                }
              },
              "required": ["permission", "resource", "username"]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["acl"]
      },
      "ServiceSchemaRegistryAclDeleteResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistryAclDeleteResponse",
        "properties": {
          "acl": {
            "type": "array",
            "description": "List of Schema Registry ACL entries",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "ID",
                  "maxLength": 40
                },
                "permission": {
                  "type": "string",
                  "description": "ACL entry for Schema Registry",
                  "enum": ["schema_registry_read", "schema_registry_write"]
                },
                "resource": {
                  "type": "string",
                  "description": "Schema Registry ACL entry resource name pattern",
                  "minLength": 1,
                  "maxLength": 249
                },
                "username": {
                  "type": "string",
                  "description": "Username",
                  "minLength": 1,
                  "maxLength": 64
                }
              },
              "required": ["permission", "resource", "username"]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["acl"]
      },
      "ServiceSchemaRegistryAclListResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistryAclListResponse",
        "properties": {
          "acl": {
            "type": "array",
            "description": "List of Schema Registry ACL entries",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "ID",
                  "maxLength": 40
                },
                "permission": {
                  "type": "string",
                  "description": "ACL entry for Schema Registry",
                  "enum": ["schema_registry_read", "schema_registry_write"]
                },
                "resource": {
                  "type": "string",
                  "description": "Schema Registry ACL entry resource name pattern",
                  "minLength": 1,
                  "maxLength": 249
                },
                "username": {
                  "type": "string",
                  "description": "Username",
                  "minLength": 1,
                  "maxLength": 64
                }
              },
              "required": ["permission", "resource", "username"]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["acl"]
      },
      "ServiceSchemaRegistryCompatibilityRequestBody": {
        "type": "object",
        "description": "ServiceSchemaRegistryCompatibilityRequestBody",
        "properties": {
          "schema": {
            "type": "string",
            "description": "Schema",
            "maxLength": 1048576
          },
          "schemaType": {
            "type": "string",
            "description": "Schema type",
            "enum": ["AVRO", "JSON", "PROTOBUF"]
          }
        },
        "required": ["schema"]
      },
      "ServiceSchemaRegistryCompatibilityResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistryCompatibilityResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "is_compatible": {
            "type": "boolean",
            "description": "Compatibility"
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "messages": {
            "type": "array",
            "description": "Compatibility check messages",
            "maxItems": 128,
            "items": { "type": "string" }
          }
        },
        "required": ["is_compatible"]
      },
      "ServiceSchemaRegistryGlobalConfigGetResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistryGlobalConfigGetResponse",
        "properties": {
          "compatibilityLevel": {
            "type": "string",
            "description": "Compatibility level",
            "enum": [
              "BACKWARD",
              "BACKWARD_TRANSITIVE",
              "FORWARD",
              "FORWARD_TRANSITIVE",
              "FULL",
              "FULL_TRANSITIVE",
              "NONE"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["compatibilityLevel"]
      },
      "ServiceSchemaRegistryGlobalConfigPutRequestBody": {
        "type": "object",
        "description": "ServiceSchemaRegistryGlobalConfigPutRequestBody",
        "properties": {
          "compatibility": {
            "type": "string",
            "description": "Compatibility level",
            "enum": [
              "BACKWARD",
              "BACKWARD_TRANSITIVE",
              "FORWARD",
              "FORWARD_TRANSITIVE",
              "FULL",
              "FULL_TRANSITIVE",
              "NONE"
            ]
          }
        },
        "required": ["compatibility"]
      },
      "ServiceSchemaRegistryGlobalConfigPutResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistryGlobalConfigPutResponse",
        "properties": {
          "compatibility": {
            "type": "string",
            "description": "Compatibility level",
            "enum": [
              "BACKWARD",
              "BACKWARD_TRANSITIVE",
              "FORWARD",
              "FORWARD_TRANSITIVE",
              "FULL",
              "FULL_TRANSITIVE",
              "NONE"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["compatibility"]
      },
      "ServiceSchemaRegistrySchemaGetResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistrySchemaGetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceSchemaRegistrySubjectConfigGetResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistrySubjectConfigGetResponse",
        "properties": {
          "compatibilityLevel": {
            "type": "string",
            "description": "Compatibility level",
            "enum": [
              "BACKWARD",
              "BACKWARD_TRANSITIVE",
              "FORWARD",
              "FORWARD_TRANSITIVE",
              "FULL",
              "FULL_TRANSITIVE",
              "NONE"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["compatibilityLevel"]
      },
      "ServiceSchemaRegistrySubjectConfigPutRequestBody": {
        "type": "object",
        "description": "ServiceSchemaRegistrySubjectConfigPutRequestBody",
        "properties": {
          "compatibility": {
            "type": "string",
            "description": "Compatibility level",
            "enum": [
              "BACKWARD",
              "BACKWARD_TRANSITIVE",
              "FORWARD",
              "FORWARD_TRANSITIVE",
              "FULL",
              "FULL_TRANSITIVE",
              "NONE"
            ]
          }
        },
        "required": ["compatibility"]
      },
      "ServiceSchemaRegistrySubjectConfigPutResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistrySubjectConfigPutResponse",
        "properties": {
          "compatibility": {
            "type": "string",
            "description": "Compatibility level",
            "enum": [
              "BACKWARD",
              "BACKWARD_TRANSITIVE",
              "FORWARD",
              "FORWARD_TRANSITIVE",
              "FULL",
              "FULL_TRANSITIVE",
              "NONE"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["compatibility"]
      },
      "ServiceSchemaRegistrySubjectDeleteResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistrySubjectDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceSchemaRegistrySubjectVersionDeleteResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistrySubjectVersionDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceSchemaRegistrySubjectVersionGetResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistrySubjectVersionGetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "version": {
            "type": "object",
            "description": "Version",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Schema Id",
                "minimum": 0
              },
              "references": {
                "type": "array",
                "description": "Schema references",
                "maxItems": 128,
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name",
                      "maxLength": 1024
                    },
                    "subject": {
                      "type": "string",
                      "description": "Subject",
                      "maxLength": 1024
                    },
                    "version": {
                      "type": "integer",
                      "description": "Version",
                      "minimum": 0
                    }
                  },
                  "required": ["name", "subject", "version"]
                }
              },
              "schema": {
                "type": "string",
                "description": "Schema",
                "maxLength": 1048576
              },
              "schemaType": {
                "type": "string",
                "description": "Schema type",
                "enum": ["AVRO", "JSON", "PROTOBUF"]
              },
              "subject": {
                "type": "string",
                "description": "Subject",
                "maxLength": 1024
              },
              "version": {
                "type": "integer",
                "description": "Version",
                "minimum": 0
              }
            },
            "required": ["id", "schema", "subject", "version"]
          }
        },
        "required": ["version"]
      },
      "ServiceSchemaRegistrySubjectVersionPostRequestBody": {
        "type": "object",
        "description": "ServiceSchemaRegistrySubjectVersionPostRequestBody",
        "properties": {
          "references": {
            "type": "array",
            "description": "Schema references",
            "maxItems": 128,
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name",
                  "maxLength": 1024
                },
                "subject": {
                  "type": "string",
                  "description": "Subject",
                  "maxLength": 1024
                },
                "version": {
                  "type": "integer",
                  "description": "Version",
                  "minimum": 0
                }
              },
              "required": ["name", "subject", "version"]
            }
          },
          "schema": {
            "type": "string",
            "description": "Schema",
            "maxLength": 1048576
          },
          "schemaType": {
            "type": "string",
            "description": "Schema type",
            "enum": ["AVRO", "JSON", "PROTOBUF"]
          }
        },
        "required": ["schema"]
      },
      "ServiceSchemaRegistrySubjectVersionPostResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistrySubjectVersionPostResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "id": { "type": "integer", "description": "Schema Id", "minimum": 0 },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["id"]
      },
      "ServiceSchemaRegistrySubjectVersionSchemaGetResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistrySubjectVersionSchemaGetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceSchemaRegistrySubjectVersionsGetResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistrySubjectVersionsGetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "versions": {
            "type": "array",
            "description": "List of available versions for a Schema Registry subject",
            "items": { "type": "integer" }
          }
        },
        "required": ["versions"]
      },
      "ServiceSchemaRegistrySubjectsResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistrySubjectsResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "subjects": {
            "type": "array",
            "description": "List of available Schema Registry subjects",
            "items": { "type": "string" }
          }
        },
        "required": ["subjects"]
      },
      "ServiceKafkaMirrorMakerCreateReplicationFlowRequestBody": {
        "type": "object",
        "description": "ServiceKafkaMirrorMakerCreateReplicationFlowRequestBody",
        "properties": {
          "config_properties_exclude": {
            "type": "string",
            "description": "Topic configuration properties that should not be replicated",
            "maxLength": 2048
          },
          "emit_backward_heartbeats_enabled": {
            "type": "boolean",
            "description": "Emit backward heartbeats enabled"
          },
          "emit_heartbeats_enabled": {
            "type": "boolean",
            "description": "Emit heartbeats enabled"
          },
          "enabled": {
            "type": "boolean",
            "description": "Is replication flow enabled"
          },
          "exactly_once_delivery_enabled": {
            "type": "boolean",
            "description": "Enable exactly-once message delivery"
          },
          "offset_lag_max": {
            "type": "integer",
            "description": "How out-of-sync a remote partition can be before it is resynced",
            "minimum": 0
          },
          "offset_syncs_topic_location": {
            "type": "string",
            "description": "Offset syncs topic location",
            "enum": ["source", "target"]
          },
          "replication_factor": {
            "type": "integer",
            "description": "Replication factor",
            "minimum": 1
          },
          "replication_policy_class": {
            "type": "string",
            "description": "Replication policy class",
            "enum": [
              "org.apache.kafka.connect.mirror.DefaultReplicationPolicy",
              "org.apache.kafka.connect.mirror.IdentityReplicationPolicy"
            ]
          },
          "source_cluster": {
            "type": "string",
            "description": "Source cluster alias",
            "maxLength": 128
          },
          "sync_group_offsets_enabled": {
            "type": "boolean",
            "description": "Sync consumer group offsets"
          },
          "sync_group_offsets_interval_seconds": {
            "type": "integer",
            "description": "Frequency of consumer group offset sync",
            "minimum": 1
          },
          "target_cluster": {
            "type": "string",
            "description": "Target cluster alias",
            "maxLength": 128
          },
          "topics": {
            "type": "array",
            "description": "List of topics and/or regular expressions to replicate.\n\nTopic names and regular expressions that match topic names that should be replicated. MirrorMaker will replicate these topics if they are not matched by &quot;topics.exclude&quot;. Currently defaults to [&quot;.*&quot;].",
            "maxItems": 8192,
            "items": { "type": "string" }
          },
          "topics.blacklist": {
            "type": "array",
            "description": "List of topics and/or regular expressions to not replicate. Deprecated property, use 'topics_exclude instead'.\n\nTopic names and regular expressions that match topic names that should not be replicated. MirrorMaker will not replicate these topics even if they are matched by &quot;topics&quot;. If not set, MM2 uses the default exclusion.",
            "maxItems": 8192,
            "items": { "type": "string" }
          },
          "topics.exclude": {
            "type": "array",
            "description": "List of topics and/or regular expressions to not replicate. Deprecated property, use 'topics_exclude instead'.\n\nTopic names and regular expressions that match topic names that should not be replicated. MirrorMaker will not replicate these topics even if they are matched by &quot;topics&quot;. If not set, MM2 uses the default exclusion.",
            "maxItems": 8192,
            "items": { "type": "string" }
          },
          "topics_exclude": {
            "type": "array",
            "description": "List of topics and/or regular expressions to not replicate.\n\nTopic names and regular expressions that match topic names that should not be replicated. MirrorMaker will not replicate these topics even if they are matched by &quot;topics&quot;. If not set, MM2 uses the default exclusion.",
            "maxItems": 8192,
            "items": { "type": "string" }
          }
        },
        "required": ["enabled", "source_cluster", "target_cluster"]
      },
      "ServiceKafkaMirrorMakerCreateReplicationFlowResponse": {
        "type": "object",
        "description": "ServiceKafkaMirrorMakerCreateReplicationFlowResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceKafkaMirrorMakerDeleteReplicationFlowResponse": {
        "type": "object",
        "description": "ServiceKafkaMirrorMakerDeleteReplicationFlowResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceKafkaMirrorMakerGetReplicationFlowResponse": {
        "type": "object",
        "description": "ServiceKafkaMirrorMakerGetReplicationFlowResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "replication_flow": {
            "type": "object",
            "description": "Replication flow",
            "properties": {
              "config_properties_exclude": {
                "type": "string",
                "description": "Topic configuration properties that should not be replicated",
                "maxLength": 2048
              },
              "emit_backward_heartbeats_enabled": {
                "type": "boolean",
                "description": "Emit backward heartbeats enabled"
              },
              "emit_heartbeats_enabled": {
                "type": "boolean",
                "description": "Emit heartbeats enabled"
              },
              "enabled": {
                "type": "boolean",
                "description": "Is replication flow enabled"
              },
              "exactly_once_delivery_enabled": {
                "type": "boolean",
                "description": "Enable exactly-once message delivery"
              },
              "offset_lag_max": {
                "type": "integer",
                "description": "How out-of-sync a remote partition can be before it is resynced",
                "minimum": 0
              },
              "offset_syncs_topic_location": {
                "type": "string",
                "description": "Offset syncs topic location",
                "enum": ["source", "target"]
              },
              "replication_factor": {
                "type": "integer",
                "description": "Replication factor",
                "minimum": 1
              },
              "replication_policy_class": {
                "type": "string",
                "description": "Replication policy class",
                "enum": [
                  "org.apache.kafka.connect.mirror.DefaultReplicationPolicy",
                  "org.apache.kafka.connect.mirror.IdentityReplicationPolicy"
                ]
              },
              "replication_progress": {
                "type": "number",
                "description": "Replication progress",
                "minimum": 0,
                "maximum": 1
              },
              "source_cluster": {
                "type": "string",
                "description": "Source cluster alias",
                "maxLength": 128
              },
              "sync_group_offsets_enabled": {
                "type": "boolean",
                "description": "Sync consumer group offsets"
              },
              "sync_group_offsets_interval_seconds": {
                "type": "integer",
                "description": "Frequency of consumer group offset sync",
                "minimum": 1
              },
              "target_cluster": {
                "type": "string",
                "description": "Target cluster alias",
                "maxLength": 128
              },
              "topics": {
                "type": "array",
                "description": "List of topics and/or regular expressions to replicate.\n\nTopic names and regular expressions that match topic names that should be replicated. MirrorMaker will replicate these topics if they are not matched by &quot;topics.exclude&quot;. Currently defaults to [&quot;.*&quot;].",
                "maxItems": 8192,
                "items": { "type": "string" }
              },
              "topics.blacklist": {
                "type": "array",
                "description": "List of topics and/or regular expressions to not replicate. Deprecated property, use 'topics_exclude instead'.\n\nTopic names and regular expressions that match topic names that should not be replicated. MirrorMaker will not replicate these topics even if they are matched by &quot;topics&quot;. If not set, MM2 uses the default exclusion.",
                "maxItems": 8192,
                "items": { "type": "string" }
              },
              "topics.exclude": {
                "type": "array",
                "description": "List of topics and/or regular expressions to not replicate. Deprecated property, use 'topics_exclude instead'.\n\nTopic names and regular expressions that match topic names that should not be replicated. MirrorMaker will not replicate these topics even if they are matched by &quot;topics&quot;. If not set, MM2 uses the default exclusion.",
                "maxItems": 8192,
                "items": { "type": "string" }
              },
              "topics_exclude": {
                "type": "array",
                "description": "List of topics and/or regular expressions to not replicate.\n\nTopic names and regular expressions that match topic names that should not be replicated. MirrorMaker will not replicate these topics even if they are matched by &quot;topics&quot;. If not set, MM2 uses the default exclusion.",
                "maxItems": 8192,
                "items": { "type": "string" }
              }
            },
            "required": ["enabled", "source_cluster", "target_cluster"]
          }
        },
        "required": ["replication_flow"]
      },
      "ServiceKafkaMirrorMakerGetReplicationFlowsResponse": {
        "type": "object",
        "description": "ServiceKafkaMirrorMakerGetReplicationFlowsResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "replication_flows": {
            "type": "array",
            "description": "Replication flows\n\nDescribes data replication flows between Kafka clusters",
            "maxItems": 256,
            "items": {
              "type": "object",
              "properties": {
                "config_properties_exclude": {
                  "type": "string",
                  "description": "Topic configuration properties that should not be replicated",
                  "maxLength": 2048
                },
                "emit_backward_heartbeats_enabled": {
                  "type": "boolean",
                  "description": "Emit backward heartbeats enabled"
                },
                "emit_heartbeats_enabled": {
                  "type": "boolean",
                  "description": "Emit heartbeats enabled"
                },
                "enabled": {
                  "type": "boolean",
                  "description": "Is replication flow enabled"
                },
                "exactly_once_delivery_enabled": {
                  "type": "boolean",
                  "description": "Enable exactly-once message delivery"
                },
                "offset_lag_max": {
                  "type": "integer",
                  "description": "How out-of-sync a remote partition can be before it is resynced",
                  "minimum": 0
                },
                "offset_syncs_topic_location": {
                  "type": "string",
                  "description": "Offset syncs topic location",
                  "enum": ["source", "target"]
                },
                "replication_factor": {
                  "type": "integer",
                  "description": "Replication factor",
                  "minimum": 1
                },
                "replication_policy_class": {
                  "type": "string",
                  "description": "Replication policy class",
                  "enum": [
                    "org.apache.kafka.connect.mirror.DefaultReplicationPolicy",
                    "org.apache.kafka.connect.mirror.IdentityReplicationPolicy"
                  ]
                },
                "replication_progress": {
                  "type": "number",
                  "description": "Replication progress",
                  "minimum": 0,
                  "maximum": 1
                },
                "source_cluster": {
                  "type": "string",
                  "description": "Source cluster alias",
                  "maxLength": 128
                },
                "sync_group_offsets_enabled": {
                  "type": "boolean",
                  "description": "Sync consumer group offsets"
                },
                "sync_group_offsets_interval_seconds": {
                  "type": "integer",
                  "description": "Frequency of consumer group offset sync",
                  "minimum": 1
                },
                "target_cluster": {
                  "type": "string",
                  "description": "Target cluster alias",
                  "maxLength": 128
                },
                "topics": {
                  "type": "array",
                  "description": "List of topics and/or regular expressions to replicate.\n\nTopic names and regular expressions that match topic names that should be replicated. MirrorMaker will replicate these topics if they are not matched by &quot;topics.exclude&quot;. Currently defaults to [&quot;.*&quot;].",
                  "maxItems": 8192,
                  "items": { "type": "string" }
                },
                "topics.blacklist": {
                  "type": "array",
                  "description": "List of topics and/or regular expressions to not replicate. Deprecated property, use 'topics_exclude instead'.\n\nTopic names and regular expressions that match topic names that should not be replicated. MirrorMaker will not replicate these topics even if they are matched by &quot;topics&quot;. If not set, MM2 uses the default exclusion.",
                  "maxItems": 8192,
                  "items": { "type": "string" }
                },
                "topics.exclude": {
                  "type": "array",
                  "description": "List of topics and/or regular expressions to not replicate. Deprecated property, use 'topics_exclude instead'.\n\nTopic names and regular expressions that match topic names that should not be replicated. MirrorMaker will not replicate these topics even if they are matched by &quot;topics&quot;. If not set, MM2 uses the default exclusion.",
                  "maxItems": 8192,
                  "items": { "type": "string" }
                },
                "topics_exclude": {
                  "type": "array",
                  "description": "List of topics and/or regular expressions to not replicate.\n\nTopic names and regular expressions that match topic names that should not be replicated. MirrorMaker will not replicate these topics even if they are matched by &quot;topics&quot;. If not set, MM2 uses the default exclusion.",
                  "maxItems": 8192,
                  "items": { "type": "string" }
                }
              },
              "required": ["enabled", "source_cluster", "target_cluster"]
            }
          }
        },
        "required": ["replication_flows"]
      },
      "ServiceKafkaMirrorMakerPatchReplicationFlowRequestBody": {
        "type": "object",
        "description": "ServiceKafkaMirrorMakerPatchReplicationFlowRequestBody",
        "properties": {
          "config_properties_exclude": {
            "type": "string",
            "description": "Topic configuration properties that should not be replicated",
            "maxLength": 2048
          },
          "emit_backward_heartbeats_enabled": {
            "type": "boolean",
            "description": "Emit backward heartbeats enabled"
          },
          "emit_heartbeats_enabled": {
            "type": "boolean",
            "description": "Emit heartbeats enabled"
          },
          "enabled": {
            "type": "boolean",
            "description": "Is replication flow enabled"
          },
          "exactly_once_delivery_enabled": {
            "type": "boolean",
            "description": "Enable exactly-once message delivery"
          },
          "offset_lag_max": {
            "type": "integer",
            "description": "How out-of-sync a remote partition can be before it is resynced",
            "minimum": 0
          },
          "offset_syncs_topic_location": {
            "type": "string",
            "description": "Offset syncs topic location",
            "enum": ["source", "target"]
          },
          "replication_factor": {
            "type": "integer",
            "description": "Replication factor",
            "minimum": 1
          },
          "replication_policy_class": {
            "type": "string",
            "description": "Replication policy class",
            "enum": [
              "org.apache.kafka.connect.mirror.DefaultReplicationPolicy",
              "org.apache.kafka.connect.mirror.IdentityReplicationPolicy"
            ]
          },
          "sync_group_offsets_enabled": {
            "type": "boolean",
            "description": "Sync consumer group offsets"
          },
          "sync_group_offsets_interval_seconds": {
            "type": "integer",
            "description": "Frequency of consumer group offset sync",
            "minimum": 1
          },
          "topics": {
            "type": "array",
            "description": "List of topics and/or regular expressions to replicate.\n\nTopic names and regular expressions that match topic names that should be replicated. MirrorMaker will replicate these topics if they are not matched by &quot;topics.exclude&quot;. Currently defaults to [&quot;.*&quot;].",
            "maxItems": 8192,
            "items": { "type": "string" }
          },
          "topics.blacklist": {
            "type": "array",
            "description": "List of topics and/or regular expressions to not replicate. Deprecated property, use 'topics_exclude instead'.\n\nTopic names and regular expressions that match topic names that should not be replicated. MirrorMaker will not replicate these topics even if they are matched by &quot;topics&quot;. If not set, MM2 uses the default exclusion.",
            "maxItems": 8192,
            "items": { "type": "string" }
          },
          "topics.exclude": {
            "type": "array",
            "description": "List of topics and/or regular expressions to not replicate. Deprecated property, use 'topics_exclude instead'.\n\nTopic names and regular expressions that match topic names that should not be replicated. MirrorMaker will not replicate these topics even if they are matched by &quot;topics&quot;. If not set, MM2 uses the default exclusion.",
            "maxItems": 8192,
            "items": { "type": "string" }
          },
          "topics_exclude": {
            "type": "array",
            "description": "List of topics and/or regular expressions to not replicate.\n\nTopic names and regular expressions that match topic names that should not be replicated. MirrorMaker will not replicate these topics even if they are matched by &quot;topics&quot;. If not set, MM2 uses the default exclusion.",
            "maxItems": 8192,
            "items": { "type": "string" }
          }
        }
      },
      "ServiceKafkaMirrorMakerPatchReplicationFlowResponse": {
        "type": "object",
        "description": "ServiceKafkaMirrorMakerPatchReplicationFlowResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "replication_flow": {
            "type": "object",
            "description": "Replication flow",
            "properties": {
              "config_properties_exclude": {
                "type": "string",
                "description": "Topic configuration properties that should not be replicated",
                "maxLength": 2048
              },
              "emit_backward_heartbeats_enabled": {
                "type": "boolean",
                "description": "Emit backward heartbeats enabled"
              },
              "emit_heartbeats_enabled": {
                "type": "boolean",
                "description": "Emit heartbeats enabled"
              },
              "enabled": {
                "type": "boolean",
                "description": "Is replication flow enabled"
              },
              "exactly_once_delivery_enabled": {
                "type": "boolean",
                "description": "Enable exactly-once message delivery"
              },
              "offset_lag_max": {
                "type": "integer",
                "description": "How out-of-sync a remote partition can be before it is resynced",
                "minimum": 0
              },
              "offset_syncs_topic_location": {
                "type": "string",
                "description": "Offset syncs topic location",
                "enum": ["source", "target"]
              },
              "replication_factor": {
                "type": "integer",
                "description": "Replication factor",
                "minimum": 1
              },
              "replication_policy_class": {
                "type": "string",
                "description": "Replication policy class",
                "enum": [
                  "org.apache.kafka.connect.mirror.DefaultReplicationPolicy",
                  "org.apache.kafka.connect.mirror.IdentityReplicationPolicy"
                ]
              },
              "replication_progress": {
                "type": "number",
                "description": "Replication progress",
                "minimum": 0,
                "maximum": 1
              },
              "source_cluster": {
                "type": "string",
                "description": "Source cluster alias",
                "maxLength": 128
              },
              "sync_group_offsets_enabled": {
                "type": "boolean",
                "description": "Sync consumer group offsets"
              },
              "sync_group_offsets_interval_seconds": {
                "type": "integer",
                "description": "Frequency of consumer group offset sync",
                "minimum": 1
              },
              "target_cluster": {
                "type": "string",
                "description": "Target cluster alias",
                "maxLength": 128
              },
              "topics": {
                "type": "array",
                "description": "List of topics and/or regular expressions to replicate.\n\nTopic names and regular expressions that match topic names that should be replicated. MirrorMaker will replicate these topics if they are not matched by &quot;topics.exclude&quot;. Currently defaults to [&quot;.*&quot;].",
                "maxItems": 8192,
                "items": { "type": "string" }
              },
              "topics.blacklist": {
                "type": "array",
                "description": "List of topics and/or regular expressions to not replicate. Deprecated property, use 'topics_exclude instead'.\n\nTopic names and regular expressions that match topic names that should not be replicated. MirrorMaker will not replicate these topics even if they are matched by &quot;topics&quot;. If not set, MM2 uses the default exclusion.",
                "maxItems": 8192,
                "items": { "type": "string" }
              },
              "topics.exclude": {
                "type": "array",
                "description": "List of topics and/or regular expressions to not replicate. Deprecated property, use 'topics_exclude instead'.\n\nTopic names and regular expressions that match topic names that should not be replicated. MirrorMaker will not replicate these topics even if they are matched by &quot;topics&quot;. If not set, MM2 uses the default exclusion.",
                "maxItems": 8192,
                "items": { "type": "string" }
              },
              "topics_exclude": {
                "type": "array",
                "description": "List of topics and/or regular expressions to not replicate.\n\nTopic names and regular expressions that match topic names that should not be replicated. MirrorMaker will not replicate these topics even if they are matched by &quot;topics&quot;. If not set, MM2 uses the default exclusion.",
                "maxItems": 8192,
                "items": { "type": "string" }
              }
            },
            "required": ["enabled", "source_cluster", "target_cluster"]
          }
        },
        "required": ["replication_flow"]
      },
      "MySQLServiceQueryStatisticsRequestBody": {
        "type": "object",
        "description": "MySQLServiceQueryStatisticsRequestBody",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "Limit for number of results",
            "minimum": 1,
            "maximum": 5000
          },
          "offset": {
            "type": "integer",
            "description": "Offset for retrieved results based on sort order",
            "minimum": 0
          },
          "order_by": {
            "type": "string",
            "description": "Order in which to sort retrieved results",
            "maxLength": 256
          }
        }
      },
      "MySQLServiceQueryStatisticsResponse": {
        "type": "object",
        "description": "MySQLServiceQueryStatisticsResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "queries": {
            "type": "array",
            "description": "List of query statistics",
            "items": {
              "type": "object",
              "properties": {
                "avg_timer_wait": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "count_star": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "digest": {
                  "type": "string",
                  "description": "Query statistic"
                },
                "digest_text": {
                  "type": "string",
                  "description": "Query statistic"
                },
                "first_seen": {
                  "type": "string",
                  "description": "Query statistic"
                },
                "last_seen": {
                  "type": "string",
                  "description": "Query statistic"
                },
                "max_timer_wait": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "min_timer_wait": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "quantile_95": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "quantile_99": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "quantile_999": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "query_sample_seen": {
                  "type": "string",
                  "description": "Query statistic"
                },
                "query_sample_text": {
                  "type": "string",
                  "description": "Query statistic"
                },
                "query_sample_timer_wait": {
                  "type": "string",
                  "description": "Query statistic"
                },
                "schema_name": {
                  "type": "string",
                  "description": "Query statistic"
                },
                "sum_created_tmp_disk_tables": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_created_tmp_tables": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_errors": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_lock_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_no_good_index_used": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_no_index_used": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_rows_affected": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_rows_examined": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_rows_sent": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_select_full_join": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_select_full_range_join": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_select_range": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_select_range_check": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_select_scan": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_sort_merge_passes": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_sort_range": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_sort_rows": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_sort_scan": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_timer_wait": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_warnings": {
                  "type": "number",
                  "description": "Query statistic"
                }
              }
            }
          }
        },
        "required": ["queries"]
      },
      "ServiceOpenSearchAclGetResponse": {
        "type": "object",
        "description": "ServiceOpenSearchAclGetResponse",
        "properties": {
          "elasticsearch_version": {
            "type": "string",
            "description": "Elasticsearch major version",
            "enum": ["7", "1", "2"]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "opensearch_acl_config": {
            "type": "object",
            "description": "OpenSearch ACL configuration",
            "properties": {
              "acls": {
                "type": "array",
                "description": "List of OpenSearch ACLs",
                "maxItems": 512,
                "items": {
                  "type": "object",
                  "properties": {
                    "rules": {
                      "type": "array",
                      "description": "OpenSearch rules",
                      "maxItems": 256,
                      "items": {
                        "type": "object",
                        "properties": {
                          "index": {
                            "type": "string",
                            "description": "OpenSearch index pattern",
                            "minLength": 1,
                            "maxLength": 249
                          },
                          "permission": {
                            "type": "string",
                            "description": "OpenSearch permission",
                            "enum": [
                              "deny",
                              "admin",
                              "read",
                              "readwrite",
                              "write"
                            ]
                          }
                        },
                        "required": ["index", "permission"]
                      }
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": ["rules", "username"]
                }
              },
              "enabled": {
                "type": "boolean",
                "description": "Enable OpenSearch ACLs. When disabled authenticated service users have unrestricted access."
              }
            },
            "required": ["acls", "enabled"]
          }
        },
        "required": ["opensearch_acl_config"]
      },
      "ServiceOpenSearchAclSetRequestBody": {
        "type": "object",
        "description": "ServiceOpenSearchAclSetRequestBody",
        "properties": {
          "elasticsearch_version": {
            "type": "string",
            "description": "Elasticsearch major version",
            "enum": ["7", "1", "2"]
          },
          "opensearch_acl_config": {
            "type": "object",
            "description": "OpenSearch ACL configuration",
            "properties": {
              "acls": {
                "type": "array",
                "description": "List of OpenSearch ACLs",
                "maxItems": 512,
                "items": {
                  "type": "object",
                  "properties": {
                    "rules": {
                      "type": "array",
                      "description": "OpenSearch rules",
                      "maxItems": 256,
                      "items": {
                        "type": "object",
                        "properties": {
                          "index": {
                            "type": "string",
                            "description": "OpenSearch index pattern",
                            "minLength": 1,
                            "maxLength": 249
                          },
                          "permission": {
                            "type": "string",
                            "description": "OpenSearch permission",
                            "enum": [
                              "deny",
                              "admin",
                              "read",
                              "readwrite",
                              "write"
                            ]
                          }
                        },
                        "required": ["index", "permission"]
                      }
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": ["rules", "username"]
                }
              },
              "enabled": {
                "type": "boolean",
                "description": "Enable OpenSearch ACLs. When disabled authenticated service users have unrestricted access."
              }
            },
            "required": ["acls", "enabled"]
          }
        },
        "required": ["opensearch_acl_config"]
      },
      "ServiceOpenSearchAclSetResponse": {
        "type": "object",
        "description": "ServiceOpenSearchAclSetResponse",
        "properties": {
          "elasticsearch_version": {
            "type": "string",
            "description": "Elasticsearch major version",
            "enum": ["7", "1", "2"]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "opensearch_acl_config": {
            "type": "object",
            "description": "OpenSearch ACL configuration",
            "properties": {
              "acls": {
                "type": "array",
                "description": "List of OpenSearch ACLs",
                "maxItems": 512,
                "items": {
                  "type": "object",
                  "properties": {
                    "rules": {
                      "type": "array",
                      "description": "OpenSearch rules",
                      "maxItems": 256,
                      "items": {
                        "type": "object",
                        "properties": {
                          "index": {
                            "type": "string",
                            "description": "OpenSearch index pattern",
                            "minLength": 1,
                            "maxLength": 249
                          },
                          "permission": {
                            "type": "string",
                            "description": "OpenSearch permission",
                            "enum": [
                              "deny",
                              "admin",
                              "read",
                              "readwrite",
                              "write"
                            ]
                          }
                        },
                        "required": ["index", "permission"]
                      }
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": ["rules", "username"]
                }
              },
              "enabled": {
                "type": "boolean",
                "description": "Enable OpenSearch ACLs. When disabled authenticated service users have unrestricted access."
              }
            },
            "required": ["acls", "enabled"]
          }
        },
        "required": ["opensearch_acl_config"]
      },
      "ServiceOpenSearchAclUpdateRequestBody": {
        "type": "object",
        "description": "ServiceOpenSearchAclUpdateRequestBody",
        "properties": {
          "elasticsearch_version": {
            "type": "string",
            "description": "Elasticsearch major version",
            "enum": ["7", "1", "2"]
          },
          "opensearch_acl_config": {
            "type": "object",
            "description": "OpenSearch ACL configuration",
            "properties": {
              "acls": {
                "type": "array",
                "description": "List of OpenSearch ACLs",
                "maxItems": 512,
                "items": {
                  "type": "object",
                  "properties": {
                    "rules": {
                      "type": "array",
                      "description": "OpenSearch rules",
                      "maxItems": 256,
                      "items": {
                        "type": "object",
                        "properties": {
                          "index": {
                            "type": "string",
                            "description": "OpenSearch index pattern",
                            "minLength": 1,
                            "maxLength": 249
                          },
                          "permission": {
                            "type": "string",
                            "description": "OpenSearch permission",
                            "enum": [
                              "deny",
                              "admin",
                              "read",
                              "readwrite",
                              "write"
                            ]
                          }
                        },
                        "required": ["index", "permission"]
                      }
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": ["rules", "username"]
                }
              },
              "enabled": {
                "type": "boolean",
                "description": "Enable OpenSearch ACLs. When disabled authenticated service users have unrestricted access."
              }
            }
          }
        },
        "required": ["opensearch_acl_config"]
      },
      "ServiceOpenSearchAclUpdateResponse": {
        "type": "object",
        "description": "ServiceOpenSearchAclUpdateResponse",
        "properties": {
          "elasticsearch_version": {
            "type": "string",
            "description": "Elasticsearch major version",
            "enum": ["7", "1", "2"]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "opensearch_acl_config": {
            "type": "object",
            "description": "OpenSearch ACL configuration",
            "properties": {
              "acls": {
                "type": "array",
                "description": "List of OpenSearch ACLs",
                "maxItems": 512,
                "items": {
                  "type": "object",
                  "properties": {
                    "rules": {
                      "type": "array",
                      "description": "OpenSearch rules",
                      "maxItems": 256,
                      "items": {
                        "type": "object",
                        "properties": {
                          "index": {
                            "type": "string",
                            "description": "OpenSearch index pattern",
                            "minLength": 1,
                            "maxLength": 249
                          },
                          "permission": {
                            "type": "string",
                            "description": "OpenSearch permission",
                            "enum": [
                              "deny",
                              "admin",
                              "read",
                              "readwrite",
                              "write"
                            ]
                          }
                        },
                        "required": ["index", "permission"]
                      }
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": ["rules", "username"]
                }
              },
              "enabled": {
                "type": "boolean",
                "description": "Enable OpenSearch ACLs. When disabled authenticated service users have unrestricted access."
              }
            },
            "required": ["acls", "enabled"]
          }
        },
        "required": ["opensearch_acl_config"]
      },
      "ServiceOpenSearchIndexDeleteResponse": {
        "type": "object",
        "description": "ServiceOpenSearchIndexDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceOpenSearchIndexListResponse": {
        "type": "object",
        "description": "ServiceOpenSearchIndexListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "indexes": {
            "type": "array",
            "description": "List of OpenSearch indexes",
            "items": {
              "type": "object",
              "properties": {
                "create_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "docs": {
                  "type": "integer",
                  "description": "Number of documents in index. -1 means not available."
                },
                "health": {
                  "type": "string",
                  "description": "Index health",
                  "enum": ["green", "yellow", "red", "red*", "unknown"]
                },
                "index_name": { "type": "string", "description": "Index name" },
                "number_of_replicas": {
                  "type": "integer",
                  "description": "Number of replicas for an index",
                  "minimum": 0
                },
                "number_of_shards": {
                  "type": "integer",
                  "description": "Number of shards in an index",
                  "minimum": 1
                },
                "read_only_allow_delete": {
                  "type": "boolean",
                  "description": "Whether an index is set as read-only (but allows deletion). null means unknown."
                },
                "replication": {
                  "type": "object",
                  "description": "Index replication",
                  "properties": {
                    "leader_index": {
                      "type": "string",
                      "description": "Leader index name"
                    },
                    "leader_project": {
                      "type": "string",
                      "description": "Leader project name"
                    },
                    "leader_service": {
                      "type": "string",
                      "description": "Leader service name"
                    }
                  }
                },
                "size": {
                  "type": "integer",
                  "description": "Index size in bytes. -1 means not available."
                },
                "status": {
                  "type": "string",
                  "description": "Index status",
                  "enum": ["unknown", "open", "close", "none"]
                }
              },
              "required": [
                "create_time",
                "index_name",
                "number_of_replicas",
                "number_of_shards"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["indexes"]
      },
      "ServiceOpenSearchSecurityGetResponse": {
        "type": "object",
        "description": "ServiceOpenSearchSecurityGetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "security_plugin_admin_enabled": {
            "type": "boolean",
            "description": "security plugin admin defined"
          },
          "security_plugin_available": {
            "type": "boolean",
            "description": "Opensearch security available for the service"
          },
          "security_plugin_enabled": {
            "type": "boolean",
            "description": "Opensearch security enabled for the service"
          }
        },
        "required": [
          "security_plugin_admin_enabled",
          "security_plugin_available"
        ]
      },
      "ServiceOpenSearchSecurityResetRequestBody": {
        "type": "object",
        "description": "ServiceOpenSearchSecurityResetRequestBody",
        "properties": {
          "admin_password": {
            "type": "string",
            "description": "Current os-sec-admin password",
            "minLength": 8,
            "maxLength": 256
          },
          "new_password": {
            "type": "string",
            "description": "New os-sec-admin password",
            "minLength": 8,
            "maxLength": 256
          }
        },
        "required": ["admin_password", "new_password"]
      },
      "ServiceOpenSearchSecurityResetResponse": {
        "type": "object",
        "description": "ServiceOpenSearchSecurityResetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "security_plugin_admin_enabled": {
            "type": "boolean",
            "description": "security plugin admin defined"
          },
          "security_plugin_available": {
            "type": "boolean",
            "description": "Opensearch security available for the service"
          },
          "security_plugin_enabled": {
            "type": "boolean",
            "description": "Opensearch security enabled for the service"
          }
        },
        "required": [
          "security_plugin_admin_enabled",
          "security_plugin_available"
        ]
      },
      "ServiceOpenSearchSecuritySetRequestBody": {
        "type": "object",
        "description": "ServiceOpenSearchSecuritySetRequestBody",
        "properties": {
          "admin_password": {
            "type": "string",
            "description": "os-sec-admin password",
            "minLength": 8,
            "maxLength": 256
          }
        },
        "required": ["admin_password"]
      },
      "ServiceOpenSearchSecuritySetResponse": {
        "type": "object",
        "description": "ServiceOpenSearchSecuritySetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "security_plugin_admin_enabled": {
            "type": "boolean",
            "description": "security plugin admin defined"
          },
          "security_plugin_available": {
            "type": "boolean",
            "description": "Opensearch security available for the service"
          },
          "security_plugin_enabled": {
            "type": "boolean",
            "description": "Opensearch security enabled for the service"
          }
        },
        "required": [
          "security_plugin_admin_enabled",
          "security_plugin_available"
        ]
      },
      "PGServiceAvailableExtensionsResponse": {
        "type": "object",
        "description": "PGServiceAvailableExtensionsResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "extensions": {
            "type": "array",
            "description": "Extensions available for loading with CREATE EXTENSION in this service",
            "items": {
              "type": "object",
              "properties": {
                "name": { "type": "string", "description": "Extension name" },
                "versions": {
                  "type": "array",
                  "description": "Extension versions available",
                  "items": { "type": "string" }
                }
              },
              "required": ["name"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["extensions"]
      },
      "PGServiceQueryStatisticsRequestBody": {
        "type": "object",
        "description": "PGServiceQueryStatisticsRequestBody",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "Limit for number of results",
            "minimum": 1,
            "maximum": 5000
          },
          "offset": {
            "type": "integer",
            "description": "Offset for retrieved results based on sort order",
            "minimum": 0
          },
          "order_by": {
            "type": "string",
            "description": "Order in which to sort retrieved results",
            "maxLength": 256
          }
        }
      },
      "PGServiceQueryStatisticsResponse": {
        "type": "object",
        "description": "PGServiceQueryStatisticsResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "queries": {
            "type": "array",
            "description": "List of query statistics",
            "items": {
              "type": "object",
              "properties": {
                "blk_read_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "blk_write_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "calls": { "type": "number", "description": "Query statistic" },
                "database_name": {
                  "type": "string",
                  "description": "Query statistic"
                },
                "local_blks_dirtied": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "local_blks_hit": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "local_blks_read": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "local_blks_written": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "max_plan_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "max_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "mean_plan_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "mean_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "min_plan_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "min_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "query": { "type": "string", "description": "Query statistic" },
                "queryid": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "rows": { "type": "number", "description": "Query statistic" },
                "shared_blks_dirtied": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "shared_blks_hit": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "shared_blks_read": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "shared_blks_written": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "stddev_plan_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "stddev_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "temp_blks_read": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "temp_blks_written": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "total_plan_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "total_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "user_name": {
                  "type": "string",
                  "description": "Query statistic"
                },
                "wal_bytes": {
                  "type": "string",
                  "description": "Query statistic"
                },
                "wal_fpi": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "wal_records": {
                  "type": "number",
                  "description": "Query statistic"
                }
              }
            }
          }
        },
        "required": ["queries"]
      },
      "PGServiceQueryStatisticsDeprecatedRequestBody": {
        "type": "object",
        "description": "PGServiceQueryStatisticsDeprecatedRequestBody",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "Limit for number of results",
            "minimum": 1,
            "maximum": 5000
          },
          "offset": {
            "type": "integer",
            "description": "Offset for retrieved results based on sort order",
            "minimum": 0
          },
          "order_by": {
            "type": "string",
            "description": "Order in which to sort retrieved results",
            "maxLength": 256
          }
        }
      },
      "PGServiceQueryStatisticsDeprecatedResponse": {
        "type": "object",
        "description": "PGServiceQueryStatisticsDeprecatedResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "queries": {
            "type": "array",
            "description": "List of query statistics",
            "items": {
              "type": "object",
              "properties": {
                "blk_read_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "blk_write_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "calls": { "type": "number", "description": "Query statistic" },
                "database_name": {
                  "type": "string",
                  "description": "Query statistic"
                },
                "local_blks_dirtied": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "local_blks_hit": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "local_blks_read": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "local_blks_written": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "max_plan_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "max_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "mean_plan_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "mean_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "min_plan_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "min_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "query": { "type": "string", "description": "Query statistic" },
                "queryid": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "rows": { "type": "number", "description": "Query statistic" },
                "shared_blks_dirtied": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "shared_blks_hit": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "shared_blks_read": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "shared_blks_written": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "stddev_plan_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "stddev_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "temp_blks_read": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "temp_blks_written": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "total_plan_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "total_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "user_name": {
                  "type": "string",
                  "description": "Query statistic"
                },
                "wal_bytes": {
                  "type": "string",
                  "description": "Query statistic"
                },
                "wal_fpi": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "wal_records": {
                  "type": "number",
                  "description": "Query statistic"
                }
              }
            }
          }
        },
        "required": ["queries"]
      },
      "ServicePGBouncerCreateRequestBody": {
        "type": "object",
        "description": "ServicePGBouncerCreateRequestBody",
        "properties": {
          "database": {
            "type": "string",
            "description": "Service database name",
            "maxLength": 63
          },
          "pool_mode": {
            "type": "string",
            "description": "PGBouncer pool mode",
            "enum": ["session", "transaction", "statement"]
          },
          "pool_name": {
            "type": "string",
            "description": "Connection pool name",
            "maxLength": 63
          },
          "pool_size": {
            "type": "integer",
            "description": "Size of PGBouncer's PostgreSQL side connection pool",
            "minimum": 1,
            "maximum": 10000
          },
          "username": {
            "type": "string",
            "description": "Service username",
            "maxLength": 64
          }
        },
        "required": ["database", "pool_name"]
      },
      "ServicePGBouncerCreateResponse": {
        "type": "object",
        "description": "ServicePGBouncerCreateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServicePGBouncerDeleteResponse": {
        "type": "object",
        "description": "ServicePGBouncerDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServicePGBouncerUpdateRequestBody": {
        "type": "object",
        "description": "ServicePGBouncerUpdateRequestBody",
        "properties": {
          "database": {
            "type": "string",
            "description": "Service database name",
            "maxLength": 63
          },
          "pool_mode": {
            "type": "string",
            "description": "PGBouncer pool mode",
            "enum": ["session", "transaction", "statement"]
          },
          "pool_size": {
            "type": "integer",
            "description": "Size of PGBouncer's PostgreSQL side connection pool",
            "minimum": 1,
            "maximum": 10000
          },
          "username": {
            "type": "string",
            "description": "Service username",
            "maxLength": 64
          }
        }
      },
      "ServicePGBouncerUpdateResponse": {
        "type": "object",
        "description": "ServicePGBouncerUpdateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceThanosStorageSummaryResponse": {
        "type": "object",
        "description": "ServiceThanosStorageSummaryResponse",
        "properties": {
          "current_cost": {
            "type": "string",
            "description": "The current cost in USD of tiered storage since the beginning of the billing period"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "forecasted_cost": {
            "type": "string",
            "description": "The forecasted cost in USD of tiered storage in the billing period"
          },
          "forecasted_rate": {
            "type": "string",
            "description": "The rate on GBs/hour used to calculate the forecasted cost"
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "storage_usage_history": {
            "type": "object",
            "description": "History of usage and cumulative costs in the billing period",
            "properties": {
              "hourly": {
                "type": "array",
                "description": "History by hour",
                "items": {
                  "type": "object",
                  "properties": {
                    "estimated_cost": {
                      "type": "string",
                      "description": "The estimated cost in USD of tiered storage for this hour"
                    },
                    "hour_start": {
                      "type": "string",
                      "description": "Timestamp in ISO 8601 format, always in UTC",
                      "maxLength": 36
                    },
                    "peak_stored_bytes": {
                      "type": "integer",
                      "description": "Peak bytes stored on object storage at this hour",
                      "minimum": 0
                    }
                  },
                  "required": ["hour_start", "peak_stored_bytes"]
                }
              }
            },
            "required": ["hourly"]
          },
          "total_storage_usage": {
            "type": "integer",
            "description": "Total storage usage by tiered storage, in bytes",
            "minimum": 0
          }
        },
        "required": [
          "current_cost",
          "forecasted_cost",
          "storage_usage_history",
          "total_storage_usage"
        ]
      },
      "ListProjectServiceTypesResponse": {
        "type": "object",
        "description": "ListProjectServiceTypesResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service_types": {
            "type": "object",
            "description": "Service plans by service type",
            "properties": {
              "alloydbomni": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "cassandra": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "clickhouse": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "dragonfly": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "elasticsearch": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "flink": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "grafana": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "influxdb": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "kafka": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "kafka_connect": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "kafka_mirrormaker": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "m3aggregator": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "m3db": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "mysql": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "opensearch": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "pg": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "redis": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "thanos": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "valkey": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              }
            }
          }
        },
        "required": ["service_types"]
      },
      "ListPublicServiceTypesResponse": {
        "type": "object",
        "description": "ListPublicServiceTypesResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service_types": {
            "type": "object",
            "description": "Service plans by service type",
            "properties": {
              "alloydbomni": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "cassandra": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "clickhouse": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "dragonfly": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "elasticsearch": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "flink": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "grafana": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "influxdb": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "kafka": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "kafka_connect": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "kafka_mirrormaker": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "m3aggregator": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "m3db": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "mysql": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "opensearch": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "pg": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "redis": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "thanos": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              },
              "valkey": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": ["basic", "pitr"]
                            }
                          },
                          "required": ["interval", "max_count", "recovery_mode"]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              }
            }
          }
        },
        "required": ["service_types"]
      },
      "ListServiceVersionsResponse": {
        "type": "object",
        "description": "ListServiceVersionsResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service_versions": {
            "type": "array",
            "description": "Service versions",
            "items": {
              "type": "object",
              "properties": {
                "aiven_end_of_life_time": {
                  "type": "string",
                  "description": "Aiven end-of-life timestamp (ISO 8601)",
                  "maxLength": 36
                },
                "availability_end_time": {
                  "type": "string",
                  "description": "Availability end timestamp (ISO 8601)",
                  "maxLength": 36
                },
                "availability_start_time": {
                  "type": "string",
                  "description": "Availability start timestamp (ISO 8601)",
                  "maxLength": 36
                },
                "end_of_life_help_article_url": {
                  "type": "string",
                  "description": "Link to the help article"
                },
                "major_version": {
                  "type": "string",
                  "description": "Service version",
                  "maxLength": 32
                },
                "service_type": {
                  "type": "string",
                  "description": "Service type code",
                  "maxLength": 64
                },
                "state": {
                  "type": "string",
                  "description": "Service state",
                  "enum": [
                    "available",
                    "eol",
                    "preview",
                    "terminated",
                    "unavailable"
                  ]
                },
                "termination_time": {
                  "type": "string",
                  "description": "Termination timestamp (ISO 8601)",
                  "maxLength": 36
                },
                "upgrade_to_service_type": {
                  "type": "string",
                  "description": "If the customer takes no action, the service is updated to this service type when end of life is reached on the Aiven platform. If it is the same as the service type, the platform only upgrades the version.",
                  "maxLength": 64
                },
                "upgrade_to_version": {
                  "type": "string",
                  "description": "The version to which the service will be updated at the end of life on the Aiven platform if the user does not take any action",
                  "maxLength": 32
                },
                "upstream_end_of_life_time": {
                  "type": "string",
                  "description": "Upstream end-of-life timestamp (ISO 8601)",
                  "maxLength": 36
                }
              }
            }
          }
        },
        "required": ["service_versions"]
      },
      "PgAvailableExtensionsResponse": {
        "type": "object",
        "description": "PgAvailableExtensionsResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "pg": {
            "type": "array",
            "description": "Supported PostgreSQL versions",
            "items": {
              "type": "object",
              "properties": {
                "extensions": {
                  "type": "array",
                  "description": "Extensions available for loading with CREATE EXTENSION in this service",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Extension name"
                      },
                      "versions": {
                        "type": "array",
                        "description": "Extension versions available",
                        "items": { "type": "string" }
                      }
                    },
                    "required": ["name"]
                  }
                },
                "version": {
                  "type": "string",
                  "description": "PostgreSQL version"
                }
              },
              "required": ["extensions", "version"]
            }
          }
        }
      },
      "ProjectGetServiceLogsRequestBody": {
        "type": "object",
        "description": "ProjectGetServiceLogsRequestBody",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "How many log entries to receive at most",
            "minimum": 1,
            "maximum": 500
          },
          "offset": {
            "type": "string",
            "description": "Opaque offset identifier",
            "maxLength": 128
          },
          "sort_order": {
            "type": "string",
            "description": "Sort order for log messages",
            "enum": ["desc", "asc"]
          }
        }
      },
      "ProjectGetServiceLogsResponse": {
        "type": "object",
        "description": "ProjectGetServiceLogsResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "first_log_offset": {
            "type": "string",
            "description": "Opaque offset identifier of the first received log message. A null value is returned when there are no logs at all."
          },
          "logs": {
            "type": "array",
            "description": "List of log entries",
            "items": {
              "type": "object",
              "properties": {
                "msg": { "type": "string", "description": "Log message" },
                "time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "unit": { "type": "string", "description": "SystemD unit name" }
              },
              "required": ["msg"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "offset": {
            "type": "string",
            "description": "Opaque offset identifier. A null value is returned when there are no logs at all."
          }
        },
        "required": ["first_log_offset", "logs", "offset"]
      },
      "ProjectServiceTagsListResponse": {
        "type": "object",
        "description": "ProjectServiceTagsListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "tags": {
            "type": "object",
            "description": "Set of resource tags",
            "properties": {}
          }
        }
      },
      "ProjectServiceTagsReplaceRequestBody": {
        "type": "object",
        "description": "ProjectServiceTagsReplaceRequestBody",
        "properties": {
          "tags": {
            "type": "object",
            "description": "Set of resource tags",
            "properties": {}
          }
        },
        "required": ["tags"]
      },
      "ProjectServiceTagsReplaceResponse": {
        "type": "object",
        "description": "ProjectServiceTagsReplaceResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ProjectServiceTagsUpdateRequestBody": {
        "type": "object",
        "description": "ProjectServiceTagsUpdateRequestBody",
        "properties": {
          "tags": {
            "type": "object",
            "description": "Set of resource tags",
            "properties": {}
          }
        },
        "required": ["tags"]
      },
      "ProjectServiceTagsUpdateResponse": {
        "type": "object",
        "description": "ProjectServiceTagsUpdateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceAlertsListResponse": {
        "type": "object",
        "description": "ServiceAlertsListResponse",
        "properties": {
          "alerts": {
            "type": "array",
            "description": "List of active alerts for the service",
            "items": {
              "type": "object",
              "properties": {
                "create_time": {
                  "type": "string",
                  "description": "Event creation timestamp (ISO 8601)",
                  "maxLength": 36
                },
                "event": {
                  "type": "string",
                  "description": "Name of the alerting event"
                },
                "node_name": {
                  "type": "string",
                  "description": "Name of the service node"
                },
                "project_name": {
                  "type": "string",
                  "description": "Project name",
                  "maxLength": 63
                },
                "service_name": {
                  "type": "string",
                  "description": "Service name",
                  "minLength": 1,
                  "maxLength": 64
                },
                "service_type": {
                  "type": "string",
                  "description": "Service type code",
                  "maxLength": 64
                },
                "severity": {
                  "type": "string",
                  "description": "Severity of the event"
                }
              },
              "required": ["create_time", "event", "project_name", "severity"]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["alerts"]
      },
      "ServiceBackupToAnotherRegionReportRequestBody": {
        "type": "object",
        "description": "ServiceBackupToAnotherRegionReportRequestBody",
        "properties": {
          "period": {
            "type": "string",
            "description": "Metrics time period",
            "enum": ["hour", "day", "week", "month", "year"]
          }
        }
      },
      "ServiceBackupToAnotherRegionReportResponse": {
        "type": "object",
        "description": "ServiceBackupToAnotherRegionReportResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "metrics": {
            "type": "object",
            "description": "Service metrics in Google chart compatible format",
            "properties": {}
          }
        },
        "required": ["metrics"]
      },
      "ServiceBackupsGetResponse": {
        "type": "object",
        "description": "ServiceBackupsGetResponse",
        "properties": {
          "backups": {
            "type": "array",
            "description": "List of backups for the service",
            "items": {
              "type": "object",
              "properties": {
                "additional_regions": {
                  "type": "array",
                  "description": "Additional backup regions, if available",
                  "items": {
                    "type": "object",
                    "properties": {
                      "cloud": {
                        "type": "string",
                        "description": "Target cloud",
                        "maxLength": 256
                      },
                      "pause_reason": {
                        "type": "string",
                        "description": "Reason for pausing the backup synchronization"
                      },
                      "paused": {
                        "type": "boolean",
                        "description": "Indicates additional backup synchronization is paused"
                      },
                      "region": {
                        "type": "string",
                        "description": "Cloud storage region name"
                      }
                    },
                    "required": ["cloud"]
                  }
                },
                "backup_name": {
                  "type": "string",
                  "description": "Internal name of this backup"
                },
                "backup_time": {
                  "type": "string",
                  "description": "Backup timestamp (ISO 8601)",
                  "maxLength": 36
                },
                "data_size": {
                  "type": "integer",
                  "description": "Backup's original size before compression"
                },
                "storage_location": {
                  "type": "string",
                  "description": "Location where this backup is stored"
                },
                "tiered_storage_data_size": {
                  "type": "integer",
                  "description": "The amount of tiered storage data in bytes referenced by this backup."
                }
              },
              "required": ["backup_name", "backup_time", "data_size"]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "pitr": {
            "type": "object",
            "description": "Backup PITR metadata\n\nPoint-in-time-recovery metadata for the service. If not set, service type does not support PITR.",
            "properties": {
              "additional_regions": {
                "type": "array",
                "description": "Backup PITR metadata for additional backup regions\n\nEmpty array if BTAR is not enabled or BTAR+PITR is not supported.",
                "items": {
                  "type": "object",
                  "properties": {
                    "cloud": {
                      "type": "string",
                      "description": "Target cloud",
                      "maxLength": 256
                    },
                    "pitr_range_end": {
                      "type": "string",
                      "description": "Latest timestamp usable for PITR (ISO 8601) (always set)",
                      "maxLength": 36
                    },
                    "pitr_range_start": {
                      "type": "string",
                      "description": "Earliest timestamp usable for PITR (ISO 8601) (always set)",
                      "maxLength": 36
                    },
                    "region": {
                      "type": "string",
                      "description": "Cloud storage region name"
                    }
                  },
                  "required": [
                    "cloud",
                    "pitr_range_end",
                    "pitr_range_start",
                    "region"
                  ]
                }
              },
              "primary_region": {
                "type": "object",
                "description": "Backup PITR metadata primary\n\nPoint-in-time-recovery metadata related to the primary backup location of the service.",
                "properties": {
                  "pitr_range_end": {
                    "type": "string",
                    "description": "Latest timestamp usable for PITR (ISO 8601) (null means current time)",
                    "maxLength": 36
                  },
                  "pitr_range_start": {
                    "type": "string",
                    "description": "Earliest timestamp usable for PITR (ISO 8601) (null means no available backup for PITR)",
                    "maxLength": 36
                  }
                },
                "required": ["pitr_range_end", "pitr_range_start"]
              }
            },
            "required": ["additional_regions", "primary_region"]
          }
        },
        "required": ["backups"]
      },
      "ServiceCancelQueryRequestBody": {
        "type": "object",
        "description": "ServiceCancelQueryRequestBody",
        "properties": {
          "pid": {
            "type": "integer",
            "description": "Database server connection ID",
            "minimum": 0
          },
          "terminate": {
            "type": "boolean",
            "description": "Request immediate termination instead of soft cancel"
          }
        }
      },
      "ServiceCancelQueryResponse": {
        "type": "object",
        "description": "ServiceCancelQueryResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "success": {
            "type": "boolean",
            "description": "Status reported by the database server"
          }
        },
        "required": ["success"]
      },
      "ServiceCreateRequestBody": {
        "type": "object",
        "description": "ServiceCreateRequestBody",
        "properties": {
          "cloud": {
            "type": "string",
            "description": "Target cloud",
            "maxLength": 256
          },
          "copy_tags": {
            "type": "boolean",
            "description": "If this is a forked service, copy tags from the source service. If request contains additional tags, the tags copied from source are updated with them."
          },
          "disk_space_mb": {
            "type": "integer",
            "description": "Megabytes of disk space for data storage",
            "minimum": 0
          },
          "group_name": {
            "type": "string",
            "description": "Service group name (DEPRECATED: do not use)",
            "maxLength": 256
          },
          "maintenance": {
            "type": "object",
            "description": "Automatic maintenance settings",
            "properties": {
              "dow": {
                "type": "string",
                "description": "Day of week for installing updates",
                "enum": [
                  "monday",
                  "tuesday",
                  "wednesday",
                  "thursday",
                  "friday",
                  "saturday",
                  "sunday"
                ]
              },
              "time": {
                "type": "string",
                "description": "Time for installing updates, UTC",
                "minLength": 8,
                "maxLength": 8
              }
            }
          },
          "plan": {
            "type": "string",
            "description": "Subscription plan",
            "maxLength": 128
          },
          "project_vpc_id": {
            "type": "string",
            "description": "Project VPC ID",
            "minLength": 36,
            "maxLength": 36
          },
          "service_integrations": {
            "type": "array",
            "description": "Service integrations to enable for the service. Some integration types affect how a service is created and they must be provided as part of the creation call instead of being defined later.",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "dest_endpoint_id": {
                  "type": "string",
                  "description": "Integration destination endpoint ID",
                  "maxLength": 36
                },
                "dest_project": {
                  "type": "string",
                  "description": "Destination project name",
                  "maxLength": 63
                },
                "dest_service": {
                  "type": "string",
                  "description": "Destination service name",
                  "maxLength": 64
                },
                "integration_type": {
                  "type": "string",
                  "description": "Service integration type",
                  "enum": [
                    "alertmanager",
                    "application_service_credential",
                    "autoscaler",
                    "caching",
                    "cassandra_cross_service_cluster",
                    "clickhouse_credentials",
                    "clickhouse_kafka",
                    "clickhouse_postgresql",
                    "dashboard",
                    "datadog",
                    "datasource",
                    "disaster_recovery",
                    "external_aws_cloudwatch_logs",
                    "external_aws_cloudwatch_metrics",
                    "external_elasticsearch_logs",
                    "external_google_cloud_logging",
                    "external_opensearch_logs",
                    "flink",
                    "flink_external_bigquery",
                    "flink_external_kafka",
                    "flink_external_postgresql",
                    "internal_connectivity",
                    "jolokia",
                    "kafka_connect",
                    "kafka_connect_postgresql",
                    "kafka_logs",
                    "kafka_mirrormaker",
                    "logs",
                    "m3aggregator",
                    "m3coordinator",
                    "metrics",
                    "opensearch_cross_cluster_replication",
                    "opensearch_cross_cluster_search",
                    "prometheus",
                    "read_replica",
                    "rsyslog",
                    "schema_registry_proxy",
                    "stresstester",
                    "thanos_distributed_query",
                    "thanos_migrate",
                    "thanoscompactor",
                    "thanosquery",
                    "thanosruler",
                    "thanosstore",
                    "vector",
                    "vmalert"
                  ]
                },
                "source_endpoint_id": {
                  "type": "string",
                  "description": "Integration source endpoint ID",
                  "maxLength": 36
                },
                "source_project": {
                  "type": "string",
                  "description": "Source project name",
                  "maxLength": 63
                },
                "source_service": {
                  "type": "string",
                  "description": "Source service name",
                  "maxLength": 64
                },
                "user_config": {
                  "type": "object",
                  "description": "Service type-specific settings",
                  "properties": {}
                }
              },
              "required": ["integration_type"]
            }
          },
          "service_name": {
            "type": "string",
            "description": "Service name",
            "minLength": 1,
            "maxLength": 64
          },
          "service_type": {
            "type": "string",
            "description": "Service type code",
            "maxLength": 64
          },
          "static_ips": {
            "type": "array",
            "description": "Static IP addresses to associate with the service",
            "maxItems": 128,
            "items": { "type": "string" }
          },
          "tags": {
            "type": "object",
            "description": "Set of resource tags",
            "properties": {}
          },
          "tech_emails": {
            "type": "array",
            "description": "List of service technical email addresses",
            "maxItems": 10,
            "items": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                }
              },
              "required": ["email"]
            }
          },
          "termination_protection": {
            "type": "boolean",
            "description": "Service is protected against termination and powering off"
          },
          "user_config": {
            "type": "object",
            "description": "Service type-specific settings",
            "properties": {}
          }
        },
        "required": ["plan", "service_name", "service_type"]
      },
      "ServiceCreateResponse": {
        "type": "object",
        "description": "ServiceCreateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service": {
            "type": "object",
            "description": "Service information",
            "properties": {
              "acl": {
                "type": "array",
                "description": "List of Aiven ACL entries for Kafka service",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID",
                      "maxLength": 40
                    },
                    "permission": {
                      "type": "string",
                      "description": "Kafka permission",
                      "enum": ["admin", "read", "readwrite", "write"]
                    },
                    "topic": {
                      "type": "string",
                      "description": "Topic name pattern",
                      "minLength": 1,
                      "maxLength": 249
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": ["permission", "topic", "username"]
                }
              },
              "backups": {
                "type": "array",
                "description": "List of backups for the service",
                "items": {
                  "type": "object",
                  "properties": {
                    "additional_regions": {
                      "type": "array",
                      "description": "Additional backup regions, if available",
                      "items": {
                        "type": "object",
                        "properties": {
                          "cloud": {
                            "type": "string",
                            "description": "Target cloud",
                            "maxLength": 256
                          },
                          "pause_reason": {
                            "type": "string",
                            "description": "Reason for pausing the backup synchronization"
                          },
                          "paused": {
                            "type": "boolean",
                            "description": "Indicates additional backup synchronization is paused"
                          },
                          "region": {
                            "type": "string",
                            "description": "Cloud storage region name"
                          }
                        },
                        "required": ["cloud"]
                      }
                    },
                    "backup_name": {
                      "type": "string",
                      "description": "Internal name of this backup"
                    },
                    "backup_time": {
                      "type": "string",
                      "description": "Backup timestamp (ISO 8601)",
                      "maxLength": 36
                    },
                    "data_size": {
                      "type": "integer",
                      "description": "Backup's original size before compression"
                    },
                    "storage_location": {
                      "type": "string",
                      "description": "Location where this backup is stored"
                    },
                    "tiered_storage_data_size": {
                      "type": "integer",
                      "description": "The amount of tiered storage data in bytes referenced by this backup."
                    }
                  },
                  "required": ["backup_name", "backup_time", "data_size"]
                }
              },
              "cloud_description": {
                "type": "string",
                "description": "Cloud provider and location"
              },
              "cloud_name": {
                "type": "string",
                "description": "Target cloud",
                "maxLength": 256
              },
              "components": {
                "type": "array",
                "description": "Service component information objects",
                "items": {
                  "type": "object",
                  "properties": {
                    "component": {
                      "type": "string",
                      "description": "Service component name"
                    },
                    "host": {
                      "type": "string",
                      "description": "DNS name for connecting to the service component"
                    },
                    "kafka_authentication_method": {
                      "type": "string",
                      "description": "Kafka authentication method. This is a value specific to the 'kafka' service component",
                      "enum": ["certificate", "sasl"]
                    },
                    "kafka_ssl_ca": {
                      "type": "string",
                      "description": "Specifies if this port uses Project CA or Letsencrypt. If not specified, the default is using Project CA.This is a value specific to the 'kafka' service component.",
                      "enum": ["project_ca", "letsencrypt"]
                    },
                    "path": {
                      "type": "string",
                      "description": "Path component of the service URL (useful only if service component is HTTP or HTTPS endpoint)"
                    },
                    "port": {
                      "type": "integer",
                      "description": "Port number for connecting to the service component",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "privatelink_connection_id": {
                      "type": "string",
                      "description": "Privatelink connection ID"
                    },
                    "route": {
                      "type": "string",
                      "description": "Network access route",
                      "enum": ["dynamic", "public", "private", "privatelink"]
                    },
                    "ssl": {
                      "type": "boolean",
                      "description": "Whether the endpoint is encrypted or accepts plaintext. By default endpoints are always encrypted andthis property is only included for service components that may disable encryption."
                    },
                    "usage": {
                      "type": "string",
                      "description": "DNS usage name",
                      "enum": ["disaster_recovery", "primary", "replica"]
                    }
                  },
                  "required": ["component", "host", "port", "route", "usage"]
                }
              },
              "connection_info": {
                "type": "object",
                "description": "Service-specific connection information properties",
                "properties": {}
              },
              "connection_pools": {
                "type": "array",
                "description": "PostgreSQL PGBouncer connection pools",
                "items": {
                  "type": "object",
                  "properties": {
                    "connection_uri": {
                      "type": "string",
                      "description": "Connection URI for the DB pool"
                    },
                    "database": {
                      "type": "string",
                      "description": "Database name",
                      "maxLength": 63
                    },
                    "pool_mode": {
                      "type": "string",
                      "description": "PGBouncer pool mode",
                      "enum": ["session", "transaction", "statement"]
                    },
                    "pool_name": {
                      "type": "string",
                      "description": "Connection pool name",
                      "maxLength": 63
                    },
                    "pool_size": {
                      "type": "integer",
                      "description": "Size of PGBouncer's PostgreSQL side connection pool",
                      "minimum": 1,
                      "maximum": 10000
                    },
                    "username": {
                      "type": "string",
                      "description": "Pool username",
                      "maxLength": 64
                    }
                  },
                  "required": [
                    "connection_uri",
                    "database",
                    "pool_mode",
                    "pool_name",
                    "pool_size"
                  ]
                }
              },
              "create_time": {
                "type": "string",
                "description": "Service creation timestamp (ISO 8601)",
                "maxLength": 36
              },
              "databases": {
                "type": "array",
                "description": "List of service's user database names",
                "items": { "type": "string" }
              },
              "disk_space_mb": {
                "type": "integer",
                "description": "Megabytes of disk space for data storage",
                "minimum": 0
              },
              "features": {
                "type": "object",
                "description": "Feature flags",
                "properties": {}
              },
              "group_list": {
                "type": "array",
                "description": "List of service groups the service belongs to. This field is deprecated. It is always set to single element with value 'default'",
                "items": { "type": "string" }
              },
              "kafka_acl": {
                "type": "array",
                "description": "List of Kafka-native ACL entries",
                "items": {
                  "type": "object",
                  "properties": {
                    "host": {
                      "type": "string",
                      "description": "the host or * for all hosts",
                      "minLength": 0,
                      "maxLength": 256
                    },
                    "id": {
                      "type": "string",
                      "description": "ID",
                      "maxLength": 40
                    },
                    "operation": {
                      "type": "string",
                      "description": "Kafka ACL operation represents an operation which an ACL grants or denies permission to perform",
                      "enum": [
                        "All",
                        "Alter",
                        "AlterConfigs",
                        "ClusterAction",
                        "Create",
                        "CreateTokens",
                        "Delete",
                        "Describe",
                        "DescribeConfigs",
                        "DescribeTokens",
                        "IdempotentWrite",
                        "Read",
                        "Write"
                      ]
                    },
                    "pattern_type": {
                      "type": "string",
                      "description": "Kafka ACL pattern type of resource name",
                      "enum": ["LITERAL", "PREFIXED"]
                    },
                    "permission_type": {
                      "type": "string",
                      "description": "Kafka ACL permission type",
                      "enum": ["ALLOW", "DENY"]
                    },
                    "principal": {
                      "type": "string",
                      "description": "principal is in 'principalType:name' format",
                      "minLength": 0,
                      "maxLength": 256
                    },
                    "resource_name": {
                      "type": "string",
                      "description": "Resource pattern used to match specified resources",
                      "minLength": 0,
                      "maxLength": 256
                    },
                    "resource_type": {
                      "type": "string",
                      "description": "Kafka ACL resource type represents a type of resource which an ACL can be applied to",
                      "enum": [
                        "Cluster",
                        "DelegationToken",
                        "Group",
                        "Topic",
                        "TransactionalId",
                        "User"
                      ]
                    }
                  },
                  "required": [
                    "host",
                    "id",
                    "operation",
                    "pattern_type",
                    "permission_type",
                    "principal",
                    "resource_name",
                    "resource_type"
                  ]
                }
              },
              "maintenance": {
                "type": "object",
                "description": "Automatic maintenance settings",
                "properties": {
                  "dow": {
                    "type": "string",
                    "description": "Day of week for installing updates",
                    "enum": [
                      "monday",
                      "tuesday",
                      "wednesday",
                      "thursday",
                      "friday",
                      "saturday",
                      "sunday",
                      "never"
                    ]
                  },
                  "time": {
                    "type": "string",
                    "description": "Time for installing updates, UTC",
                    "minLength": 8,
                    "maxLength": 8
                  },
                  "updates": {
                    "type": "array",
                    "description": "List of updates waiting to be installed",
                    "items": {
                      "type": "object",
                      "properties": {
                        "deadline": {
                          "type": "string",
                          "description": "Deadline for installing the update"
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the update"
                        },
                        "documentation_link": {
                          "type": "string",
                          "description": "Optional link"
                        },
                        "impact": {
                          "type": "string",
                          "description": "Impact statement of the update"
                        },
                        "impact_portable_text": {
                          "type": "string",
                          "description": "Impact statement in portable text format"
                        },
                        "start_after": {
                          "type": "string",
                          "description": "The earliest time the update will be automatically applied"
                        },
                        "start_at": {
                          "type": "string",
                          "description": "The time when the update will be automatically applied"
                        }
                      }
                    }
                  }
                },
                "required": ["dow", "time", "updates"]
              },
              "metadata": {
                "type": "object",
                "description": "Service type specific metadata",
                "properties": {}
              },
              "node_count": {
                "type": "integer",
                "description": "Number of service nodes in the active plan"
              },
              "node_cpu_count": {
                "type": "integer",
                "description": "Number of CPUs for each node"
              },
              "node_memory_mb": {
                "type": "number",
                "description": "Megabytes of memory for each node"
              },
              "node_states": {
                "type": "array",
                "description": "State of individual service nodes",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the service node"
                    },
                    "progress_updates": {
                      "type": "array",
                      "description": "Extra information regarding the progress for current state",
                      "items": {
                        "type": "object",
                        "properties": {
                          "completed": {
                            "type": "boolean",
                            "description": "Indicates whether this phase has been completed or not"
                          },
                          "current": {
                            "type": "integer",
                            "description": "Current progress for this phase. May be missing or null."
                          },
                          "max": {
                            "type": "integer",
                            "description": "Maximum progress value for this phase. May be missing or null. May change."
                          },
                          "min": {
                            "type": "integer",
                            "description": "Minimum progress value for this phase. May be missing or null."
                          },
                          "phase": {
                            "type": "string",
                            "description": "Key identifying this phase",
                            "enum": [
                              "prepare",
                              "basebackup",
                              "stream",
                              "finalize"
                            ]
                          },
                          "unit": {
                            "type": "string",
                            "description": "Unit for current/min/max values. New units may be added. If null should be treated as generic unit",
                            "enum": [
                              "binlogs",
                              "bytes_compressed",
                              "bytes_uncompressed",
                              "wal_lsn"
                            ]
                          }
                        },
                        "required": ["completed", "phase"]
                      }
                    },
                    "role": {
                      "type": "string",
                      "description": "Role of this node. Only returned for a subset of service types",
                      "enum": ["master", "standby", "read-replica"]
                    },
                    "shard": {
                      "type": "object",
                      "description": "Shard of this node. Only returned for a subset of service types",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the shard."
                        },
                        "position": {
                          "type": "integer",
                          "description": "Position of this shard within the service"
                        }
                      }
                    },
                    "state": {
                      "type": "string",
                      "description": "Current state of the service node",
                      "enum": [
                        "leaving",
                        "running",
                        "setting_up_vm",
                        "syncing_data",
                        "timing_out",
                        "unknown"
                      ]
                    }
                  },
                  "required": ["name", "state"]
                }
              },
              "plan": {
                "type": "string",
                "description": "Subscription plan",
                "maxLength": 128
              },
              "project_vpc_id": {
                "type": "string",
                "description": "Project VPC ID",
                "minLength": 36,
                "maxLength": 36
              },
              "schema_registry_acl": {
                "type": "array",
                "description": "List of Schema Registry ACL entries",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID",
                      "maxLength": 40
                    },
                    "permission": {
                      "type": "string",
                      "description": "ACL entry for Schema Registry",
                      "enum": ["schema_registry_read", "schema_registry_write"]
                    },
                    "resource": {
                      "type": "string",
                      "description": "Schema Registry ACL entry resource name pattern",
                      "minLength": 1,
                      "maxLength": 249
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": ["permission", "resource", "username"]
                }
              },
              "server_group": {
                "type": "object",
                "description": "Service IaaS server group",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Flag set if server group is in use for the service"
                  },
                  "type": {
                    "type": "string",
                    "description": "IaaS server group type"
                  }
                }
              },
              "service_integrations": {
                "type": "array",
                "description": "Integrations with other services",
                "items": {
                  "type": "object",
                  "properties": {
                    "active": {
                      "type": "boolean",
                      "description": "True when integration is active"
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of the integration"
                    },
                    "dest_endpoint": {
                      "type": "string",
                      "description": "Destination endpoint name"
                    },
                    "dest_endpoint_id": {
                      "type": "string",
                      "description": "Destination endpoint id"
                    },
                    "dest_project": {
                      "type": "string",
                      "description": "Project name",
                      "maxLength": 63
                    },
                    "dest_service": {
                      "type": "string",
                      "description": "Destination service name"
                    },
                    "dest_service_type": {
                      "type": "string",
                      "description": "Service type code",
                      "maxLength": 64
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "True when integration is enabled"
                    },
                    "integration_status": {
                      "type": "object",
                      "description": "Integration status",
                      "properties": {
                        "state": {
                          "type": "object",
                          "description": "Service integration state",
                          "properties": {
                            "errors": {
                              "type": "array",
                              "description": "Errors",
                              "items": { "type": "string" }
                            },
                            "likely_error_cause": {
                              "type": "string",
                              "description": "Most likely cause of the errors",
                              "enum": [
                                "null",
                                "destination",
                                "integration",
                                "source",
                                "unknown"
                              ]
                            },
                            "nodes": {
                              "type": "object",
                              "description": "Nodes",
                              "properties": {}
                            },
                            "status": {
                              "type": "string",
                              "description": "Service integration status",
                              "enum": [
                                "failed",
                                "inactive",
                                "running",
                                "starting",
                                "unknown"
                              ]
                            }
                          },
                          "required": ["errors", "nodes", "status"]
                        },
                        "status_user_desc": {
                          "type": "string",
                          "description": "Integration status description"
                        }
                      },
                      "required": ["state", "status_user_desc"]
                    },
                    "integration_type": {
                      "type": "string",
                      "description": "Type of the integration"
                    },
                    "service_integration_id": {
                      "type": "string",
                      "description": "Integration ID"
                    },
                    "source_endpoint": {
                      "type": "string",
                      "description": "Source endpoint name"
                    },
                    "source_endpoint_id": {
                      "type": "string",
                      "description": "Source endpoint ID"
                    },
                    "source_project": {
                      "type": "string",
                      "description": "Project name",
                      "maxLength": 63
                    },
                    "source_service": {
                      "type": "string",
                      "description": "Source service name"
                    },
                    "source_service_type": {
                      "type": "string",
                      "description": "Service type code",
                      "maxLength": 64
                    },
                    "user_config": {
                      "type": "object",
                      "description": "Service integration settings",
                      "properties": {}
                    }
                  },
                  "required": [
                    "active",
                    "description",
                    "dest_project",
                    "dest_service_type",
                    "enabled",
                    "integration_type",
                    "service_integration_id",
                    "source_project",
                    "source_service",
                    "source_service_type"
                  ]
                }
              },
              "service_name": {
                "type": "string",
                "description": "Service name",
                "minLength": 1,
                "maxLength": 64
              },
              "service_notifications": {
                "type": "array",
                "description": "Service notifications",
                "items": {
                  "type": "object",
                  "properties": {
                    "level": {
                      "type": "string",
                      "description": "Notification level",
                      "enum": ["notice", "warning"]
                    },
                    "message": {
                      "type": "string",
                      "description": "Human notification message",
                      "maxLength": 1024
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Notification metadata",
                      "properties": {
                        "end_of_life_help_article_url": {
                          "type": "string",
                          "description": "Link to the help article"
                        },
                        "end_of_life_policy_url": {
                          "type": "string",
                          "description": "Link to the help article"
                        },
                        "service_end_of_life_time": {
                          "type": "string",
                          "description": "Timestamp in ISO 8601 format, always in UTC",
                          "maxLength": 36
                        },
                        "upgrade_to_service_type": {
                          "type": "string",
                          "description": "If the customer takes no action, the service is updated to this service type when end of life is reached on the Aiven platform. If it is the same as the service type, the platform only upgrades the version.",
                          "maxLength": 64
                        },
                        "upgrade_to_version": {
                          "type": "string",
                          "description": "The version to which the service will be updated at the end of life on the Aiven platform if the user does not take any action",
                          "maxLength": 32
                        }
                      }
                    },
                    "type": {
                      "type": "string",
                      "description": "Notification type",
                      "enum": [
                        "service_end_of_life",
                        "service_powered_off_removal"
                      ]
                    }
                  },
                  "required": ["level", "message", "metadata", "type"]
                }
              },
              "service_type": {
                "type": "string",
                "description": "Service type code",
                "maxLength": 64
              },
              "service_type_description": {
                "type": "string",
                "description": "Single line description of the service"
              },
              "service_uri": {
                "type": "string",
                "description": "URI for connecting to the service (may be null)"
              },
              "service_uri_params": {
                "type": "object",
                "description": "service_uri parameterized into key-value pairs",
                "properties": {}
              },
              "state": {
                "type": "string",
                "description": "State of the service",
                "enum": ["POWEROFF", "REBALANCING", "REBUILDING", "RUNNING"]
              },
              "tags": {
                "type": "object",
                "description": "Set of resource tags",
                "properties": {}
              },
              "tech_emails": {
                "type": "array",
                "description": "List of service technical email addresses",
                "maxItems": 10,
                "items": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": ["email"]
                }
              },
              "termination_protection": {
                "type": "boolean",
                "description": "Service is protected against termination and powering off"
              },
              "topics": {
                "type": "array",
                "description": "Kafka topics. DEPRECATED: Use /project/$project/service/$service/topic instead",
                "items": {
                  "type": "object",
                  "properties": {
                    "cleanup_policy": {
                      "type": "string",
                      "description": "cleanup.policy",
                      "maxLength": 64
                    },
                    "min_insync_replicas": {
                      "type": "integer",
                      "description": "min.insync.replicas",
                      "minimum": 1
                    },
                    "partitions": {
                      "type": "integer",
                      "description": "Number of partitions",
                      "minimum": 1,
                      "maximum": 1000000
                    },
                    "replication": {
                      "type": "integer",
                      "description": "Number of replicas",
                      "minimum": 1
                    },
                    "retention_bytes": {
                      "type": "integer",
                      "description": "retention.bytes"
                    },
                    "retention_hours": {
                      "type": "integer",
                      "description": "Retention period (hours)",
                      "maximum": 2562047788015
                    },
                    "state": {
                      "type": "string",
                      "description": "Topic state",
                      "enum": ["ACTIVE", "CONFIGURING", "DELETING"]
                    },
                    "topic_name": {
                      "type": "string",
                      "description": "Topic name",
                      "minLength": 1,
                      "maxLength": 249
                    }
                  },
                  "required": [
                    "cleanup_policy",
                    "min_insync_replicas",
                    "partitions",
                    "replication",
                    "retention_bytes",
                    "retention_hours",
                    "topic_name"
                  ]
                }
              },
              "update_time": {
                "type": "string",
                "description": "Service last update timestamp (ISO 8601)",
                "maxLength": 36
              },
              "user_config": {
                "type": "object",
                "description": "Service type-specific settings",
                "properties": {}
              },
              "users": {
                "type": "array",
                "description": "List of service users",
                "items": {
                  "type": "object",
                  "properties": {
                    "access_cert": {
                      "type": "string",
                      "description": "Access certificate for TLS client authentication"
                    },
                    "access_cert_not_valid_after_time": {
                      "type": "string",
                      "description": "Validity end time (ISO8601) for the current access certificate"
                    },
                    "access_control": {
                      "type": "object",
                      "description": "Service specific access controls for user\n\nService type specific access control rules for user. Currently only used for configuring user ACLs for Redis version 6 and above.",
                      "properties": {
                        "dragonfly_acl_categories": {
                          "type": "array",
                          "description": "Command category rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "dragonfly_acl_commands": {
                          "type": "array",
                          "description": "Rules for individual commands",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "dragonfly_acl_keys": {
                          "type": "array",
                          "description": "Key access rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "m3_group": {
                          "type": "string",
                          "description": "M3 access group to associate users with",
                          "maxLength": 16
                        },
                        "pg_allow_replication": {
                          "type": "boolean",
                          "description": "Enable REPLICATION role option"
                        },
                        "redis_acl_categories": {
                          "type": "array",
                          "description": "Command category rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "redis_acl_channels": {
                          "type": "array",
                          "description": "Permitted pub/sub channel patterns\n\nGlob-style patterns defining which pub/sub channels can be accessed. If array is not defined, the default policy is used (allchannels).",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "redis_acl_commands": {
                          "type": "array",
                          "description": "Rules for individual commands",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "redis_acl_keys": {
                          "type": "array",
                          "description": "Key access rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "valkey_acl_categories": {
                          "type": "array",
                          "description": "Command category rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "valkey_acl_channels": {
                          "type": "array",
                          "description": "Permitted pub/sub channel patterns\n\nGlob-style patterns defining which pub/sub channels can be accessed. If array is not defined, the default policy is used (allchannels).",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "valkey_acl_commands": {
                          "type": "array",
                          "description": "Rules for individual commands",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "valkey_acl_keys": {
                          "type": "array",
                          "description": "Key access rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        }
                      }
                    },
                    "access_key": {
                      "type": "string",
                      "description": "Access key for TLS client authentication"
                    },
                    "authentication": {
                      "type": "string",
                      "description": "Authentication details",
                      "enum": [
                        "null",
                        "caching_sha2_password",
                        "mysql_native_password"
                      ]
                    },
                    "expiring_cert_not_valid_after_time": {
                      "type": "string",
                      "description": "Validity end time (ISO8601) for the expiring access certificate"
                    },
                    "password": {
                      "type": "string",
                      "description": "Account password. A null value indicates a user overridden password."
                    },
                    "type": { "type": "string", "description": "Account type" },
                    "username": {
                      "type": "string",
                      "description": "Account username"
                    }
                  },
                  "required": ["password", "type", "username"]
                }
              }
            },
            "required": [
              "cloud_name",
              "create_time",
              "group_list",
              "plan",
              "project_vpc_id",
              "service_integrations",
              "service_name",
              "service_type",
              "service_uri",
              "state",
              "termination_protection",
              "update_time",
              "user_config"
            ]
          }
        },
        "required": ["service"]
      },
      "ServiceDatabaseCreateRequestBody": {
        "type": "object",
        "description": "ServiceDatabaseCreateRequestBody",
        "properties": {
          "database": {
            "type": "string",
            "description": "Service database name",
            "maxLength": 40
          },
          "lc_collate": {
            "type": "string",
            "description": "Default string sort order (LC_COLLATE) for PostgreSQL database",
            "maxLength": 128
          },
          "lc_ctype": {
            "type": "string",
            "description": "Default character classification (LC_CTYPE) for PostgreSQL database",
            "maxLength": 128
          }
        },
        "required": ["database"]
      },
      "ServiceDatabaseCreateResponse": {
        "type": "object",
        "description": "ServiceDatabaseCreateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceDatabaseDeleteResponse": {
        "type": "object",
        "description": "ServiceDatabaseDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceDatabaseListResponse": {
        "type": "object",
        "description": "ServiceDatabaseListResponse",
        "properties": {
          "databases": {
            "type": "array",
            "description": "List of databases",
            "items": {
              "type": "object",
              "properties": {
                "database_name": {
                  "type": "string",
                  "description": "Database name or ID"
                }
              },
              "required": ["database_name"]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["databases"]
      },
      "ServiceDeleteResponse": {
        "type": "object",
        "description": "ServiceDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceEnableWritesResponse": {
        "type": "object",
        "description": "ServiceEnableWritesResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "until": { "type": "string", "description": "Writes enabled until" }
        },
        "required": ["message"]
      },
      "ServiceGetResponse": {
        "type": "object",
        "description": "ServiceGetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service": {
            "type": "object",
            "description": "Service information",
            "properties": {
              "acl": {
                "type": "array",
                "description": "List of Aiven ACL entries for Kafka service",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID",
                      "maxLength": 40
                    },
                    "permission": {
                      "type": "string",
                      "description": "Kafka permission",
                      "enum": ["admin", "read", "readwrite", "write"]
                    },
                    "topic": {
                      "type": "string",
                      "description": "Topic name pattern",
                      "minLength": 1,
                      "maxLength": 249
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": ["permission", "topic", "username"]
                }
              },
              "backups": {
                "type": "array",
                "description": "List of backups for the service",
                "items": {
                  "type": "object",
                  "properties": {
                    "additional_regions": {
                      "type": "array",
                      "description": "Additional backup regions, if available",
                      "items": {
                        "type": "object",
                        "properties": {
                          "cloud": {
                            "type": "string",
                            "description": "Target cloud",
                            "maxLength": 256
                          },
                          "pause_reason": {
                            "type": "string",
                            "description": "Reason for pausing the backup synchronization"
                          },
                          "paused": {
                            "type": "boolean",
                            "description": "Indicates additional backup synchronization is paused"
                          },
                          "region": {
                            "type": "string",
                            "description": "Cloud storage region name"
                          }
                        },
                        "required": ["cloud"]
                      }
                    },
                    "backup_name": {
                      "type": "string",
                      "description": "Internal name of this backup"
                    },
                    "backup_time": {
                      "type": "string",
                      "description": "Backup timestamp (ISO 8601)",
                      "maxLength": 36
                    },
                    "data_size": {
                      "type": "integer",
                      "description": "Backup's original size before compression"
                    },
                    "storage_location": {
                      "type": "string",
                      "description": "Location where this backup is stored"
                    },
                    "tiered_storage_data_size": {
                      "type": "integer",
                      "description": "The amount of tiered storage data in bytes referenced by this backup."
                    }
                  },
                  "required": ["backup_name", "backup_time", "data_size"]
                }
              },
              "cloud_description": {
                "type": "string",
                "description": "Cloud provider and location"
              },
              "cloud_name": {
                "type": "string",
                "description": "Target cloud",
                "maxLength": 256
              },
              "components": {
                "type": "array",
                "description": "Service component information objects",
                "items": {
                  "type": "object",
                  "properties": {
                    "component": {
                      "type": "string",
                      "description": "Service component name"
                    },
                    "host": {
                      "type": "string",
                      "description": "DNS name for connecting to the service component"
                    },
                    "kafka_authentication_method": {
                      "type": "string",
                      "description": "Kafka authentication method. This is a value specific to the 'kafka' service component",
                      "enum": ["certificate", "sasl"]
                    },
                    "kafka_ssl_ca": {
                      "type": "string",
                      "description": "Specifies if this port uses Project CA or Letsencrypt. If not specified, the default is using Project CA.This is a value specific to the 'kafka' service component.",
                      "enum": ["project_ca", "letsencrypt"]
                    },
                    "path": {
                      "type": "string",
                      "description": "Path component of the service URL (useful only if service component is HTTP or HTTPS endpoint)"
                    },
                    "port": {
                      "type": "integer",
                      "description": "Port number for connecting to the service component",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "privatelink_connection_id": {
                      "type": "string",
                      "description": "Privatelink connection ID"
                    },
                    "route": {
                      "type": "string",
                      "description": "Network access route",
                      "enum": ["dynamic", "public", "private", "privatelink"]
                    },
                    "ssl": {
                      "type": "boolean",
                      "description": "Whether the endpoint is encrypted or accepts plaintext. By default endpoints are always encrypted andthis property is only included for service components that may disable encryption."
                    },
                    "usage": {
                      "type": "string",
                      "description": "DNS usage name",
                      "enum": ["disaster_recovery", "primary", "replica"]
                    }
                  },
                  "required": ["component", "host", "port", "route", "usage"]
                }
              },
              "connection_info": {
                "type": "object",
                "description": "Service-specific connection information properties",
                "properties": {}
              },
              "connection_pools": {
                "type": "array",
                "description": "PostgreSQL PGBouncer connection pools",
                "items": {
                  "type": "object",
                  "properties": {
                    "connection_uri": {
                      "type": "string",
                      "description": "Connection URI for the DB pool"
                    },
                    "database": {
                      "type": "string",
                      "description": "Database name",
                      "maxLength": 63
                    },
                    "pool_mode": {
                      "type": "string",
                      "description": "PGBouncer pool mode",
                      "enum": ["session", "transaction", "statement"]
                    },
                    "pool_name": {
                      "type": "string",
                      "description": "Connection pool name",
                      "maxLength": 63
                    },
                    "pool_size": {
                      "type": "integer",
                      "description": "Size of PGBouncer's PostgreSQL side connection pool",
                      "minimum": 1,
                      "maximum": 10000
                    },
                    "username": {
                      "type": "string",
                      "description": "Pool username",
                      "maxLength": 64
                    }
                  },
                  "required": [
                    "connection_uri",
                    "database",
                    "pool_mode",
                    "pool_name",
                    "pool_size"
                  ]
                }
              },
              "create_time": {
                "type": "string",
                "description": "Service creation timestamp (ISO 8601)",
                "maxLength": 36
              },
              "databases": {
                "type": "array",
                "description": "List of service's user database names",
                "items": { "type": "string" }
              },
              "disk_space_mb": {
                "type": "integer",
                "description": "Megabytes of disk space for data storage",
                "minimum": 0
              },
              "features": {
                "type": "object",
                "description": "Feature flags",
                "properties": {}
              },
              "group_list": {
                "type": "array",
                "description": "List of service groups the service belongs to. This field is deprecated. It is always set to single element with value 'default'",
                "items": { "type": "string" }
              },
              "kafka_acl": {
                "type": "array",
                "description": "List of Kafka-native ACL entries",
                "items": {
                  "type": "object",
                  "properties": {
                    "host": {
                      "type": "string",
                      "description": "the host or * for all hosts",
                      "minLength": 0,
                      "maxLength": 256
                    },
                    "id": {
                      "type": "string",
                      "description": "ID",
                      "maxLength": 40
                    },
                    "operation": {
                      "type": "string",
                      "description": "Kafka ACL operation represents an operation which an ACL grants or denies permission to perform",
                      "enum": [
                        "All",
                        "Alter",
                        "AlterConfigs",
                        "ClusterAction",
                        "Create",
                        "CreateTokens",
                        "Delete",
                        "Describe",
                        "DescribeConfigs",
                        "DescribeTokens",
                        "IdempotentWrite",
                        "Read",
                        "Write"
                      ]
                    },
                    "pattern_type": {
                      "type": "string",
                      "description": "Kafka ACL pattern type of resource name",
                      "enum": ["LITERAL", "PREFIXED"]
                    },
                    "permission_type": {
                      "type": "string",
                      "description": "Kafka ACL permission type",
                      "enum": ["ALLOW", "DENY"]
                    },
                    "principal": {
                      "type": "string",
                      "description": "principal is in 'principalType:name' format",
                      "minLength": 0,
                      "maxLength": 256
                    },
                    "resource_name": {
                      "type": "string",
                      "description": "Resource pattern used to match specified resources",
                      "minLength": 0,
                      "maxLength": 256
                    },
                    "resource_type": {
                      "type": "string",
                      "description": "Kafka ACL resource type represents a type of resource which an ACL can be applied to",
                      "enum": [
                        "Cluster",
                        "DelegationToken",
                        "Group",
                        "Topic",
                        "TransactionalId",
                        "User"
                      ]
                    }
                  },
                  "required": [
                    "host",
                    "id",
                    "operation",
                    "pattern_type",
                    "permission_type",
                    "principal",
                    "resource_name",
                    "resource_type"
                  ]
                }
              },
              "maintenance": {
                "type": "object",
                "description": "Automatic maintenance settings",
                "properties": {
                  "dow": {
                    "type": "string",
                    "description": "Day of week for installing updates",
                    "enum": [
                      "monday",
                      "tuesday",
                      "wednesday",
                      "thursday",
                      "friday",
                      "saturday",
                      "sunday",
                      "never"
                    ]
                  },
                  "time": {
                    "type": "string",
                    "description": "Time for installing updates, UTC",
                    "minLength": 8,
                    "maxLength": 8
                  },
                  "updates": {
                    "type": "array",
                    "description": "List of updates waiting to be installed",
                    "items": {
                      "type": "object",
                      "properties": {
                        "deadline": {
                          "type": "string",
                          "description": "Deadline for installing the update"
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the update"
                        },
                        "documentation_link": {
                          "type": "string",
                          "description": "Optional link"
                        },
                        "impact": {
                          "type": "string",
                          "description": "Impact statement of the update"
                        },
                        "impact_portable_text": {
                          "type": "string",
                          "description": "Impact statement in portable text format"
                        },
                        "start_after": {
                          "type": "string",
                          "description": "The earliest time the update will be automatically applied"
                        },
                        "start_at": {
                          "type": "string",
                          "description": "The time when the update will be automatically applied"
                        }
                      }
                    }
                  }
                },
                "required": ["dow", "time", "updates"]
              },
              "metadata": {
                "type": "object",
                "description": "Service type specific metadata",
                "properties": {}
              },
              "node_count": {
                "type": "integer",
                "description": "Number of service nodes in the active plan"
              },
              "node_cpu_count": {
                "type": "integer",
                "description": "Number of CPUs for each node"
              },
              "node_memory_mb": {
                "type": "number",
                "description": "Megabytes of memory for each node"
              },
              "node_states": {
                "type": "array",
                "description": "State of individual service nodes",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the service node"
                    },
                    "progress_updates": {
                      "type": "array",
                      "description": "Extra information regarding the progress for current state",
                      "items": {
                        "type": "object",
                        "properties": {
                          "completed": {
                            "type": "boolean",
                            "description": "Indicates whether this phase has been completed or not"
                          },
                          "current": {
                            "type": "integer",
                            "description": "Current progress for this phase. May be missing or null."
                          },
                          "max": {
                            "type": "integer",
                            "description": "Maximum progress value for this phase. May be missing or null. May change."
                          },
                          "min": {
                            "type": "integer",
                            "description": "Minimum progress value for this phase. May be missing or null."
                          },
                          "phase": {
                            "type": "string",
                            "description": "Key identifying this phase",
                            "enum": [
                              "prepare",
                              "basebackup",
                              "stream",
                              "finalize"
                            ]
                          },
                          "unit": {
                            "type": "string",
                            "description": "Unit for current/min/max values. New units may be added. If null should be treated as generic unit",
                            "enum": [
                              "binlogs",
                              "bytes_compressed",
                              "bytes_uncompressed",
                              "wal_lsn"
                            ]
                          }
                        },
                        "required": ["completed", "phase"]
                      }
                    },
                    "role": {
                      "type": "string",
                      "description": "Role of this node. Only returned for a subset of service types",
                      "enum": ["master", "standby", "read-replica"]
                    },
                    "shard": {
                      "type": "object",
                      "description": "Shard of this node. Only returned for a subset of service types",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the shard."
                        },
                        "position": {
                          "type": "integer",
                          "description": "Position of this shard within the service"
                        }
                      }
                    },
                    "state": {
                      "type": "string",
                      "description": "Current state of the service node",
                      "enum": [
                        "leaving",
                        "running",
                        "setting_up_vm",
                        "syncing_data",
                        "timing_out",
                        "unknown"
                      ]
                    }
                  },
                  "required": ["name", "state"]
                }
              },
              "plan": {
                "type": "string",
                "description": "Subscription plan",
                "maxLength": 128
              },
              "project_vpc_id": {
                "type": "string",
                "description": "Project VPC ID",
                "minLength": 36,
                "maxLength": 36
              },
              "schema_registry_acl": {
                "type": "array",
                "description": "List of Schema Registry ACL entries",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID",
                      "maxLength": 40
                    },
                    "permission": {
                      "type": "string",
                      "description": "ACL entry for Schema Registry",
                      "enum": ["schema_registry_read", "schema_registry_write"]
                    },
                    "resource": {
                      "type": "string",
                      "description": "Schema Registry ACL entry resource name pattern",
                      "minLength": 1,
                      "maxLength": 249
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": ["permission", "resource", "username"]
                }
              },
              "server_group": {
                "type": "object",
                "description": "Service IaaS server group",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Flag set if server group is in use for the service"
                  },
                  "type": {
                    "type": "string",
                    "description": "IaaS server group type"
                  }
                }
              },
              "service_integrations": {
                "type": "array",
                "description": "Integrations with other services",
                "items": {
                  "type": "object",
                  "properties": {
                    "active": {
                      "type": "boolean",
                      "description": "True when integration is active"
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of the integration"
                    },
                    "dest_endpoint": {
                      "type": "string",
                      "description": "Destination endpoint name"
                    },
                    "dest_endpoint_id": {
                      "type": "string",
                      "description": "Destination endpoint id"
                    },
                    "dest_project": {
                      "type": "string",
                      "description": "Project name",
                      "maxLength": 63
                    },
                    "dest_service": {
                      "type": "string",
                      "description": "Destination service name"
                    },
                    "dest_service_type": {
                      "type": "string",
                      "description": "Service type code",
                      "maxLength": 64
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "True when integration is enabled"
                    },
                    "integration_status": {
                      "type": "object",
                      "description": "Integration status",
                      "properties": {
                        "state": {
                          "type": "object",
                          "description": "Service integration state",
                          "properties": {
                            "errors": {
                              "type": "array",
                              "description": "Errors",
                              "items": { "type": "string" }
                            },
                            "likely_error_cause": {
                              "type": "string",
                              "description": "Most likely cause of the errors",
                              "enum": [
                                "null",
                                "destination",
                                "integration",
                                "source",
                                "unknown"
                              ]
                            },
                            "nodes": {
                              "type": "object",
                              "description": "Nodes",
                              "properties": {}
                            },
                            "status": {
                              "type": "string",
                              "description": "Service integration status",
                              "enum": [
                                "failed",
                                "inactive",
                                "running",
                                "starting",
                                "unknown"
                              ]
                            }
                          },
                          "required": ["errors", "nodes", "status"]
                        },
                        "status_user_desc": {
                          "type": "string",
                          "description": "Integration status description"
                        }
                      },
                      "required": ["state", "status_user_desc"]
                    },
                    "integration_type": {
                      "type": "string",
                      "description": "Type of the integration"
                    },
                    "service_integration_id": {
                      "type": "string",
                      "description": "Integration ID"
                    },
                    "source_endpoint": {
                      "type": "string",
                      "description": "Source endpoint name"
                    },
                    "source_endpoint_id": {
                      "type": "string",
                      "description": "Source endpoint ID"
                    },
                    "source_project": {
                      "type": "string",
                      "description": "Project name",
                      "maxLength": 63
                    },
                    "source_service": {
                      "type": "string",
                      "description": "Source service name"
                    },
                    "source_service_type": {
                      "type": "string",
                      "description": "Service type code",
                      "maxLength": 64
                    },
                    "user_config": {
                      "type": "object",
                      "description": "Service integration settings",
                      "properties": {}
                    }
                  },
                  "required": [
                    "active",
                    "description",
                    "dest_project",
                    "dest_service_type",
                    "enabled",
                    "integration_type",
                    "service_integration_id",
                    "source_project",
                    "source_service",
                    "source_service_type"
                  ]
                }
              },
              "service_name": {
                "type": "string",
                "description": "Service name",
                "minLength": 1,
                "maxLength": 64
              },
              "service_notifications": {
                "type": "array",
                "description": "Service notifications",
                "items": {
                  "type": "object",
                  "properties": {
                    "level": {
                      "type": "string",
                      "description": "Notification level",
                      "enum": ["notice", "warning"]
                    },
                    "message": {
                      "type": "string",
                      "description": "Human notification message",
                      "maxLength": 1024
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Notification metadata",
                      "properties": {
                        "end_of_life_help_article_url": {
                          "type": "string",
                          "description": "Link to the help article"
                        },
                        "end_of_life_policy_url": {
                          "type": "string",
                          "description": "Link to the help article"
                        },
                        "service_end_of_life_time": {
                          "type": "string",
                          "description": "Timestamp in ISO 8601 format, always in UTC",
                          "maxLength": 36
                        },
                        "upgrade_to_service_type": {
                          "type": "string",
                          "description": "If the customer takes no action, the service is updated to this service type when end of life is reached on the Aiven platform. If it is the same as the service type, the platform only upgrades the version.",
                          "maxLength": 64
                        },
                        "upgrade_to_version": {
                          "type": "string",
                          "description": "The version to which the service will be updated at the end of life on the Aiven platform if the user does not take any action",
                          "maxLength": 32
                        }
                      }
                    },
                    "type": {
                      "type": "string",
                      "description": "Notification type",
                      "enum": [
                        "service_end_of_life",
                        "service_powered_off_removal"
                      ]
                    }
                  },
                  "required": ["level", "message", "metadata", "type"]
                }
              },
              "service_type": {
                "type": "string",
                "description": "Service type code",
                "maxLength": 64
              },
              "service_type_description": {
                "type": "string",
                "description": "Single line description of the service"
              },
              "service_uri": {
                "type": "string",
                "description": "URI for connecting to the service (may be null)"
              },
              "service_uri_params": {
                "type": "object",
                "description": "service_uri parameterized into key-value pairs",
                "properties": {}
              },
              "state": {
                "type": "string",
                "description": "State of the service",
                "enum": ["POWEROFF", "REBALANCING", "REBUILDING", "RUNNING"]
              },
              "tags": {
                "type": "object",
                "description": "Set of resource tags",
                "properties": {}
              },
              "tech_emails": {
                "type": "array",
                "description": "List of service technical email addresses",
                "maxItems": 10,
                "items": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": ["email"]
                }
              },
              "termination_protection": {
                "type": "boolean",
                "description": "Service is protected against termination and powering off"
              },
              "topics": {
                "type": "array",
                "description": "Kafka topics. DEPRECATED: Use /project/$project/service/$service/topic instead",
                "items": {
                  "type": "object",
                  "properties": {
                    "cleanup_policy": {
                      "type": "string",
                      "description": "cleanup.policy",
                      "maxLength": 64
                    },
                    "min_insync_replicas": {
                      "type": "integer",
                      "description": "min.insync.replicas",
                      "minimum": 1
                    },
                    "partitions": {
                      "type": "integer",
                      "description": "Number of partitions",
                      "minimum": 1,
                      "maximum": 1000000
                    },
                    "replication": {
                      "type": "integer",
                      "description": "Number of replicas",
                      "minimum": 1
                    },
                    "retention_bytes": {
                      "type": "integer",
                      "description": "retention.bytes"
                    },
                    "retention_hours": {
                      "type": "integer",
                      "description": "Retention period (hours)",
                      "maximum": 2562047788015
                    },
                    "state": {
                      "type": "string",
                      "description": "Topic state",
                      "enum": ["ACTIVE", "CONFIGURING", "DELETING"]
                    },
                    "topic_name": {
                      "type": "string",
                      "description": "Topic name",
                      "minLength": 1,
                      "maxLength": 249
                    }
                  },
                  "required": [
                    "cleanup_policy",
                    "min_insync_replicas",
                    "partitions",
                    "replication",
                    "retention_bytes",
                    "retention_hours",
                    "topic_name"
                  ]
                }
              },
              "update_time": {
                "type": "string",
                "description": "Service last update timestamp (ISO 8601)",
                "maxLength": 36
              },
              "user_config": {
                "type": "object",
                "description": "Service type-specific settings",
                "properties": {}
              },
              "users": {
                "type": "array",
                "description": "List of service users",
                "items": {
                  "type": "object",
                  "properties": {
                    "access_cert": {
                      "type": "string",
                      "description": "Access certificate for TLS client authentication"
                    },
                    "access_cert_not_valid_after_time": {
                      "type": "string",
                      "description": "Validity end time (ISO8601) for the current access certificate"
                    },
                    "access_control": {
                      "type": "object",
                      "description": "Service specific access controls for user\n\nService type specific access control rules for user. Currently only used for configuring user ACLs for Redis version 6 and above.",
                      "properties": {
                        "dragonfly_acl_categories": {
                          "type": "array",
                          "description": "Command category rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "dragonfly_acl_commands": {
                          "type": "array",
                          "description": "Rules for individual commands",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "dragonfly_acl_keys": {
                          "type": "array",
                          "description": "Key access rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "m3_group": {
                          "type": "string",
                          "description": "M3 access group to associate users with",
                          "maxLength": 16
                        },
                        "pg_allow_replication": {
                          "type": "boolean",
                          "description": "Enable REPLICATION role option"
                        },
                        "redis_acl_categories": {
                          "type": "array",
                          "description": "Command category rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "redis_acl_channels": {
                          "type": "array",
                          "description": "Permitted pub/sub channel patterns\n\nGlob-style patterns defining which pub/sub channels can be accessed. If array is not defined, the default policy is used (allchannels).",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "redis_acl_commands": {
                          "type": "array",
                          "description": "Rules for individual commands",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "redis_acl_keys": {
                          "type": "array",
                          "description": "Key access rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "valkey_acl_categories": {
                          "type": "array",
                          "description": "Command category rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "valkey_acl_channels": {
                          "type": "array",
                          "description": "Permitted pub/sub channel patterns\n\nGlob-style patterns defining which pub/sub channels can be accessed. If array is not defined, the default policy is used (allchannels).",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "valkey_acl_commands": {
                          "type": "array",
                          "description": "Rules for individual commands",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "valkey_acl_keys": {
                          "type": "array",
                          "description": "Key access rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        }
                      }
                    },
                    "access_key": {
                      "type": "string",
                      "description": "Access key for TLS client authentication"
                    },
                    "authentication": {
                      "type": "string",
                      "description": "Authentication details",
                      "enum": [
                        "null",
                        "caching_sha2_password",
                        "mysql_native_password"
                      ]
                    },
                    "expiring_cert_not_valid_after_time": {
                      "type": "string",
                      "description": "Validity end time (ISO8601) for the expiring access certificate"
                    },
                    "password": {
                      "type": "string",
                      "description": "Account password. A null value indicates a user overridden password."
                    },
                    "type": { "type": "string", "description": "Account type" },
                    "username": {
                      "type": "string",
                      "description": "Account username"
                    }
                  },
                  "required": ["password", "type", "username"]
                }
              }
            },
            "required": [
              "cloud_name",
              "create_time",
              "group_list",
              "plan",
              "project_vpc_id",
              "service_integrations",
              "service_name",
              "service_type",
              "service_uri",
              "state",
              "termination_protection",
              "update_time",
              "user_config"
            ]
          }
        },
        "required": ["service"]
      },
      "ServiceGetMigrationStatusResponse": {
        "type": "object",
        "description": "ServiceGetMigrationStatusResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "migration": {
            "type": "object",
            "description": "Service migration info",
            "properties": {
              "error": {
                "type": "string",
                "description": "Error message in case that migration has failed"
              },
              "master_last_io_seconds_ago": {
                "type": "integer",
                "description": "Redis only: how many seconds since last I/O with redis master"
              },
              "master_link_status": {
                "type": "string",
                "description": "Redis only: replication master link status",
                "enum": ["up", "down"]
              },
              "method": {
                "type": "string",
                "description": "The migration method to be used (currently supported only by Redis, Dragonfly, MySQL and PostgreSQL service types)",
                "enum": [
                  "",
                  "dump",
                  "mysqldump",
                  "pg_dump",
                  "replication",
                  "scan"
                ]
              },
              "status": {
                "type": "string",
                "description": "Migration status",
                "enum": ["done", "failed", "running", "syncing", "waiting"]
              }
            },
            "required": ["method", "status"]
          },
          "migration_detail": {
            "type": "array",
            "description": "Migration status per database",
            "items": {
              "type": "object",
              "properties": {
                "dbname": {
                  "type": "string",
                  "description": "Migrated db name (PG, MySQL) or number (Redis, Dragonfly)"
                },
                "error": {
                  "type": "string",
                  "description": "Error message in case that migration has failed"
                },
                "method": {
                  "type": "string",
                  "description": "The migration method to be used (currently supported only by Redis, Dragonfly, MySQL and PostgreSQL service types)",
                  "enum": [
                    "",
                    "dump",
                    "mysqldump",
                    "pg_dump",
                    "replication",
                    "scan"
                  ]
                },
                "status": {
                  "type": "string",
                  "description": "Migration status",
                  "enum": ["done", "failed", "running", "syncing", "waiting"]
                }
              },
              "required": ["dbname", "method", "status"]
            }
          }
        },
        "required": ["migration"]
      },
      "ServiceInfluxDBStatsResponse": {
        "type": "object",
        "description": "ServiceInfluxDBStatsResponse",
        "properties": {
          "db_stats": {
            "type": "object",
            "description": "result",
            "properties": {}
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["db_stats"]
      },
      "ServiceKmsGetCAResponse": {
        "type": "object",
        "description": "ServiceKmsGetCAResponse",
        "properties": {
          "certificate": {
            "type": "string",
            "description": "PEM encoded certificate"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["certificate"]
      },
      "ServiceKmsGetKeypairResponse": {
        "type": "object",
        "description": "ServiceKmsGetKeypairResponse",
        "properties": {
          "certificate": {
            "type": "string",
            "description": "PEM encoded certificate"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "key": { "type": "string", "description": "PEM encoded private key" },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["certificate", "key"]
      },
      "ServiceListResponse": {
        "type": "object",
        "description": "ServiceListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "services": {
            "type": "array",
            "description": "List of services under the project",
            "items": {
              "type": "object",
              "properties": {
                "acl": {
                  "type": "array",
                  "description": "List of Aiven ACL entries for Kafka service",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "ID",
                        "maxLength": 40
                      },
                      "permission": {
                        "type": "string",
                        "description": "Kafka permission",
                        "enum": ["admin", "read", "readwrite", "write"]
                      },
                      "topic": {
                        "type": "string",
                        "description": "Topic name pattern",
                        "minLength": 1,
                        "maxLength": 249
                      },
                      "username": {
                        "type": "string",
                        "description": "Username",
                        "minLength": 1,
                        "maxLength": 64
                      }
                    },
                    "required": ["permission", "topic", "username"]
                  }
                },
                "backups": {
                  "type": "array",
                  "description": "List of backups for the service",
                  "items": {
                    "type": "object",
                    "properties": {
                      "additional_regions": {
                        "type": "array",
                        "description": "Additional backup regions, if available",
                        "items": {
                          "type": "object",
                          "properties": {
                            "cloud": {
                              "type": "string",
                              "description": "Target cloud",
                              "maxLength": 256
                            },
                            "pause_reason": {
                              "type": "string",
                              "description": "Reason for pausing the backup synchronization"
                            },
                            "paused": {
                              "type": "boolean",
                              "description": "Indicates additional backup synchronization is paused"
                            },
                            "region": {
                              "type": "string",
                              "description": "Cloud storage region name"
                            }
                          },
                          "required": ["cloud"]
                        }
                      },
                      "backup_name": {
                        "type": "string",
                        "description": "Internal name of this backup"
                      },
                      "backup_time": {
                        "type": "string",
                        "description": "Backup timestamp (ISO 8601)",
                        "maxLength": 36
                      },
                      "data_size": {
                        "type": "integer",
                        "description": "Backup's original size before compression"
                      },
                      "storage_location": {
                        "type": "string",
                        "description": "Location where this backup is stored"
                      },
                      "tiered_storage_data_size": {
                        "type": "integer",
                        "description": "The amount of tiered storage data in bytes referenced by this backup."
                      }
                    },
                    "required": ["backup_name", "backup_time", "data_size"]
                  }
                },
                "cloud_description": {
                  "type": "string",
                  "description": "Cloud provider and location"
                },
                "cloud_name": {
                  "type": "string",
                  "description": "Target cloud",
                  "maxLength": 256
                },
                "components": {
                  "type": "array",
                  "description": "Service component information objects",
                  "items": {
                    "type": "object",
                    "properties": {
                      "component": {
                        "type": "string",
                        "description": "Service component name"
                      },
                      "host": {
                        "type": "string",
                        "description": "DNS name for connecting to the service component"
                      },
                      "kafka_authentication_method": {
                        "type": "string",
                        "description": "Kafka authentication method. This is a value specific to the 'kafka' service component",
                        "enum": ["certificate", "sasl"]
                      },
                      "kafka_ssl_ca": {
                        "type": "string",
                        "description": "Specifies if this port uses Project CA or Letsencrypt. If not specified, the default is using Project CA.This is a value specific to the 'kafka' service component.",
                        "enum": ["project_ca", "letsencrypt"]
                      },
                      "path": {
                        "type": "string",
                        "description": "Path component of the service URL (useful only if service component is HTTP or HTTPS endpoint)"
                      },
                      "port": {
                        "type": "integer",
                        "description": "Port number for connecting to the service component",
                        "minimum": 0,
                        "maximum": 65535
                      },
                      "privatelink_connection_id": {
                        "type": "string",
                        "description": "Privatelink connection ID"
                      },
                      "route": {
                        "type": "string",
                        "description": "Network access route",
                        "enum": ["dynamic", "public", "private", "privatelink"]
                      },
                      "ssl": {
                        "type": "boolean",
                        "description": "Whether the endpoint is encrypted or accepts plaintext. By default endpoints are always encrypted andthis property is only included for service components that may disable encryption."
                      },
                      "usage": {
                        "type": "string",
                        "description": "DNS usage name",
                        "enum": ["disaster_recovery", "primary", "replica"]
                      }
                    },
                    "required": ["component", "host", "port", "route", "usage"]
                  }
                },
                "connection_info": {
                  "type": "object",
                  "description": "Service-specific connection information properties",
                  "properties": {}
                },
                "connection_pools": {
                  "type": "array",
                  "description": "PostgreSQL PGBouncer connection pools",
                  "items": {
                    "type": "object",
                    "properties": {
                      "connection_uri": {
                        "type": "string",
                        "description": "Connection URI for the DB pool"
                      },
                      "database": {
                        "type": "string",
                        "description": "Database name",
                        "maxLength": 63
                      },
                      "pool_mode": {
                        "type": "string",
                        "description": "PGBouncer pool mode",
                        "enum": ["session", "transaction", "statement"]
                      },
                      "pool_name": {
                        "type": "string",
                        "description": "Connection pool name",
                        "maxLength": 63
                      },
                      "pool_size": {
                        "type": "integer",
                        "description": "Size of PGBouncer's PostgreSQL side connection pool",
                        "minimum": 1,
                        "maximum": 10000
                      },
                      "username": {
                        "type": "string",
                        "description": "Pool username",
                        "maxLength": 64
                      }
                    },
                    "required": [
                      "connection_uri",
                      "database",
                      "pool_mode",
                      "pool_name",
                      "pool_size"
                    ]
                  }
                },
                "create_time": {
                  "type": "string",
                  "description": "Service creation timestamp (ISO 8601)",
                  "maxLength": 36
                },
                "databases": {
                  "type": "array",
                  "description": "List of service's user database names",
                  "items": { "type": "string" }
                },
                "disk_space_mb": {
                  "type": "integer",
                  "description": "Megabytes of disk space for data storage",
                  "minimum": 0
                },
                "features": {
                  "type": "object",
                  "description": "Feature flags",
                  "properties": {}
                },
                "group_list": {
                  "type": "array",
                  "description": "List of service groups the service belongs to. This field is deprecated. It is always set to single element with value 'default'",
                  "items": { "type": "string" }
                },
                "kafka_acl": {
                  "type": "array",
                  "description": "List of Kafka-native ACL entries",
                  "items": {
                    "type": "object",
                    "properties": {
                      "host": {
                        "type": "string",
                        "description": "the host or * for all hosts",
                        "minLength": 0,
                        "maxLength": 256
                      },
                      "id": {
                        "type": "string",
                        "description": "ID",
                        "maxLength": 40
                      },
                      "operation": {
                        "type": "string",
                        "description": "Kafka ACL operation represents an operation which an ACL grants or denies permission to perform",
                        "enum": [
                          "All",
                          "Alter",
                          "AlterConfigs",
                          "ClusterAction",
                          "Create",
                          "CreateTokens",
                          "Delete",
                          "Describe",
                          "DescribeConfigs",
                          "DescribeTokens",
                          "IdempotentWrite",
                          "Read",
                          "Write"
                        ]
                      },
                      "pattern_type": {
                        "type": "string",
                        "description": "Kafka ACL pattern type of resource name",
                        "enum": ["LITERAL", "PREFIXED"]
                      },
                      "permission_type": {
                        "type": "string",
                        "description": "Kafka ACL permission type",
                        "enum": ["ALLOW", "DENY"]
                      },
                      "principal": {
                        "type": "string",
                        "description": "principal is in 'principalType:name' format",
                        "minLength": 0,
                        "maxLength": 256
                      },
                      "resource_name": {
                        "type": "string",
                        "description": "Resource pattern used to match specified resources",
                        "minLength": 0,
                        "maxLength": 256
                      },
                      "resource_type": {
                        "type": "string",
                        "description": "Kafka ACL resource type represents a type of resource which an ACL can be applied to",
                        "enum": [
                          "Cluster",
                          "DelegationToken",
                          "Group",
                          "Topic",
                          "TransactionalId",
                          "User"
                        ]
                      }
                    },
                    "required": [
                      "host",
                      "id",
                      "operation",
                      "pattern_type",
                      "permission_type",
                      "principal",
                      "resource_name",
                      "resource_type"
                    ]
                  }
                },
                "maintenance": {
                  "type": "object",
                  "description": "Automatic maintenance settings",
                  "properties": {
                    "dow": {
                      "type": "string",
                      "description": "Day of week for installing updates",
                      "enum": [
                        "monday",
                        "tuesday",
                        "wednesday",
                        "thursday",
                        "friday",
                        "saturday",
                        "sunday",
                        "never"
                      ]
                    },
                    "time": {
                      "type": "string",
                      "description": "Time for installing updates, UTC",
                      "minLength": 8,
                      "maxLength": 8
                    },
                    "updates": {
                      "type": "array",
                      "description": "List of updates waiting to be installed",
                      "items": {
                        "type": "object",
                        "properties": {
                          "deadline": {
                            "type": "string",
                            "description": "Deadline for installing the update"
                          },
                          "description": {
                            "type": "string",
                            "description": "Description of the update"
                          },
                          "documentation_link": {
                            "type": "string",
                            "description": "Optional link"
                          },
                          "impact": {
                            "type": "string",
                            "description": "Impact statement of the update"
                          },
                          "impact_portable_text": {
                            "type": "string",
                            "description": "Impact statement in portable text format"
                          },
                          "start_after": {
                            "type": "string",
                            "description": "The earliest time the update will be automatically applied"
                          },
                          "start_at": {
                            "type": "string",
                            "description": "The time when the update will be automatically applied"
                          }
                        }
                      }
                    }
                  },
                  "required": ["dow", "time", "updates"]
                },
                "metadata": {
                  "type": "object",
                  "description": "Service type specific metadata",
                  "properties": {}
                },
                "node_count": {
                  "type": "integer",
                  "description": "Number of service nodes in the active plan"
                },
                "node_cpu_count": {
                  "type": "integer",
                  "description": "Number of CPUs for each node"
                },
                "node_memory_mb": {
                  "type": "number",
                  "description": "Megabytes of memory for each node"
                },
                "node_states": {
                  "type": "array",
                  "description": "State of individual service nodes",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name of the service node"
                      },
                      "progress_updates": {
                        "type": "array",
                        "description": "Extra information regarding the progress for current state",
                        "items": {
                          "type": "object",
                          "properties": {
                            "completed": {
                              "type": "boolean",
                              "description": "Indicates whether this phase has been completed or not"
                            },
                            "current": {
                              "type": "integer",
                              "description": "Current progress for this phase. May be missing or null."
                            },
                            "max": {
                              "type": "integer",
                              "description": "Maximum progress value for this phase. May be missing or null. May change."
                            },
                            "min": {
                              "type": "integer",
                              "description": "Minimum progress value for this phase. May be missing or null."
                            },
                            "phase": {
                              "type": "string",
                              "description": "Key identifying this phase",
                              "enum": [
                                "prepare",
                                "basebackup",
                                "stream",
                                "finalize"
                              ]
                            },
                            "unit": {
                              "type": "string",
                              "description": "Unit for current/min/max values. New units may be added. If null should be treated as generic unit",
                              "enum": [
                                "binlogs",
                                "bytes_compressed",
                                "bytes_uncompressed",
                                "wal_lsn"
                              ]
                            }
                          },
                          "required": ["completed", "phase"]
                        }
                      },
                      "role": {
                        "type": "string",
                        "description": "Role of this node. Only returned for a subset of service types",
                        "enum": ["master", "standby", "read-replica"]
                      },
                      "shard": {
                        "type": "object",
                        "description": "Shard of this node. Only returned for a subset of service types",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the shard."
                          },
                          "position": {
                            "type": "integer",
                            "description": "Position of this shard within the service"
                          }
                        }
                      },
                      "state": {
                        "type": "string",
                        "description": "Current state of the service node",
                        "enum": [
                          "leaving",
                          "running",
                          "setting_up_vm",
                          "syncing_data",
                          "timing_out",
                          "unknown"
                        ]
                      }
                    },
                    "required": ["name", "state"]
                  }
                },
                "plan": {
                  "type": "string",
                  "description": "Subscription plan",
                  "maxLength": 128
                },
                "project_vpc_id": {
                  "type": "string",
                  "description": "Project VPC ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "schema_registry_acl": {
                  "type": "array",
                  "description": "List of Schema Registry ACL entries",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "ID",
                        "maxLength": 40
                      },
                      "permission": {
                        "type": "string",
                        "description": "ACL entry for Schema Registry",
                        "enum": [
                          "schema_registry_read",
                          "schema_registry_write"
                        ]
                      },
                      "resource": {
                        "type": "string",
                        "description": "Schema Registry ACL entry resource name pattern",
                        "minLength": 1,
                        "maxLength": 249
                      },
                      "username": {
                        "type": "string",
                        "description": "Username",
                        "minLength": 1,
                        "maxLength": 64
                      }
                    },
                    "required": ["permission", "resource", "username"]
                  }
                },
                "server_group": {
                  "type": "object",
                  "description": "Service IaaS server group",
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "Flag set if server group is in use for the service"
                    },
                    "type": {
                      "type": "string",
                      "description": "IaaS server group type"
                    }
                  }
                },
                "service_integrations": {
                  "type": "array",
                  "description": "Integrations with other services",
                  "items": {
                    "type": "object",
                    "properties": {
                      "active": {
                        "type": "boolean",
                        "description": "True when integration is active"
                      },
                      "description": {
                        "type": "string",
                        "description": "Description of the integration"
                      },
                      "dest_endpoint": {
                        "type": "string",
                        "description": "Destination endpoint name"
                      },
                      "dest_endpoint_id": {
                        "type": "string",
                        "description": "Destination endpoint id"
                      },
                      "dest_project": {
                        "type": "string",
                        "description": "Project name",
                        "maxLength": 63
                      },
                      "dest_service": {
                        "type": "string",
                        "description": "Destination service name"
                      },
                      "dest_service_type": {
                        "type": "string",
                        "description": "Service type code",
                        "maxLength": 64
                      },
                      "enabled": {
                        "type": "boolean",
                        "description": "True when integration is enabled"
                      },
                      "integration_status": {
                        "type": "object",
                        "description": "Integration status",
                        "properties": {
                          "state": {
                            "type": "object",
                            "description": "Service integration state",
                            "properties": {
                              "errors": {
                                "type": "array",
                                "description": "Errors",
                                "items": { "type": "string" }
                              },
                              "likely_error_cause": {
                                "type": "string",
                                "description": "Most likely cause of the errors",
                                "enum": [
                                  "null",
                                  "destination",
                                  "integration",
                                  "source",
                                  "unknown"
                                ]
                              },
                              "nodes": {
                                "type": "object",
                                "description": "Nodes",
                                "properties": {}
                              },
                              "status": {
                                "type": "string",
                                "description": "Service integration status",
                                "enum": [
                                  "failed",
                                  "inactive",
                                  "running",
                                  "starting",
                                  "unknown"
                                ]
                              }
                            },
                            "required": ["errors", "nodes", "status"]
                          },
                          "status_user_desc": {
                            "type": "string",
                            "description": "Integration status description"
                          }
                        },
                        "required": ["state", "status_user_desc"]
                      },
                      "integration_type": {
                        "type": "string",
                        "description": "Type of the integration"
                      },
                      "service_integration_id": {
                        "type": "string",
                        "description": "Integration ID"
                      },
                      "source_endpoint": {
                        "type": "string",
                        "description": "Source endpoint name"
                      },
                      "source_endpoint_id": {
                        "type": "string",
                        "description": "Source endpoint ID"
                      },
                      "source_project": {
                        "type": "string",
                        "description": "Project name",
                        "maxLength": 63
                      },
                      "source_service": {
                        "type": "string",
                        "description": "Source service name"
                      },
                      "source_service_type": {
                        "type": "string",
                        "description": "Service type code",
                        "maxLength": 64
                      },
                      "user_config": {
                        "type": "object",
                        "description": "Service integration settings",
                        "properties": {}
                      }
                    },
                    "required": [
                      "active",
                      "description",
                      "dest_project",
                      "dest_service_type",
                      "enabled",
                      "integration_type",
                      "service_integration_id",
                      "source_project",
                      "source_service",
                      "source_service_type"
                    ]
                  }
                },
                "service_name": {
                  "type": "string",
                  "description": "Service name",
                  "minLength": 1,
                  "maxLength": 64
                },
                "service_notifications": {
                  "type": "array",
                  "description": "Service notifications",
                  "items": {
                    "type": "object",
                    "properties": {
                      "level": {
                        "type": "string",
                        "description": "Notification level",
                        "enum": ["notice", "warning"]
                      },
                      "message": {
                        "type": "string",
                        "description": "Human notification message",
                        "maxLength": 1024
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Notification metadata",
                        "properties": {
                          "end_of_life_help_article_url": {
                            "type": "string",
                            "description": "Link to the help article"
                          },
                          "end_of_life_policy_url": {
                            "type": "string",
                            "description": "Link to the help article"
                          },
                          "service_end_of_life_time": {
                            "type": "string",
                            "description": "Timestamp in ISO 8601 format, always in UTC",
                            "maxLength": 36
                          },
                          "upgrade_to_service_type": {
                            "type": "string",
                            "description": "If the customer takes no action, the service is updated to this service type when end of life is reached on the Aiven platform. If it is the same as the service type, the platform only upgrades the version.",
                            "maxLength": 64
                          },
                          "upgrade_to_version": {
                            "type": "string",
                            "description": "The version to which the service will be updated at the end of life on the Aiven platform if the user does not take any action",
                            "maxLength": 32
                          }
                        }
                      },
                      "type": {
                        "type": "string",
                        "description": "Notification type",
                        "enum": [
                          "service_end_of_life",
                          "service_powered_off_removal"
                        ]
                      }
                    },
                    "required": ["level", "message", "metadata", "type"]
                  }
                },
                "service_type": {
                  "type": "string",
                  "description": "Service type code",
                  "maxLength": 64
                },
                "service_type_description": {
                  "type": "string",
                  "description": "Single line description of the service"
                },
                "service_uri": {
                  "type": "string",
                  "description": "URI for connecting to the service (may be null)"
                },
                "service_uri_params": {
                  "type": "object",
                  "description": "service_uri parameterized into key-value pairs",
                  "properties": {}
                },
                "state": {
                  "type": "string",
                  "description": "State of the service",
                  "enum": ["POWEROFF", "REBALANCING", "REBUILDING", "RUNNING"]
                },
                "tags": {
                  "type": "object",
                  "description": "Set of resource tags",
                  "properties": {}
                },
                "tech_emails": {
                  "type": "array",
                  "description": "List of service technical email addresses",
                  "maxItems": 10,
                  "items": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "description": "User email address",
                        "maxLength": 319
                      }
                    },
                    "required": ["email"]
                  }
                },
                "termination_protection": {
                  "type": "boolean",
                  "description": "Service is protected against termination and powering off"
                },
                "topics": {
                  "type": "array",
                  "description": "Kafka topics. DEPRECATED: Use /project/$project/service/$service/topic instead",
                  "items": {
                    "type": "object",
                    "properties": {
                      "cleanup_policy": {
                        "type": "string",
                        "description": "cleanup.policy",
                        "maxLength": 64
                      },
                      "min_insync_replicas": {
                        "type": "integer",
                        "description": "min.insync.replicas",
                        "minimum": 1
                      },
                      "partitions": {
                        "type": "integer",
                        "description": "Number of partitions",
                        "minimum": 1,
                        "maximum": 1000000
                      },
                      "replication": {
                        "type": "integer",
                        "description": "Number of replicas",
                        "minimum": 1
                      },
                      "retention_bytes": {
                        "type": "integer",
                        "description": "retention.bytes"
                      },
                      "retention_hours": {
                        "type": "integer",
                        "description": "Retention period (hours)",
                        "maximum": 2562047788015
                      },
                      "state": {
                        "type": "string",
                        "description": "Topic state",
                        "enum": ["ACTIVE", "CONFIGURING", "DELETING"]
                      },
                      "topic_name": {
                        "type": "string",
                        "description": "Topic name",
                        "minLength": 1,
                        "maxLength": 249
                      }
                    },
                    "required": [
                      "cleanup_policy",
                      "min_insync_replicas",
                      "partitions",
                      "replication",
                      "retention_bytes",
                      "retention_hours",
                      "topic_name"
                    ]
                  }
                },
                "update_time": {
                  "type": "string",
                  "description": "Service last update timestamp (ISO 8601)",
                  "maxLength": 36
                },
                "user_config": {
                  "type": "object",
                  "description": "Service type-specific settings",
                  "properties": {}
                },
                "users": {
                  "type": "array",
                  "description": "List of service users",
                  "items": {
                    "type": "object",
                    "properties": {
                      "access_cert": {
                        "type": "string",
                        "description": "Access certificate for TLS client authentication"
                      },
                      "access_cert_not_valid_after_time": {
                        "type": "string",
                        "description": "Validity end time (ISO8601) for the current access certificate"
                      },
                      "access_control": {
                        "type": "object",
                        "description": "Service specific access controls for user\n\nService type specific access control rules for user. Currently only used for configuring user ACLs for Redis version 6 and above.",
                        "properties": {
                          "dragonfly_acl_categories": {
                            "type": "array",
                            "description": "Command category rules",
                            "maxItems": 256,
                            "items": { "type": "string" }
                          },
                          "dragonfly_acl_commands": {
                            "type": "array",
                            "description": "Rules for individual commands",
                            "maxItems": 256,
                            "items": { "type": "string" }
                          },
                          "dragonfly_acl_keys": {
                            "type": "array",
                            "description": "Key access rules",
                            "maxItems": 256,
                            "items": { "type": "string" }
                          },
                          "m3_group": {
                            "type": "string",
                            "description": "M3 access group to associate users with",
                            "maxLength": 16
                          },
                          "pg_allow_replication": {
                            "type": "boolean",
                            "description": "Enable REPLICATION role option"
                          },
                          "redis_acl_categories": {
                            "type": "array",
                            "description": "Command category rules",
                            "maxItems": 256,
                            "items": { "type": "string" }
                          },
                          "redis_acl_channels": {
                            "type": "array",
                            "description": "Permitted pub/sub channel patterns\n\nGlob-style patterns defining which pub/sub channels can be accessed. If array is not defined, the default policy is used (allchannels).",
                            "maxItems": 256,
                            "items": { "type": "string" }
                          },
                          "redis_acl_commands": {
                            "type": "array",
                            "description": "Rules for individual commands",
                            "maxItems": 256,
                            "items": { "type": "string" }
                          },
                          "redis_acl_keys": {
                            "type": "array",
                            "description": "Key access rules",
                            "maxItems": 256,
                            "items": { "type": "string" }
                          },
                          "valkey_acl_categories": {
                            "type": "array",
                            "description": "Command category rules",
                            "maxItems": 256,
                            "items": { "type": "string" }
                          },
                          "valkey_acl_channels": {
                            "type": "array",
                            "description": "Permitted pub/sub channel patterns\n\nGlob-style patterns defining which pub/sub channels can be accessed. If array is not defined, the default policy is used (allchannels).",
                            "maxItems": 256,
                            "items": { "type": "string" }
                          },
                          "valkey_acl_commands": {
                            "type": "array",
                            "description": "Rules for individual commands",
                            "maxItems": 256,
                            "items": { "type": "string" }
                          },
                          "valkey_acl_keys": {
                            "type": "array",
                            "description": "Key access rules",
                            "maxItems": 256,
                            "items": { "type": "string" }
                          }
                        }
                      },
                      "access_key": {
                        "type": "string",
                        "description": "Access key for TLS client authentication"
                      },
                      "authentication": {
                        "type": "string",
                        "description": "Authentication details",
                        "enum": [
                          "null",
                          "caching_sha2_password",
                          "mysql_native_password"
                        ]
                      },
                      "expiring_cert_not_valid_after_time": {
                        "type": "string",
                        "description": "Validity end time (ISO8601) for the expiring access certificate"
                      },
                      "password": {
                        "type": "string",
                        "description": "Account password. A null value indicates a user overridden password."
                      },
                      "type": {
                        "type": "string",
                        "description": "Account type"
                      },
                      "username": {
                        "type": "string",
                        "description": "Account username"
                      }
                    },
                    "required": ["password", "type", "username"]
                  }
                }
              },
              "required": [
                "cloud_name",
                "create_time",
                "group_list",
                "plan",
                "project_vpc_id",
                "service_integrations",
                "service_name",
                "service_type",
                "service_uri",
                "state",
                "termination_protection",
                "update_time",
                "user_config"
              ]
            }
          }
        },
        "required": ["services"]
      },
      "ServiceMaintenanceStartResponse": {
        "type": "object",
        "description": "ServiceMaintenanceStartResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceMetricsFetchRequestBody": {
        "type": "object",
        "description": "ServiceMetricsFetchRequestBody",
        "properties": {
          "period": {
            "type": "string",
            "description": "Metrics time period",
            "enum": ["hour", "day", "week", "month", "year"]
          }
        }
      },
      "ServiceMetricsFetchResponse": {
        "type": "object",
        "description": "ServiceMetricsFetchResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "metrics": {
            "type": "object",
            "description": "Service metrics in Google chart compatible format",
            "properties": {}
          }
        },
        "required": ["metrics"]
      },
      "ServicePrivatelinkAWSConnectionListResponse": {
        "type": "object",
        "description": "ServicePrivatelinkAWSConnectionListResponse",
        "properties": {
          "connections": {
            "type": "array",
            "description": "AWS Privatelink VPC Endpoint connection list",
            "items": {
              "type": "object",
              "properties": {
                "dns_name": {
                  "type": "string",
                  "description": "AWS VPC Endpoint DNS name"
                },
                "privatelink_connection_id": {
                  "type": "string",
                  "description": "Privatelink connection ID"
                },
                "state": {
                  "type": "string",
                  "description": "Privatelink connection state",
                  "enum": [
                    "pending-user-approval",
                    "user-approved",
                    "connected",
                    "active"
                  ]
                },
                "vpc_endpoint_id": {
                  "type": "string",
                  "description": "AWS VPC Endpoint ID"
                }
              },
              "required": ["dns_name", "state", "vpc_endpoint_id"]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["connections"]
      },
      "ServicePrivatelinkAWSCreateRequestBody": {
        "type": "object",
        "description": "ServicePrivatelinkAWSCreateRequestBody",
        "properties": {
          "principals": {
            "type": "array",
            "description": "ARN allowlist\n\nARNs of principals allowed connecting to the service",
            "minItems": 1,
            "maxItems": 16,
            "items": { "type": "string" }
          }
        },
        "required": ["principals"]
      },
      "ServicePrivatelinkAWSCreateResponse": {
        "type": "object",
        "description": "ServicePrivatelinkAWSCreateResponse",
        "properties": {
          "aws_service_id": {
            "type": "string",
            "description": "AWS VPC endpoint service ID"
          },
          "aws_service_name": {
            "type": "string",
            "description": "AWS VPC endpoint service name"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "principals": {
            "type": "array",
            "description": "ARN allowlist\n\nARNs of principals allowed connecting to the service",
            "minItems": 1,
            "maxItems": 16,
            "items": { "type": "string" }
          },
          "state": {
            "type": "string",
            "description": "Privatelink resource state",
            "enum": ["creating", "active", "deleting"]
          }
        },
        "required": ["principals", "state"]
      },
      "ServicePrivatelinkAWSDeleteResponse": {
        "type": "object",
        "description": "ServicePrivatelinkAWSDeleteResponse",
        "properties": {
          "aws_service_id": {
            "type": "string",
            "description": "AWS VPC endpoint service ID"
          },
          "aws_service_name": {
            "type": "string",
            "description": "AWS VPC endpoint service name"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "principals": {
            "type": "array",
            "description": "ARN allowlist\n\nARNs of principals allowed connecting to the service",
            "minItems": 1,
            "maxItems": 16,
            "items": { "type": "string" }
          },
          "state": {
            "type": "string",
            "description": "Privatelink resource state",
            "enum": ["creating", "active", "deleting"]
          }
        },
        "required": ["principals", "state"]
      },
      "ServicePrivatelinkAWSGetResponse": {
        "type": "object",
        "description": "ServicePrivatelinkAWSGetResponse",
        "properties": {
          "aws_service_id": {
            "type": "string",
            "description": "AWS VPC endpoint service ID"
          },
          "aws_service_name": {
            "type": "string",
            "description": "AWS VPC endpoint service name"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "principals": {
            "type": "array",
            "description": "ARN allowlist\n\nARNs of principals allowed connecting to the service",
            "minItems": 1,
            "maxItems": 16,
            "items": { "type": "string" }
          },
          "state": {
            "type": "string",
            "description": "Privatelink resource state",
            "enum": ["creating", "active", "deleting"]
          }
        },
        "required": ["principals", "state"]
      },
      "ServicePrivatelinkAWSUpdateRequestBody": {
        "type": "object",
        "description": "ServicePrivatelinkAWSUpdateRequestBody",
        "properties": {
          "principals": {
            "type": "array",
            "description": "ARN allowlist\n\nARNs of principals allowed connecting to the service",
            "minItems": 1,
            "maxItems": 16,
            "items": { "type": "string" }
          }
        },
        "required": ["principals"]
      },
      "ServicePrivatelinkAWSUpdateResponse": {
        "type": "object",
        "description": "ServicePrivatelinkAWSUpdateResponse",
        "properties": {
          "aws_service_id": {
            "type": "string",
            "description": "AWS VPC endpoint service ID"
          },
          "aws_service_name": {
            "type": "string",
            "description": "AWS VPC endpoint service name"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "principals": {
            "type": "array",
            "description": "ARN allowlist\n\nARNs of principals allowed connecting to the service",
            "minItems": 1,
            "maxItems": 16,
            "items": { "type": "string" }
          },
          "state": {
            "type": "string",
            "description": "Privatelink resource state",
            "enum": ["creating", "active", "deleting"]
          }
        },
        "required": ["principals", "state"]
      },
      "ServicePrivatelinkAzureConnectionApprovalResponse": {
        "type": "object",
        "description": "ServicePrivatelinkAzureConnectionApprovalResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "private_endpoint_id": {
            "type": "string",
            "description": "Azure private endpoint ID"
          },
          "privatelink_connection_id": {
            "type": "string",
            "description": "Privatelink connection ID"
          },
          "state": {
            "type": "string",
            "description": "Privatelink connection state",
            "enum": [
              "pending-user-approval",
              "user-approved",
              "connected",
              "active"
            ]
          },
          "user_ip_address": {
            "type": "string",
            "description": "(Private) IP address of Privatelink endpoint",
            "maxLength": 15
          }
        },
        "required": ["private_endpoint_id", "state", "user_ip_address"]
      },
      "ServicePrivatelinkAzureConnectionListResponse": {
        "type": "object",
        "description": "ServicePrivatelinkAzureConnectionListResponse",
        "properties": {
          "connections": {
            "type": "array",
            "description": "Private endpoint connection list",
            "items": {
              "type": "object",
              "properties": {
                "private_endpoint_id": {
                  "type": "string",
                  "description": "Azure private endpoint ID"
                },
                "privatelink_connection_id": {
                  "type": "string",
                  "description": "Privatelink connection ID"
                },
                "state": {
                  "type": "string",
                  "description": "Privatelink connection state",
                  "enum": [
                    "pending-user-approval",
                    "user-approved",
                    "connected",
                    "active"
                  ]
                },
                "user_ip_address": {
                  "type": "string",
                  "description": "(Private) IP address of Privatelink endpoint",
                  "maxLength": 15
                }
              },
              "required": ["private_endpoint_id", "state", "user_ip_address"]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["connections"]
      },
      "ServicePrivatelinkAzureConnectionUpdateRequestBody": {
        "type": "object",
        "description": "ServicePrivatelinkAzureConnectionUpdateRequestBody",
        "properties": {
          "user_ip_address": {
            "type": "string",
            "description": "(Private) IP address of Privatelink endpoint",
            "maxLength": 15
          }
        },
        "required": ["user_ip_address"]
      },
      "ServicePrivatelinkAzureConnectionUpdateResponse": {
        "type": "object",
        "description": "ServicePrivatelinkAzureConnectionUpdateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "private_endpoint_id": {
            "type": "string",
            "description": "Azure private endpoint ID"
          },
          "privatelink_connection_id": {
            "type": "string",
            "description": "Privatelink connection ID"
          },
          "state": {
            "type": "string",
            "description": "Privatelink connection state",
            "enum": [
              "pending-user-approval",
              "user-approved",
              "connected",
              "active"
            ]
          },
          "user_ip_address": {
            "type": "string",
            "description": "(Private) IP address of Privatelink endpoint",
            "maxLength": 15
          }
        },
        "required": ["private_endpoint_id", "state", "user_ip_address"]
      },
      "ServicePrivatelinkAzureCreateRequestBody": {
        "type": "object",
        "description": "ServicePrivatelinkAzureCreateRequestBody",
        "properties": {
          "user_subscription_ids": {
            "type": "array",
            "description": "Subscription ID allowlist\n\nIDs of Azure subscriptions allowed to connect to the service",
            "maxItems": 16,
            "items": { "type": "string" }
          }
        },
        "required": ["user_subscription_ids"]
      },
      "ServicePrivatelinkAzureCreateResponse": {
        "type": "object",
        "description": "ServicePrivatelinkAzureCreateResponse",
        "properties": {
          "azure_service_alias": {
            "type": "string",
            "description": "Azure Privatelink service alias"
          },
          "azure_service_id": {
            "type": "string",
            "description": "Azure Privatelink service ID"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "state": {
            "type": "string",
            "description": "Privatelink resource state",
            "enum": ["creating", "active", "deleting"]
          },
          "user_subscription_ids": {
            "type": "array",
            "description": "Subscription ID allowlist\n\nIDs of Azure subscriptions allowed to connect to the service",
            "maxItems": 16,
            "items": { "type": "string" }
          }
        },
        "required": ["state", "user_subscription_ids"]
      },
      "ServicePrivatelinkAzureDeleteResponse": {
        "type": "object",
        "description": "ServicePrivatelinkAzureDeleteResponse",
        "properties": {
          "azure_service_alias": {
            "type": "string",
            "description": "Azure Privatelink service alias"
          },
          "azure_service_id": {
            "type": "string",
            "description": "Azure Privatelink service ID"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "state": {
            "type": "string",
            "description": "Privatelink resource state",
            "enum": ["creating", "active", "deleting"]
          },
          "user_subscription_ids": {
            "type": "array",
            "description": "Subscription ID allowlist\n\nIDs of Azure subscriptions allowed to connect to the service",
            "maxItems": 16,
            "items": { "type": "string" }
          }
        },
        "required": ["state", "user_subscription_ids"]
      },
      "ServicePrivatelinkAzureGetResponse": {
        "type": "object",
        "description": "ServicePrivatelinkAzureGetResponse",
        "properties": {
          "azure_service_alias": {
            "type": "string",
            "description": "Azure Privatelink service alias"
          },
          "azure_service_id": {
            "type": "string",
            "description": "Azure Privatelink service ID"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "state": {
            "type": "string",
            "description": "Privatelink resource state",
            "enum": ["creating", "active", "deleting"]
          },
          "user_subscription_ids": {
            "type": "array",
            "description": "Subscription ID allowlist\n\nIDs of Azure subscriptions allowed to connect to the service",
            "maxItems": 16,
            "items": { "type": "string" }
          }
        },
        "required": ["state", "user_subscription_ids"]
      },
      "ServicePrivatelinkAzureUpdateRequestBody": {
        "type": "object",
        "description": "ServicePrivatelinkAzureUpdateRequestBody",
        "properties": {
          "user_subscription_ids": {
            "type": "array",
            "description": "Subscription ID allowlist\n\nIDs of Azure subscriptions allowed to connect to the service",
            "maxItems": 16,
            "items": { "type": "string" }
          }
        },
        "required": ["user_subscription_ids"]
      },
      "ServicePrivatelinkAzureUpdateResponse": {
        "type": "object",
        "description": "ServicePrivatelinkAzureUpdateResponse",
        "properties": {
          "azure_service_alias": {
            "type": "string",
            "description": "Azure Privatelink service alias"
          },
          "azure_service_id": {
            "type": "string",
            "description": "Azure Privatelink service ID"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "state": {
            "type": "string",
            "description": "Privatelink resource state",
            "enum": ["creating", "active", "deleting"]
          },
          "user_subscription_ids": {
            "type": "array",
            "description": "Subscription ID allowlist\n\nIDs of Azure subscriptions allowed to connect to the service",
            "maxItems": 16,
            "items": { "type": "string" }
          }
        },
        "required": ["state", "user_subscription_ids"]
      },
      "ServiceQueryActivityRequestBody": {
        "type": "object",
        "description": "ServiceQueryActivityRequestBody",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "Limit for number of results",
            "minimum": 1,
            "maximum": 5000
          },
          "offset": {
            "type": "integer",
            "description": "Offset for retrieved results based on sort order",
            "minimum": 0
          },
          "order_by": {
            "type": "string",
            "description": "Order in which to sort retrieved results",
            "maxLength": 256
          }
        }
      },
      "ServiceQueryActivityResponse": {
        "type": "object",
        "description": "ServiceQueryActivityResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "queries": {
            "type": "array",
            "description": "List of currently running queries and open connections",
            "items": {
              "type": "object",
              "properties": {
                "active_channel_subscriptions": {
                  "type": "integer",
                  "description": "Currently active channel subscriptions"
                },
                "active_database": {
                  "type": "string",
                  "description": "Selected database"
                },
                "active_pattern_matching_channel_subscriptions": {
                  "type": "integer",
                  "description": "Currently active channel subscriptions using pattern matching"
                },
                "application_name": {
                  "type": "string",
                  "description": "Application name when set"
                },
                "backend_start": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "backend_type": {
                  "type": "string",
                  "description": "Backend type"
                },
                "backend_xid": {
                  "type": "integer",
                  "description": "XID for current backend"
                },
                "backend_xmin": {
                  "type": "integer",
                  "description": "xmin for current backend"
                },
                "client_addr": {
                  "type": "string",
                  "description": "IP address:port pair. Not always available due to load balancers"
                },
                "client_hostname": {
                  "type": "string",
                  "description": "Client hostname"
                },
                "client_port": {
                  "type": "integer",
                  "description": "Client port, -1 is unknown",
                  "maximum": 65536
                },
                "connection_age_seconds": {
                  "type": "number",
                  "description": "Connection age in seconds"
                },
                "connection_idle_seconds": {
                  "type": "number",
                  "description": "Connection idle time in seconds"
                },
                "datid": { "type": "integer", "description": "Database ID" },
                "datname": { "type": "string", "description": "Database name" },
                "flags": {
                  "type": "array",
                  "description": "Connection state flags",
                  "items": { "type": "string" }
                },
                "flags_raw": {
                  "type": "string",
                  "description": "Raw connection flags string"
                },
                "id": {
                  "type": "string",
                  "description": "Unique connection ID"
                },
                "leader_pid": {
                  "type": "integer",
                  "description": "Leader process ID",
                  "minimum": 0
                },
                "multi_exec_commands": {
                  "type": "integer",
                  "description": "Number of MULTI/EXEC comands"
                },
                "name": {
                  "type": "string",
                  "description": "Connection name, if specified"
                },
                "output_buffer": {
                  "type": "integer",
                  "description": "Output buffer length (disabled if 0)"
                },
                "output_buffer_memory": {
                  "type": "integer",
                  "description": "Output buffer memory"
                },
                "output_list_length": {
                  "type": "integer",
                  "description": "Output list, overflow for output buffering"
                },
                "pid": {
                  "type": "integer",
                  "description": "Connection process ID",
                  "minimum": 0
                },
                "query": {
                  "type": "string",
                  "description": "Last/current query running on this connection"
                },
                "query_buffer": {
                  "type": "integer",
                  "description": "Query buffer length (disabled if 0)"
                },
                "query_buffer_free": {
                  "type": "integer",
                  "description": "Free bytes in query buffer, if enabled"
                },
                "query_duration": {
                  "type": "number",
                  "description": "Duration of the last/current query in seconds"
                },
                "query_id": {
                  "type": "integer",
                  "description": "Hash code to identify identical normalized queries."
                },
                "query_start": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "state": {
                  "type": "string",
                  "description": "Connection state"
                },
                "state_change": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "usename": { "type": "string", "description": "Username" },
                "usesysid": { "type": "integer", "description": "User ID" },
                "wait_event": {
                  "type": "string",
                  "description": "Connection wait event"
                },
                "wait_event_type": {
                  "type": "string",
                  "description": "Connection wait event type"
                },
                "waiting": {
                  "type": "boolean",
                  "description": "Query is waiting"
                },
                "xact_start": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                }
              }
            }
          }
        },
        "required": ["queries"]
      },
      "ServiceQueryStatisticsResetResponse": {
        "type": "object",
        "description": "ServiceQueryStatisticsResetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "queries": {
            "type": "array",
            "description": "List of query statistics",
            "items": { "type": "object", "properties": {} }
          }
        },
        "required": ["queries"]
      },
      "ServiceServiceTypeUpdateRequestBody": {
        "type": "object",
        "description": "ServiceServiceTypeUpdateRequestBody",
        "properties": {
          "service_type": {
            "type": "string",
            "description": "Service type code",
            "maxLength": 64
          }
        },
        "required": ["service_type"]
      },
      "ServiceServiceTypeUpdateResponse": {
        "type": "object",
        "description": "ServiceServiceTypeUpdateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service": {
            "type": "object",
            "description": "Service information",
            "properties": {
              "acl": {
                "type": "array",
                "description": "List of Aiven ACL entries for Kafka service",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID",
                      "maxLength": 40
                    },
                    "permission": {
                      "type": "string",
                      "description": "Kafka permission",
                      "enum": ["admin", "read", "readwrite", "write"]
                    },
                    "topic": {
                      "type": "string",
                      "description": "Topic name pattern",
                      "minLength": 1,
                      "maxLength": 249
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": ["permission", "topic", "username"]
                }
              },
              "backups": {
                "type": "array",
                "description": "List of backups for the service",
                "items": {
                  "type": "object",
                  "properties": {
                    "additional_regions": {
                      "type": "array",
                      "description": "Additional backup regions, if available",
                      "items": {
                        "type": "object",
                        "properties": {
                          "cloud": {
                            "type": "string",
                            "description": "Target cloud",
                            "maxLength": 256
                          },
                          "pause_reason": {
                            "type": "string",
                            "description": "Reason for pausing the backup synchronization"
                          },
                          "paused": {
                            "type": "boolean",
                            "description": "Indicates additional backup synchronization is paused"
                          },
                          "region": {
                            "type": "string",
                            "description": "Cloud storage region name"
                          }
                        },
                        "required": ["cloud"]
                      }
                    },
                    "backup_name": {
                      "type": "string",
                      "description": "Internal name of this backup"
                    },
                    "backup_time": {
                      "type": "string",
                      "description": "Backup timestamp (ISO 8601)",
                      "maxLength": 36
                    },
                    "data_size": {
                      "type": "integer",
                      "description": "Backup's original size before compression"
                    },
                    "storage_location": {
                      "type": "string",
                      "description": "Location where this backup is stored"
                    },
                    "tiered_storage_data_size": {
                      "type": "integer",
                      "description": "The amount of tiered storage data in bytes referenced by this backup."
                    }
                  },
                  "required": ["backup_name", "backup_time", "data_size"]
                }
              },
              "cloud_description": {
                "type": "string",
                "description": "Cloud provider and location"
              },
              "cloud_name": {
                "type": "string",
                "description": "Target cloud",
                "maxLength": 256
              },
              "components": {
                "type": "array",
                "description": "Service component information objects",
                "items": {
                  "type": "object",
                  "properties": {
                    "component": {
                      "type": "string",
                      "description": "Service component name"
                    },
                    "host": {
                      "type": "string",
                      "description": "DNS name for connecting to the service component"
                    },
                    "kafka_authentication_method": {
                      "type": "string",
                      "description": "Kafka authentication method. This is a value specific to the 'kafka' service component",
                      "enum": ["certificate", "sasl"]
                    },
                    "kafka_ssl_ca": {
                      "type": "string",
                      "description": "Specifies if this port uses Project CA or Letsencrypt. If not specified, the default is using Project CA.This is a value specific to the 'kafka' service component.",
                      "enum": ["project_ca", "letsencrypt"]
                    },
                    "path": {
                      "type": "string",
                      "description": "Path component of the service URL (useful only if service component is HTTP or HTTPS endpoint)"
                    },
                    "port": {
                      "type": "integer",
                      "description": "Port number for connecting to the service component",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "privatelink_connection_id": {
                      "type": "string",
                      "description": "Privatelink connection ID"
                    },
                    "route": {
                      "type": "string",
                      "description": "Network access route",
                      "enum": ["dynamic", "public", "private", "privatelink"]
                    },
                    "ssl": {
                      "type": "boolean",
                      "description": "Whether the endpoint is encrypted or accepts plaintext. By default endpoints are always encrypted andthis property is only included for service components that may disable encryption."
                    },
                    "usage": {
                      "type": "string",
                      "description": "DNS usage name",
                      "enum": ["disaster_recovery", "primary", "replica"]
                    }
                  },
                  "required": ["component", "host", "port", "route", "usage"]
                }
              },
              "connection_info": {
                "type": "object",
                "description": "Service-specific connection information properties",
                "properties": {}
              },
              "connection_pools": {
                "type": "array",
                "description": "PostgreSQL PGBouncer connection pools",
                "items": {
                  "type": "object",
                  "properties": {
                    "connection_uri": {
                      "type": "string",
                      "description": "Connection URI for the DB pool"
                    },
                    "database": {
                      "type": "string",
                      "description": "Database name",
                      "maxLength": 63
                    },
                    "pool_mode": {
                      "type": "string",
                      "description": "PGBouncer pool mode",
                      "enum": ["session", "transaction", "statement"]
                    },
                    "pool_name": {
                      "type": "string",
                      "description": "Connection pool name",
                      "maxLength": 63
                    },
                    "pool_size": {
                      "type": "integer",
                      "description": "Size of PGBouncer's PostgreSQL side connection pool",
                      "minimum": 1,
                      "maximum": 10000
                    },
                    "username": {
                      "type": "string",
                      "description": "Pool username",
                      "maxLength": 64
                    }
                  },
                  "required": [
                    "connection_uri",
                    "database",
                    "pool_mode",
                    "pool_name",
                    "pool_size"
                  ]
                }
              },
              "create_time": {
                "type": "string",
                "description": "Service creation timestamp (ISO 8601)",
                "maxLength": 36
              },
              "databases": {
                "type": "array",
                "description": "List of service's user database names",
                "items": { "type": "string" }
              },
              "disk_space_mb": {
                "type": "integer",
                "description": "Megabytes of disk space for data storage",
                "minimum": 0
              },
              "features": {
                "type": "object",
                "description": "Feature flags",
                "properties": {}
              },
              "group_list": {
                "type": "array",
                "description": "List of service groups the service belongs to. This field is deprecated. It is always set to single element with value 'default'",
                "items": { "type": "string" }
              },
              "kafka_acl": {
                "type": "array",
                "description": "List of Kafka-native ACL entries",
                "items": {
                  "type": "object",
                  "properties": {
                    "host": {
                      "type": "string",
                      "description": "the host or * for all hosts",
                      "minLength": 0,
                      "maxLength": 256
                    },
                    "id": {
                      "type": "string",
                      "description": "ID",
                      "maxLength": 40
                    },
                    "operation": {
                      "type": "string",
                      "description": "Kafka ACL operation represents an operation which an ACL grants or denies permission to perform",
                      "enum": [
                        "All",
                        "Alter",
                        "AlterConfigs",
                        "ClusterAction",
                        "Create",
                        "CreateTokens",
                        "Delete",
                        "Describe",
                        "DescribeConfigs",
                        "DescribeTokens",
                        "IdempotentWrite",
                        "Read",
                        "Write"
                      ]
                    },
                    "pattern_type": {
                      "type": "string",
                      "description": "Kafka ACL pattern type of resource name",
                      "enum": ["LITERAL", "PREFIXED"]
                    },
                    "permission_type": {
                      "type": "string",
                      "description": "Kafka ACL permission type",
                      "enum": ["ALLOW", "DENY"]
                    },
                    "principal": {
                      "type": "string",
                      "description": "principal is in 'principalType:name' format",
                      "minLength": 0,
                      "maxLength": 256
                    },
                    "resource_name": {
                      "type": "string",
                      "description": "Resource pattern used to match specified resources",
                      "minLength": 0,
                      "maxLength": 256
                    },
                    "resource_type": {
                      "type": "string",
                      "description": "Kafka ACL resource type represents a type of resource which an ACL can be applied to",
                      "enum": [
                        "Cluster",
                        "DelegationToken",
                        "Group",
                        "Topic",
                        "TransactionalId",
                        "User"
                      ]
                    }
                  },
                  "required": [
                    "host",
                    "id",
                    "operation",
                    "pattern_type",
                    "permission_type",
                    "principal",
                    "resource_name",
                    "resource_type"
                  ]
                }
              },
              "maintenance": {
                "type": "object",
                "description": "Automatic maintenance settings",
                "properties": {
                  "dow": {
                    "type": "string",
                    "description": "Day of week for installing updates",
                    "enum": [
                      "monday",
                      "tuesday",
                      "wednesday",
                      "thursday",
                      "friday",
                      "saturday",
                      "sunday",
                      "never"
                    ]
                  },
                  "time": {
                    "type": "string",
                    "description": "Time for installing updates, UTC",
                    "minLength": 8,
                    "maxLength": 8
                  },
                  "updates": {
                    "type": "array",
                    "description": "List of updates waiting to be installed",
                    "items": {
                      "type": "object",
                      "properties": {
                        "deadline": {
                          "type": "string",
                          "description": "Deadline for installing the update"
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the update"
                        },
                        "documentation_link": {
                          "type": "string",
                          "description": "Optional link"
                        },
                        "impact": {
                          "type": "string",
                          "description": "Impact statement of the update"
                        },
                        "impact_portable_text": {
                          "type": "string",
                          "description": "Impact statement in portable text format"
                        },
                        "start_after": {
                          "type": "string",
                          "description": "The earliest time the update will be automatically applied"
                        },
                        "start_at": {
                          "type": "string",
                          "description": "The time when the update will be automatically applied"
                        }
                      }
                    }
                  }
                },
                "required": ["dow", "time", "updates"]
              },
              "metadata": {
                "type": "object",
                "description": "Service type specific metadata",
                "properties": {}
              },
              "node_count": {
                "type": "integer",
                "description": "Number of service nodes in the active plan"
              },
              "node_cpu_count": {
                "type": "integer",
                "description": "Number of CPUs for each node"
              },
              "node_memory_mb": {
                "type": "number",
                "description": "Megabytes of memory for each node"
              },
              "node_states": {
                "type": "array",
                "description": "State of individual service nodes",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the service node"
                    },
                    "progress_updates": {
                      "type": "array",
                      "description": "Extra information regarding the progress for current state",
                      "items": {
                        "type": "object",
                        "properties": {
                          "completed": {
                            "type": "boolean",
                            "description": "Indicates whether this phase has been completed or not"
                          },
                          "current": {
                            "type": "integer",
                            "description": "Current progress for this phase. May be missing or null."
                          },
                          "max": {
                            "type": "integer",
                            "description": "Maximum progress value for this phase. May be missing or null. May change."
                          },
                          "min": {
                            "type": "integer",
                            "description": "Minimum progress value for this phase. May be missing or null."
                          },
                          "phase": {
                            "type": "string",
                            "description": "Key identifying this phase",
                            "enum": [
                              "prepare",
                              "basebackup",
                              "stream",
                              "finalize"
                            ]
                          },
                          "unit": {
                            "type": "string",
                            "description": "Unit for current/min/max values. New units may be added. If null should be treated as generic unit",
                            "enum": [
                              "binlogs",
                              "bytes_compressed",
                              "bytes_uncompressed",
                              "wal_lsn"
                            ]
                          }
                        },
                        "required": ["completed", "phase"]
                      }
                    },
                    "role": {
                      "type": "string",
                      "description": "Role of this node. Only returned for a subset of service types",
                      "enum": ["master", "standby", "read-replica"]
                    },
                    "shard": {
                      "type": "object",
                      "description": "Shard of this node. Only returned for a subset of service types",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the shard."
                        },
                        "position": {
                          "type": "integer",
                          "description": "Position of this shard within the service"
                        }
                      }
                    },
                    "state": {
                      "type": "string",
                      "description": "Current state of the service node",
                      "enum": [
                        "leaving",
                        "running",
                        "setting_up_vm",
                        "syncing_data",
                        "timing_out",
                        "unknown"
                      ]
                    }
                  },
                  "required": ["name", "state"]
                }
              },
              "plan": {
                "type": "string",
                "description": "Subscription plan",
                "maxLength": 128
              },
              "project_vpc_id": {
                "type": "string",
                "description": "Project VPC ID",
                "minLength": 36,
                "maxLength": 36
              },
              "schema_registry_acl": {
                "type": "array",
                "description": "List of Schema Registry ACL entries",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID",
                      "maxLength": 40
                    },
                    "permission": {
                      "type": "string",
                      "description": "ACL entry for Schema Registry",
                      "enum": ["schema_registry_read", "schema_registry_write"]
                    },
                    "resource": {
                      "type": "string",
                      "description": "Schema Registry ACL entry resource name pattern",
                      "minLength": 1,
                      "maxLength": 249
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": ["permission", "resource", "username"]
                }
              },
              "server_group": {
                "type": "object",
                "description": "Service IaaS server group",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Flag set if server group is in use for the service"
                  },
                  "type": {
                    "type": "string",
                    "description": "IaaS server group type"
                  }
                }
              },
              "service_integrations": {
                "type": "array",
                "description": "Integrations with other services",
                "items": {
                  "type": "object",
                  "properties": {
                    "active": {
                      "type": "boolean",
                      "description": "True when integration is active"
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of the integration"
                    },
                    "dest_endpoint": {
                      "type": "string",
                      "description": "Destination endpoint name"
                    },
                    "dest_endpoint_id": {
                      "type": "string",
                      "description": "Destination endpoint id"
                    },
                    "dest_project": {
                      "type": "string",
                      "description": "Project name",
                      "maxLength": 63
                    },
                    "dest_service": {
                      "type": "string",
                      "description": "Destination service name"
                    },
                    "dest_service_type": {
                      "type": "string",
                      "description": "Service type code",
                      "maxLength": 64
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "True when integration is enabled"
                    },
                    "integration_status": {
                      "type": "object",
                      "description": "Integration status",
                      "properties": {
                        "state": {
                          "type": "object",
                          "description": "Service integration state",
                          "properties": {
                            "errors": {
                              "type": "array",
                              "description": "Errors",
                              "items": { "type": "string" }
                            },
                            "likely_error_cause": {
                              "type": "string",
                              "description": "Most likely cause of the errors",
                              "enum": [
                                "null",
                                "destination",
                                "integration",
                                "source",
                                "unknown"
                              ]
                            },
                            "nodes": {
                              "type": "object",
                              "description": "Nodes",
                              "properties": {}
                            },
                            "status": {
                              "type": "string",
                              "description": "Service integration status",
                              "enum": [
                                "failed",
                                "inactive",
                                "running",
                                "starting",
                                "unknown"
                              ]
                            }
                          },
                          "required": ["errors", "nodes", "status"]
                        },
                        "status_user_desc": {
                          "type": "string",
                          "description": "Integration status description"
                        }
                      },
                      "required": ["state", "status_user_desc"]
                    },
                    "integration_type": {
                      "type": "string",
                      "description": "Type of the integration"
                    },
                    "service_integration_id": {
                      "type": "string",
                      "description": "Integration ID"
                    },
                    "source_endpoint": {
                      "type": "string",
                      "description": "Source endpoint name"
                    },
                    "source_endpoint_id": {
                      "type": "string",
                      "description": "Source endpoint ID"
                    },
                    "source_project": {
                      "type": "string",
                      "description": "Project name",
                      "maxLength": 63
                    },
                    "source_service": {
                      "type": "string",
                      "description": "Source service name"
                    },
                    "source_service_type": {
                      "type": "string",
                      "description": "Service type code",
                      "maxLength": 64
                    },
                    "user_config": {
                      "type": "object",
                      "description": "Service integration settings",
                      "properties": {}
                    }
                  },
                  "required": [
                    "active",
                    "description",
                    "dest_project",
                    "dest_service_type",
                    "enabled",
                    "integration_type",
                    "service_integration_id",
                    "source_project",
                    "source_service",
                    "source_service_type"
                  ]
                }
              },
              "service_name": {
                "type": "string",
                "description": "Service name",
                "minLength": 1,
                "maxLength": 64
              },
              "service_notifications": {
                "type": "array",
                "description": "Service notifications",
                "items": {
                  "type": "object",
                  "properties": {
                    "level": {
                      "type": "string",
                      "description": "Notification level",
                      "enum": ["notice", "warning"]
                    },
                    "message": {
                      "type": "string",
                      "description": "Human notification message",
                      "maxLength": 1024
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Notification metadata",
                      "properties": {
                        "end_of_life_help_article_url": {
                          "type": "string",
                          "description": "Link to the help article"
                        },
                        "end_of_life_policy_url": {
                          "type": "string",
                          "description": "Link to the help article"
                        },
                        "service_end_of_life_time": {
                          "type": "string",
                          "description": "Timestamp in ISO 8601 format, always in UTC",
                          "maxLength": 36
                        },
                        "upgrade_to_service_type": {
                          "type": "string",
                          "description": "If the customer takes no action, the service is updated to this service type when end of life is reached on the Aiven platform. If it is the same as the service type, the platform only upgrades the version.",
                          "maxLength": 64
                        },
                        "upgrade_to_version": {
                          "type": "string",
                          "description": "The version to which the service will be updated at the end of life on the Aiven platform if the user does not take any action",
                          "maxLength": 32
                        }
                      }
                    },
                    "type": {
                      "type": "string",
                      "description": "Notification type",
                      "enum": [
                        "service_end_of_life",
                        "service_powered_off_removal"
                      ]
                    }
                  },
                  "required": ["level", "message", "metadata", "type"]
                }
              },
              "service_type": {
                "type": "string",
                "description": "Service type code",
                "maxLength": 64
              },
              "service_type_description": {
                "type": "string",
                "description": "Single line description of the service"
              },
              "service_uri": {
                "type": "string",
                "description": "URI for connecting to the service (may be null)"
              },
              "service_uri_params": {
                "type": "object",
                "description": "service_uri parameterized into key-value pairs",
                "properties": {}
              },
              "state": {
                "type": "string",
                "description": "State of the service",
                "enum": ["POWEROFF", "REBALANCING", "REBUILDING", "RUNNING"]
              },
              "tags": {
                "type": "object",
                "description": "Set of resource tags",
                "properties": {}
              },
              "tech_emails": {
                "type": "array",
                "description": "List of service technical email addresses",
                "maxItems": 10,
                "items": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": ["email"]
                }
              },
              "termination_protection": {
                "type": "boolean",
                "description": "Service is protected against termination and powering off"
              },
              "topics": {
                "type": "array",
                "description": "Kafka topics. DEPRECATED: Use /project/$project/service/$service/topic instead",
                "items": {
                  "type": "object",
                  "properties": {
                    "cleanup_policy": {
                      "type": "string",
                      "description": "cleanup.policy",
                      "maxLength": 64
                    },
                    "min_insync_replicas": {
                      "type": "integer",
                      "description": "min.insync.replicas",
                      "minimum": 1
                    },
                    "partitions": {
                      "type": "integer",
                      "description": "Number of partitions",
                      "minimum": 1,
                      "maximum": 1000000
                    },
                    "replication": {
                      "type": "integer",
                      "description": "Number of replicas",
                      "minimum": 1
                    },
                    "retention_bytes": {
                      "type": "integer",
                      "description": "retention.bytes"
                    },
                    "retention_hours": {
                      "type": "integer",
                      "description": "Retention period (hours)",
                      "maximum": 2562047788015
                    },
                    "state": {
                      "type": "string",
                      "description": "Topic state",
                      "enum": ["ACTIVE", "CONFIGURING", "DELETING"]
                    },
                    "topic_name": {
                      "type": "string",
                      "description": "Topic name",
                      "minLength": 1,
                      "maxLength": 249
                    }
                  },
                  "required": [
                    "cleanup_policy",
                    "min_insync_replicas",
                    "partitions",
                    "replication",
                    "retention_bytes",
                    "retention_hours",
                    "topic_name"
                  ]
                }
              },
              "update_time": {
                "type": "string",
                "description": "Service last update timestamp (ISO 8601)",
                "maxLength": 36
              },
              "user_config": {
                "type": "object",
                "description": "Service type-specific settings",
                "properties": {}
              },
              "users": {
                "type": "array",
                "description": "List of service users",
                "items": {
                  "type": "object",
                  "properties": {
                    "access_cert": {
                      "type": "string",
                      "description": "Access certificate for TLS client authentication"
                    },
                    "access_cert_not_valid_after_time": {
                      "type": "string",
                      "description": "Validity end time (ISO8601) for the current access certificate"
                    },
                    "access_control": {
                      "type": "object",
                      "description": "Service specific access controls for user\n\nService type specific access control rules for user. Currently only used for configuring user ACLs for Redis version 6 and above.",
                      "properties": {
                        "dragonfly_acl_categories": {
                          "type": "array",
                          "description": "Command category rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "dragonfly_acl_commands": {
                          "type": "array",
                          "description": "Rules for individual commands",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "dragonfly_acl_keys": {
                          "type": "array",
                          "description": "Key access rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "m3_group": {
                          "type": "string",
                          "description": "M3 access group to associate users with",
                          "maxLength": 16
                        },
                        "pg_allow_replication": {
                          "type": "boolean",
                          "description": "Enable REPLICATION role option"
                        },
                        "redis_acl_categories": {
                          "type": "array",
                          "description": "Command category rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "redis_acl_channels": {
                          "type": "array",
                          "description": "Permitted pub/sub channel patterns\n\nGlob-style patterns defining which pub/sub channels can be accessed. If array is not defined, the default policy is used (allchannels).",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "redis_acl_commands": {
                          "type": "array",
                          "description": "Rules for individual commands",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "redis_acl_keys": {
                          "type": "array",
                          "description": "Key access rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "valkey_acl_categories": {
                          "type": "array",
                          "description": "Command category rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "valkey_acl_channels": {
                          "type": "array",
                          "description": "Permitted pub/sub channel patterns\n\nGlob-style patterns defining which pub/sub channels can be accessed. If array is not defined, the default policy is used (allchannels).",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "valkey_acl_commands": {
                          "type": "array",
                          "description": "Rules for individual commands",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "valkey_acl_keys": {
                          "type": "array",
                          "description": "Key access rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        }
                      }
                    },
                    "access_key": {
                      "type": "string",
                      "description": "Access key for TLS client authentication"
                    },
                    "authentication": {
                      "type": "string",
                      "description": "Authentication details",
                      "enum": [
                        "null",
                        "caching_sha2_password",
                        "mysql_native_password"
                      ]
                    },
                    "expiring_cert_not_valid_after_time": {
                      "type": "string",
                      "description": "Validity end time (ISO8601) for the expiring access certificate"
                    },
                    "password": {
                      "type": "string",
                      "description": "Account password. A null value indicates a user overridden password."
                    },
                    "type": { "type": "string", "description": "Account type" },
                    "username": {
                      "type": "string",
                      "description": "Account username"
                    }
                  },
                  "required": ["password", "type", "username"]
                }
              }
            },
            "required": [
              "cloud_name",
              "create_time",
              "group_list",
              "plan",
              "project_vpc_id",
              "service_integrations",
              "service_name",
              "service_type",
              "service_uri",
              "state",
              "termination_protection",
              "update_time",
              "user_config"
            ]
          }
        },
        "required": ["service"]
      },
      "ServiceTaskCreateRequestBody": {
        "type": "object",
        "description": "ServiceTaskCreateRequestBody",
        "properties": {
          "create_user_backup": {
            "type": "object",
            "description": "Payload to be used with create_user_backup",
            "properties": {
              "backup_name": {
                "type": "string",
                "description": "The output file name.",
                "maxLength": 256
              }
            },
            "required": ["backup_name"]
          },
          "dataset_import": {
            "type": "object",
            "description": "Payload to be used with dataset_import",
            "properties": {
              "dataset_name": {
                "type": "string",
                "description": "Name of the dataset to import to PostgreSQL database. Used with dataset_import.",
                "enum": ["pagila"]
              }
            },
            "required": ["dataset_name"]
          },
          "migration_check": {
            "type": "object",
            "description": "Payload to be used with migration_check",
            "properties": {
              "ignore_dbs": {
                "type": "string",
                "description": "Comma-separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment)",
                "maxLength": 2048
              },
              "ignore_roles": {
                "type": "string",
                "description": "Comma-separated list of database roles, which should be ignored during migration (supported by PostgreSQL only at the moment)",
                "maxLength": 2048
              },
              "method": {
                "type": "string",
                "description": "The migration method to be used (currently supported only by Redis, Dragonfly, MySQL and PostgreSQL service types)",
                "enum": ["dump", "replication"]
              },
              "source_project_name": {
                "type": "string",
                "description": "Project name",
                "maxLength": 63
              },
              "source_service_name": {
                "type": "string",
                "description": "Service name",
                "minLength": 1,
                "maxLength": 64
              },
              "source_service_uri": {
                "type": "string",
                "description": "Service URI of the source MySQL or PostgreSQL database with admin credentials. Used with migration_check.",
                "maxLength": 512
              }
            }
          },
          "target_version": {
            "type": "string",
            "description": "Target version used with upgrade_check",
            "enum": ["13", "14", "15", "16", "17"]
          },
          "task_type": {
            "type": "string",
            "description": "Service task type",
            "enum": [
              "upgrade_check",
              "migration_check",
              "dataset_import",
              "create_user_backup"
            ]
          }
        },
        "required": ["task_type"]
      },
      "ServiceTaskCreateResponse": {
        "type": "object",
        "description": "ServiceTaskCreateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "task": {
            "type": "object",
            "description": "Task info",
            "properties": {
              "create_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              },
              "result": { "type": "string", "description": "Task result" },
              "result_codes": {
                "type": "array",
                "description": "List of result codes",
                "items": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Machine-readable key code, which represents the result of the task"
                    },
                    "dbname": {
                      "type": "string",
                      "description": "Database which related to the result code"
                    }
                  },
                  "required": ["code"]
                }
              },
              "success": { "type": "boolean", "description": "Task success" },
              "task_id": {
                "type": "string",
                "description": "Unique identifier for the task"
              },
              "task_type": { "type": "string", "description": "Task type" }
            },
            "required": [
              "create_time",
              "result",
              "success",
              "task_id",
              "task_type"
            ]
          }
        },
        "required": ["task"]
      },
      "ServiceTaskGetResponse": {
        "type": "object",
        "description": "ServiceTaskGetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "task": {
            "type": "object",
            "description": "Task info",
            "properties": {
              "create_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              },
              "result": { "type": "string", "description": "Task result" },
              "result_codes": {
                "type": "array",
                "description": "List of result codes",
                "items": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Machine-readable key code, which represents the result of the task"
                    },
                    "dbname": {
                      "type": "string",
                      "description": "Database which related to the result code"
                    }
                  },
                  "required": ["code"]
                }
              },
              "success": { "type": "boolean", "description": "Task success" },
              "task_id": {
                "type": "string",
                "description": "Unique identifier for the task"
              },
              "task_type": { "type": "string", "description": "Task type" }
            },
            "required": [
              "create_time",
              "result",
              "success",
              "task_id",
              "task_type"
            ]
          }
        },
        "required": ["task"]
      },
      "ServiceUpdateRequestBody": {
        "type": "object",
        "description": "ServiceUpdateRequestBody",
        "properties": {
          "cloud": {
            "type": "string",
            "description": "Target cloud",
            "maxLength": 256
          },
          "disk_space_mb": {
            "type": "integer",
            "description": "Megabytes of disk space for data storage",
            "minimum": 0
          },
          "group_name": {
            "type": "string",
            "description": "Service group name (DEPRECATED: do not use)",
            "maxLength": 256
          },
          "karapace": {
            "type": "boolean",
            "description": "Switch the service to use Karapace for schema registry and REST proxy"
          },
          "maintenance": {
            "type": "object",
            "description": "Automatic maintenance settings",
            "properties": {
              "dow": {
                "type": "string",
                "description": "Day of week for installing updates",
                "enum": [
                  "monday",
                  "tuesday",
                  "wednesday",
                  "thursday",
                  "friday",
                  "saturday",
                  "sunday"
                ]
              },
              "time": {
                "type": "string",
                "description": "Time for installing updates, UTC",
                "minLength": 8,
                "maxLength": 8
              }
            }
          },
          "plan": {
            "type": "string",
            "description": "Subscription plan",
            "maxLength": 128
          },
          "powered": {
            "type": "boolean",
            "description": "Power-on the service (true) or power-off (false)"
          },
          "project_vpc_id": {
            "type": "string",
            "description": "Project VPC ID",
            "minLength": 36,
            "maxLength": 36
          },
          "schema_registry_authz": {
            "type": "boolean",
            "description": "Enable or disable Schema Registry authorization"
          },
          "tech_emails": {
            "type": "array",
            "description": "List of service technical email addresses",
            "maxItems": 10,
            "items": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                }
              },
              "required": ["email"]
            }
          },
          "termination_protection": {
            "type": "boolean",
            "description": "Service is protected against termination and powering off"
          },
          "user_config": {
            "type": "object",
            "description": "Service type-specific settings",
            "properties": {}
          }
        }
      },
      "ServiceUpdateResponse": {
        "type": "object",
        "description": "ServiceUpdateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service": {
            "type": "object",
            "description": "Service information",
            "properties": {
              "acl": {
                "type": "array",
                "description": "List of Aiven ACL entries for Kafka service",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID",
                      "maxLength": 40
                    },
                    "permission": {
                      "type": "string",
                      "description": "Kafka permission",
                      "enum": ["admin", "read", "readwrite", "write"]
                    },
                    "topic": {
                      "type": "string",
                      "description": "Topic name pattern",
                      "minLength": 1,
                      "maxLength": 249
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": ["permission", "topic", "username"]
                }
              },
              "backups": {
                "type": "array",
                "description": "List of backups for the service",
                "items": {
                  "type": "object",
                  "properties": {
                    "additional_regions": {
                      "type": "array",
                      "description": "Additional backup regions, if available",
                      "items": {
                        "type": "object",
                        "properties": {
                          "cloud": {
                            "type": "string",
                            "description": "Target cloud",
                            "maxLength": 256
                          },
                          "pause_reason": {
                            "type": "string",
                            "description": "Reason for pausing the backup synchronization"
                          },
                          "paused": {
                            "type": "boolean",
                            "description": "Indicates additional backup synchronization is paused"
                          },
                          "region": {
                            "type": "string",
                            "description": "Cloud storage region name"
                          }
                        },
                        "required": ["cloud"]
                      }
                    },
                    "backup_name": {
                      "type": "string",
                      "description": "Internal name of this backup"
                    },
                    "backup_time": {
                      "type": "string",
                      "description": "Backup timestamp (ISO 8601)",
                      "maxLength": 36
                    },
                    "data_size": {
                      "type": "integer",
                      "description": "Backup's original size before compression"
                    },
                    "storage_location": {
                      "type": "string",
                      "description": "Location where this backup is stored"
                    },
                    "tiered_storage_data_size": {
                      "type": "integer",
                      "description": "The amount of tiered storage data in bytes referenced by this backup."
                    }
                  },
                  "required": ["backup_name", "backup_time", "data_size"]
                }
              },
              "cloud_description": {
                "type": "string",
                "description": "Cloud provider and location"
              },
              "cloud_name": {
                "type": "string",
                "description": "Target cloud",
                "maxLength": 256
              },
              "components": {
                "type": "array",
                "description": "Service component information objects",
                "items": {
                  "type": "object",
                  "properties": {
                    "component": {
                      "type": "string",
                      "description": "Service component name"
                    },
                    "host": {
                      "type": "string",
                      "description": "DNS name for connecting to the service component"
                    },
                    "kafka_authentication_method": {
                      "type": "string",
                      "description": "Kafka authentication method. This is a value specific to the 'kafka' service component",
                      "enum": ["certificate", "sasl"]
                    },
                    "kafka_ssl_ca": {
                      "type": "string",
                      "description": "Specifies if this port uses Project CA or Letsencrypt. If not specified, the default is using Project CA.This is a value specific to the 'kafka' service component.",
                      "enum": ["project_ca", "letsencrypt"]
                    },
                    "path": {
                      "type": "string",
                      "description": "Path component of the service URL (useful only if service component is HTTP or HTTPS endpoint)"
                    },
                    "port": {
                      "type": "integer",
                      "description": "Port number for connecting to the service component",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "privatelink_connection_id": {
                      "type": "string",
                      "description": "Privatelink connection ID"
                    },
                    "route": {
                      "type": "string",
                      "description": "Network access route",
                      "enum": ["dynamic", "public", "private", "privatelink"]
                    },
                    "ssl": {
                      "type": "boolean",
                      "description": "Whether the endpoint is encrypted or accepts plaintext. By default endpoints are always encrypted andthis property is only included for service components that may disable encryption."
                    },
                    "usage": {
                      "type": "string",
                      "description": "DNS usage name",
                      "enum": ["disaster_recovery", "primary", "replica"]
                    }
                  },
                  "required": ["component", "host", "port", "route", "usage"]
                }
              },
              "connection_info": {
                "type": "object",
                "description": "Service-specific connection information properties",
                "properties": {}
              },
              "connection_pools": {
                "type": "array",
                "description": "PostgreSQL PGBouncer connection pools",
                "items": {
                  "type": "object",
                  "properties": {
                    "connection_uri": {
                      "type": "string",
                      "description": "Connection URI for the DB pool"
                    },
                    "database": {
                      "type": "string",
                      "description": "Database name",
                      "maxLength": 63
                    },
                    "pool_mode": {
                      "type": "string",
                      "description": "PGBouncer pool mode",
                      "enum": ["session", "transaction", "statement"]
                    },
                    "pool_name": {
                      "type": "string",
                      "description": "Connection pool name",
                      "maxLength": 63
                    },
                    "pool_size": {
                      "type": "integer",
                      "description": "Size of PGBouncer's PostgreSQL side connection pool",
                      "minimum": 1,
                      "maximum": 10000
                    },
                    "username": {
                      "type": "string",
                      "description": "Pool username",
                      "maxLength": 64
                    }
                  },
                  "required": [
                    "connection_uri",
                    "database",
                    "pool_mode",
                    "pool_name",
                    "pool_size"
                  ]
                }
              },
              "create_time": {
                "type": "string",
                "description": "Service creation timestamp (ISO 8601)",
                "maxLength": 36
              },
              "databases": {
                "type": "array",
                "description": "List of service's user database names",
                "items": { "type": "string" }
              },
              "disk_space_mb": {
                "type": "integer",
                "description": "Megabytes of disk space for data storage",
                "minimum": 0
              },
              "features": {
                "type": "object",
                "description": "Feature flags",
                "properties": {}
              },
              "group_list": {
                "type": "array",
                "description": "List of service groups the service belongs to. This field is deprecated. It is always set to single element with value 'default'",
                "items": { "type": "string" }
              },
              "kafka_acl": {
                "type": "array",
                "description": "List of Kafka-native ACL entries",
                "items": {
                  "type": "object",
                  "properties": {
                    "host": {
                      "type": "string",
                      "description": "the host or * for all hosts",
                      "minLength": 0,
                      "maxLength": 256
                    },
                    "id": {
                      "type": "string",
                      "description": "ID",
                      "maxLength": 40
                    },
                    "operation": {
                      "type": "string",
                      "description": "Kafka ACL operation represents an operation which an ACL grants or denies permission to perform",
                      "enum": [
                        "All",
                        "Alter",
                        "AlterConfigs",
                        "ClusterAction",
                        "Create",
                        "CreateTokens",
                        "Delete",
                        "Describe",
                        "DescribeConfigs",
                        "DescribeTokens",
                        "IdempotentWrite",
                        "Read",
                        "Write"
                      ]
                    },
                    "pattern_type": {
                      "type": "string",
                      "description": "Kafka ACL pattern type of resource name",
                      "enum": ["LITERAL", "PREFIXED"]
                    },
                    "permission_type": {
                      "type": "string",
                      "description": "Kafka ACL permission type",
                      "enum": ["ALLOW", "DENY"]
                    },
                    "principal": {
                      "type": "string",
                      "description": "principal is in 'principalType:name' format",
                      "minLength": 0,
                      "maxLength": 256
                    },
                    "resource_name": {
                      "type": "string",
                      "description": "Resource pattern used to match specified resources",
                      "minLength": 0,
                      "maxLength": 256
                    },
                    "resource_type": {
                      "type": "string",
                      "description": "Kafka ACL resource type represents a type of resource which an ACL can be applied to",
                      "enum": [
                        "Cluster",
                        "DelegationToken",
                        "Group",
                        "Topic",
                        "TransactionalId",
                        "User"
                      ]
                    }
                  },
                  "required": [
                    "host",
                    "id",
                    "operation",
                    "pattern_type",
                    "permission_type",
                    "principal",
                    "resource_name",
                    "resource_type"
                  ]
                }
              },
              "maintenance": {
                "type": "object",
                "description": "Automatic maintenance settings",
                "properties": {
                  "dow": {
                    "type": "string",
                    "description": "Day of week for installing updates",
                    "enum": [
                      "monday",
                      "tuesday",
                      "wednesday",
                      "thursday",
                      "friday",
                      "saturday",
                      "sunday",
                      "never"
                    ]
                  },
                  "time": {
                    "type": "string",
                    "description": "Time for installing updates, UTC",
                    "minLength": 8,
                    "maxLength": 8
                  },
                  "updates": {
                    "type": "array",
                    "description": "List of updates waiting to be installed",
                    "items": {
                      "type": "object",
                      "properties": {
                        "deadline": {
                          "type": "string",
                          "description": "Deadline for installing the update"
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the update"
                        },
                        "documentation_link": {
                          "type": "string",
                          "description": "Optional link"
                        },
                        "impact": {
                          "type": "string",
                          "description": "Impact statement of the update"
                        },
                        "impact_portable_text": {
                          "type": "string",
                          "description": "Impact statement in portable text format"
                        },
                        "start_after": {
                          "type": "string",
                          "description": "The earliest time the update will be automatically applied"
                        },
                        "start_at": {
                          "type": "string",
                          "description": "The time when the update will be automatically applied"
                        }
                      }
                    }
                  }
                },
                "required": ["dow", "time", "updates"]
              },
              "metadata": {
                "type": "object",
                "description": "Service type specific metadata",
                "properties": {}
              },
              "node_count": {
                "type": "integer",
                "description": "Number of service nodes in the active plan"
              },
              "node_cpu_count": {
                "type": "integer",
                "description": "Number of CPUs for each node"
              },
              "node_memory_mb": {
                "type": "number",
                "description": "Megabytes of memory for each node"
              },
              "node_states": {
                "type": "array",
                "description": "State of individual service nodes",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the service node"
                    },
                    "progress_updates": {
                      "type": "array",
                      "description": "Extra information regarding the progress for current state",
                      "items": {
                        "type": "object",
                        "properties": {
                          "completed": {
                            "type": "boolean",
                            "description": "Indicates whether this phase has been completed or not"
                          },
                          "current": {
                            "type": "integer",
                            "description": "Current progress for this phase. May be missing or null."
                          },
                          "max": {
                            "type": "integer",
                            "description": "Maximum progress value for this phase. May be missing or null. May change."
                          },
                          "min": {
                            "type": "integer",
                            "description": "Minimum progress value for this phase. May be missing or null."
                          },
                          "phase": {
                            "type": "string",
                            "description": "Key identifying this phase",
                            "enum": [
                              "prepare",
                              "basebackup",
                              "stream",
                              "finalize"
                            ]
                          },
                          "unit": {
                            "type": "string",
                            "description": "Unit for current/min/max values. New units may be added. If null should be treated as generic unit",
                            "enum": [
                              "binlogs",
                              "bytes_compressed",
                              "bytes_uncompressed",
                              "wal_lsn"
                            ]
                          }
                        },
                        "required": ["completed", "phase"]
                      }
                    },
                    "role": {
                      "type": "string",
                      "description": "Role of this node. Only returned for a subset of service types",
                      "enum": ["master", "standby", "read-replica"]
                    },
                    "shard": {
                      "type": "object",
                      "description": "Shard of this node. Only returned for a subset of service types",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the shard."
                        },
                        "position": {
                          "type": "integer",
                          "description": "Position of this shard within the service"
                        }
                      }
                    },
                    "state": {
                      "type": "string",
                      "description": "Current state of the service node",
                      "enum": [
                        "leaving",
                        "running",
                        "setting_up_vm",
                        "syncing_data",
                        "timing_out",
                        "unknown"
                      ]
                    }
                  },
                  "required": ["name", "state"]
                }
              },
              "plan": {
                "type": "string",
                "description": "Subscription plan",
                "maxLength": 128
              },
              "project_vpc_id": {
                "type": "string",
                "description": "Project VPC ID",
                "minLength": 36,
                "maxLength": 36
              },
              "schema_registry_acl": {
                "type": "array",
                "description": "List of Schema Registry ACL entries",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID",
                      "maxLength": 40
                    },
                    "permission": {
                      "type": "string",
                      "description": "ACL entry for Schema Registry",
                      "enum": ["schema_registry_read", "schema_registry_write"]
                    },
                    "resource": {
                      "type": "string",
                      "description": "Schema Registry ACL entry resource name pattern",
                      "minLength": 1,
                      "maxLength": 249
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": ["permission", "resource", "username"]
                }
              },
              "server_group": {
                "type": "object",
                "description": "Service IaaS server group",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Flag set if server group is in use for the service"
                  },
                  "type": {
                    "type": "string",
                    "description": "IaaS server group type"
                  }
                }
              },
              "service_integrations": {
                "type": "array",
                "description": "Integrations with other services",
                "items": {
                  "type": "object",
                  "properties": {
                    "active": {
                      "type": "boolean",
                      "description": "True when integration is active"
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of the integration"
                    },
                    "dest_endpoint": {
                      "type": "string",
                      "description": "Destination endpoint name"
                    },
                    "dest_endpoint_id": {
                      "type": "string",
                      "description": "Destination endpoint id"
                    },
                    "dest_project": {
                      "type": "string",
                      "description": "Project name",
                      "maxLength": 63
                    },
                    "dest_service": {
                      "type": "string",
                      "description": "Destination service name"
                    },
                    "dest_service_type": {
                      "type": "string",
                      "description": "Service type code",
                      "maxLength": 64
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "True when integration is enabled"
                    },
                    "integration_status": {
                      "type": "object",
                      "description": "Integration status",
                      "properties": {
                        "state": {
                          "type": "object",
                          "description": "Service integration state",
                          "properties": {
                            "errors": {
                              "type": "array",
                              "description": "Errors",
                              "items": { "type": "string" }
                            },
                            "likely_error_cause": {
                              "type": "string",
                              "description": "Most likely cause of the errors",
                              "enum": [
                                "null",
                                "destination",
                                "integration",
                                "source",
                                "unknown"
                              ]
                            },
                            "nodes": {
                              "type": "object",
                              "description": "Nodes",
                              "properties": {}
                            },
                            "status": {
                              "type": "string",
                              "description": "Service integration status",
                              "enum": [
                                "failed",
                                "inactive",
                                "running",
                                "starting",
                                "unknown"
                              ]
                            }
                          },
                          "required": ["errors", "nodes", "status"]
                        },
                        "status_user_desc": {
                          "type": "string",
                          "description": "Integration status description"
                        }
                      },
                      "required": ["state", "status_user_desc"]
                    },
                    "integration_type": {
                      "type": "string",
                      "description": "Type of the integration"
                    },
                    "service_integration_id": {
                      "type": "string",
                      "description": "Integration ID"
                    },
                    "source_endpoint": {
                      "type": "string",
                      "description": "Source endpoint name"
                    },
                    "source_endpoint_id": {
                      "type": "string",
                      "description": "Source endpoint ID"
                    },
                    "source_project": {
                      "type": "string",
                      "description": "Project name",
                      "maxLength": 63
                    },
                    "source_service": {
                      "type": "string",
                      "description": "Source service name"
                    },
                    "source_service_type": {
                      "type": "string",
                      "description": "Service type code",
                      "maxLength": 64
                    },
                    "user_config": {
                      "type": "object",
                      "description": "Service integration settings",
                      "properties": {}
                    }
                  },
                  "required": [
                    "active",
                    "description",
                    "dest_project",
                    "dest_service_type",
                    "enabled",
                    "integration_type",
                    "service_integration_id",
                    "source_project",
                    "source_service",
                    "source_service_type"
                  ]
                }
              },
              "service_name": {
                "type": "string",
                "description": "Service name",
                "minLength": 1,
                "maxLength": 64
              },
              "service_notifications": {
                "type": "array",
                "description": "Service notifications",
                "items": {
                  "type": "object",
                  "properties": {
                    "level": {
                      "type": "string",
                      "description": "Notification level",
                      "enum": ["notice", "warning"]
                    },
                    "message": {
                      "type": "string",
                      "description": "Human notification message",
                      "maxLength": 1024
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Notification metadata",
                      "properties": {
                        "end_of_life_help_article_url": {
                          "type": "string",
                          "description": "Link to the help article"
                        },
                        "end_of_life_policy_url": {
                          "type": "string",
                          "description": "Link to the help article"
                        },
                        "service_end_of_life_time": {
                          "type": "string",
                          "description": "Timestamp in ISO 8601 format, always in UTC",
                          "maxLength": 36
                        },
                        "upgrade_to_service_type": {
                          "type": "string",
                          "description": "If the customer takes no action, the service is updated to this service type when end of life is reached on the Aiven platform. If it is the same as the service type, the platform only upgrades the version.",
                          "maxLength": 64
                        },
                        "upgrade_to_version": {
                          "type": "string",
                          "description": "The version to which the service will be updated at the end of life on the Aiven platform if the user does not take any action",
                          "maxLength": 32
                        }
                      }
                    },
                    "type": {
                      "type": "string",
                      "description": "Notification type",
                      "enum": [
                        "service_end_of_life",
                        "service_powered_off_removal"
                      ]
                    }
                  },
                  "required": ["level", "message", "metadata", "type"]
                }
              },
              "service_type": {
                "type": "string",
                "description": "Service type code",
                "maxLength": 64
              },
              "service_type_description": {
                "type": "string",
                "description": "Single line description of the service"
              },
              "service_uri": {
                "type": "string",
                "description": "URI for connecting to the service (may be null)"
              },
              "service_uri_params": {
                "type": "object",
                "description": "service_uri parameterized into key-value pairs",
                "properties": {}
              },
              "state": {
                "type": "string",
                "description": "State of the service",
                "enum": ["POWEROFF", "REBALANCING", "REBUILDING", "RUNNING"]
              },
              "tags": {
                "type": "object",
                "description": "Set of resource tags",
                "properties": {}
              },
              "tech_emails": {
                "type": "array",
                "description": "List of service technical email addresses",
                "maxItems": 10,
                "items": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": ["email"]
                }
              },
              "termination_protection": {
                "type": "boolean",
                "description": "Service is protected against termination and powering off"
              },
              "topics": {
                "type": "array",
                "description": "Kafka topics. DEPRECATED: Use /project/$project/service/$service/topic instead",
                "items": {
                  "type": "object",
                  "properties": {
                    "cleanup_policy": {
                      "type": "string",
                      "description": "cleanup.policy",
                      "maxLength": 64
                    },
                    "min_insync_replicas": {
                      "type": "integer",
                      "description": "min.insync.replicas",
                      "minimum": 1
                    },
                    "partitions": {
                      "type": "integer",
                      "description": "Number of partitions",
                      "minimum": 1,
                      "maximum": 1000000
                    },
                    "replication": {
                      "type": "integer",
                      "description": "Number of replicas",
                      "minimum": 1
                    },
                    "retention_bytes": {
                      "type": "integer",
                      "description": "retention.bytes"
                    },
                    "retention_hours": {
                      "type": "integer",
                      "description": "Retention period (hours)",
                      "maximum": 2562047788015
                    },
                    "state": {
                      "type": "string",
                      "description": "Topic state",
                      "enum": ["ACTIVE", "CONFIGURING", "DELETING"]
                    },
                    "topic_name": {
                      "type": "string",
                      "description": "Topic name",
                      "minLength": 1,
                      "maxLength": 249
                    }
                  },
                  "required": [
                    "cleanup_policy",
                    "min_insync_replicas",
                    "partitions",
                    "replication",
                    "retention_bytes",
                    "retention_hours",
                    "topic_name"
                  ]
                }
              },
              "update_time": {
                "type": "string",
                "description": "Service last update timestamp (ISO 8601)",
                "maxLength": 36
              },
              "user_config": {
                "type": "object",
                "description": "Service type-specific settings",
                "properties": {}
              },
              "users": {
                "type": "array",
                "description": "List of service users",
                "items": {
                  "type": "object",
                  "properties": {
                    "access_cert": {
                      "type": "string",
                      "description": "Access certificate for TLS client authentication"
                    },
                    "access_cert_not_valid_after_time": {
                      "type": "string",
                      "description": "Validity end time (ISO8601) for the current access certificate"
                    },
                    "access_control": {
                      "type": "object",
                      "description": "Service specific access controls for user\n\nService type specific access control rules for user. Currently only used for configuring user ACLs for Redis version 6 and above.",
                      "properties": {
                        "dragonfly_acl_categories": {
                          "type": "array",
                          "description": "Command category rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "dragonfly_acl_commands": {
                          "type": "array",
                          "description": "Rules for individual commands",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "dragonfly_acl_keys": {
                          "type": "array",
                          "description": "Key access rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "m3_group": {
                          "type": "string",
                          "description": "M3 access group to associate users with",
                          "maxLength": 16
                        },
                        "pg_allow_replication": {
                          "type": "boolean",
                          "description": "Enable REPLICATION role option"
                        },
                        "redis_acl_categories": {
                          "type": "array",
                          "description": "Command category rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "redis_acl_channels": {
                          "type": "array",
                          "description": "Permitted pub/sub channel patterns\n\nGlob-style patterns defining which pub/sub channels can be accessed. If array is not defined, the default policy is used (allchannels).",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "redis_acl_commands": {
                          "type": "array",
                          "description": "Rules for individual commands",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "redis_acl_keys": {
                          "type": "array",
                          "description": "Key access rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "valkey_acl_categories": {
                          "type": "array",
                          "description": "Command category rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "valkey_acl_channels": {
                          "type": "array",
                          "description": "Permitted pub/sub channel patterns\n\nGlob-style patterns defining which pub/sub channels can be accessed. If array is not defined, the default policy is used (allchannels).",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "valkey_acl_commands": {
                          "type": "array",
                          "description": "Rules for individual commands",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "valkey_acl_keys": {
                          "type": "array",
                          "description": "Key access rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        }
                      }
                    },
                    "access_key": {
                      "type": "string",
                      "description": "Access key for TLS client authentication"
                    },
                    "authentication": {
                      "type": "string",
                      "description": "Authentication details",
                      "enum": [
                        "null",
                        "caching_sha2_password",
                        "mysql_native_password"
                      ]
                    },
                    "expiring_cert_not_valid_after_time": {
                      "type": "string",
                      "description": "Validity end time (ISO8601) for the expiring access certificate"
                    },
                    "password": {
                      "type": "string",
                      "description": "Account password. A null value indicates a user overridden password."
                    },
                    "type": { "type": "string", "description": "Account type" },
                    "username": {
                      "type": "string",
                      "description": "Account username"
                    }
                  },
                  "required": ["password", "type", "username"]
                }
              }
            },
            "required": [
              "cloud_name",
              "create_time",
              "group_list",
              "plan",
              "project_vpc_id",
              "service_integrations",
              "service_name",
              "service_type",
              "service_uri",
              "state",
              "termination_protection",
              "update_time",
              "user_config"
            ]
          }
        },
        "required": ["service"]
      },
      "ServiceUserCreateRequestBody": {
        "type": "object",
        "description": "ServiceUserCreateRequestBody",
        "properties": {
          "access_control": {
            "type": "object",
            "description": "Service specific access controls for user\n\nService type specific access control rules for user. Currently only used for configuring user ACLs for Redis version 6 and above.",
            "properties": {
              "dragonfly_acl_categories": {
                "type": "array",
                "description": "Command category rules",
                "maxItems": 256,
                "items": { "type": "string" }
              },
              "dragonfly_acl_commands": {
                "type": "array",
                "description": "Rules for individual commands",
                "maxItems": 256,
                "items": { "type": "string" }
              },
              "dragonfly_acl_keys": {
                "type": "array",
                "description": "Key access rules",
                "maxItems": 256,
                "items": { "type": "string" }
              },
              "m3_group": {
                "type": "string",
                "description": "M3 access group to associate users with",
                "maxLength": 16
              },
              "pg_allow_replication": {
                "type": "boolean",
                "description": "Enable REPLICATION role option"
              },
              "redis_acl_categories": {
                "type": "array",
                "description": "Command category rules",
                "maxItems": 256,
                "items": { "type": "string" }
              },
              "redis_acl_channels": {
                "type": "array",
                "description": "Permitted pub/sub channel patterns\n\nGlob-style patterns defining which pub/sub channels can be accessed. If array is not defined, the default policy is used (allchannels).",
                "maxItems": 256,
                "items": { "type": "string" }
              },
              "redis_acl_commands": {
                "type": "array",
                "description": "Rules for individual commands",
                "maxItems": 256,
                "items": { "type": "string" }
              },
              "redis_acl_keys": {
                "type": "array",
                "description": "Key access rules",
                "maxItems": 256,
                "items": { "type": "string" }
              },
              "valkey_acl_categories": {
                "type": "array",
                "description": "Command category rules",
                "maxItems": 256,
                "items": { "type": "string" }
              },
              "valkey_acl_channels": {
                "type": "array",
                "description": "Permitted pub/sub channel patterns\n\nGlob-style patterns defining which pub/sub channels can be accessed. If array is not defined, the default policy is used (allchannels).",
                "maxItems": 256,
                "items": { "type": "string" }
              },
              "valkey_acl_commands": {
                "type": "array",
                "description": "Rules for individual commands",
                "maxItems": 256,
                "items": { "type": "string" }
              },
              "valkey_acl_keys": {
                "type": "array",
                "description": "Key access rules",
                "maxItems": 256,
                "items": { "type": "string" }
              }
            }
          },
          "authentication": {
            "type": "string",
            "description": "Authentication details",
            "enum": ["null", "caching_sha2_password", "mysql_native_password"]
          },
          "username": {
            "type": "string",
            "description": "Service username",
            "maxLength": 64
          }
        },
        "required": ["username"]
      },
      "ServiceUserCreateResponse": {
        "type": "object",
        "description": "ServiceUserCreateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "user": {
            "type": "object",
            "description": "Service user account",
            "properties": {
              "access_cert": {
                "type": "string",
                "description": "Access certificate for TLS client authentication"
              },
              "access_cert_not_valid_after_time": {
                "type": "string",
                "description": "Validity end time (ISO8601) for the current access certificate"
              },
              "access_control": {
                "type": "object",
                "description": "Service specific access controls for user\n\nService type specific access control rules for user. Currently only used for configuring user ACLs for Redis version 6 and above.",
                "properties": {
                  "dragonfly_acl_categories": {
                    "type": "array",
                    "description": "Command category rules",
                    "maxItems": 256,
                    "items": { "type": "string" }
                  },
                  "dragonfly_acl_commands": {
                    "type": "array",
                    "description": "Rules for individual commands",
                    "maxItems": 256,
                    "items": { "type": "string" }
                  },
                  "dragonfly_acl_keys": {
                    "type": "array",
                    "description": "Key access rules",
                    "maxItems": 256,
                    "items": { "type": "string" }
                  },
                  "m3_group": {
                    "type": "string",
                    "description": "M3 access group to associate users with",
                    "maxLength": 16
                  },
                  "pg_allow_replication": {
                    "type": "boolean",
                    "description": "Enable REPLICATION role option"
                  },
                  "redis_acl_categories": {
                    "type": "array",
                    "description": "Command category rules",
                    "maxItems": 256,
                    "items": { "type": "string" }
                  },
                  "redis_acl_channels": {
                    "type": "array",
                    "description": "Permitted pub/sub channel patterns\n\nGlob-style patterns defining which pub/sub channels can be accessed. If array is not defined, the default policy is used (allchannels).",
                    "maxItems": 256,
                    "items": { "type": "string" }
                  },
                  "redis_acl_commands": {
                    "type": "array",
                    "description": "Rules for individual commands",
                    "maxItems": 256,
                    "items": { "type": "string" }
                  },
                  "redis_acl_keys": {
                    "type": "array",
                    "description": "Key access rules",
                    "maxItems": 256,
                    "items": { "type": "string" }
                  },
                  "valkey_acl_categories": {
                    "type": "array",
                    "description": "Command category rules",
                    "maxItems": 256,
                    "items": { "type": "string" }
                  },
                  "valkey_acl_channels": {
                    "type": "array",
                    "description": "Permitted pub/sub channel patterns\n\nGlob-style patterns defining which pub/sub channels can be accessed. If array is not defined, the default policy is used (allchannels).",
                    "maxItems": 256,
                    "items": { "type": "string" }
                  },
                  "valkey_acl_commands": {
                    "type": "array",
                    "description": "Rules for individual commands",
                    "maxItems": 256,
                    "items": { "type": "string" }
                  },
                  "valkey_acl_keys": {
                    "type": "array",
                    "description": "Key access rules",
                    "maxItems": 256,
                    "items": { "type": "string" }
                  }
                }
              },
              "access_key": {
                "type": "string",
                "description": "Access key for TLS client authentication"
              },
              "authentication": {
                "type": "string",
                "description": "Authentication details",
                "enum": [
                  "null",
                  "caching_sha2_password",
                  "mysql_native_password"
                ]
              },
              "expiring_cert_not_valid_after_time": {
                "type": "string",
                "description": "Validity end time (ISO8601) for the expiring access certificate"
              },
              "password": {
                "type": "string",
                "description": "Account password. A null value indicates a user overridden password."
              },
              "type": { "type": "string", "description": "Account type" },
              "username": {
                "type": "string",
                "description": "Account username"
              }
            },
            "required": ["password", "type", "username"]
          }
        },
        "required": ["user"]
      },
      "ServiceUserCredentialsModifyRequestBody": {
        "type": "object",
        "description": "ServiceUserCredentialsModifyRequestBody",
        "properties": {
          "access_control": {
            "type": "object",
            "description": "Service specific access controls for user\n\nService type specific access control rules for user. Currently only used for configuring user ACLs for Redis version 6 and above.",
            "properties": {
              "dragonfly_acl_categories": {
                "type": "array",
                "description": "Command category rules",
                "maxItems": 256,
                "items": { "type": "string" }
              },
              "dragonfly_acl_commands": {
                "type": "array",
                "description": "Rules for individual commands",
                "maxItems": 256,
                "items": { "type": "string" }
              },
              "dragonfly_acl_keys": {
                "type": "array",
                "description": "Key access rules",
                "maxItems": 256,
                "items": { "type": "string" }
              },
              "m3_group": {
                "type": "string",
                "description": "M3 access group to associate users with",
                "maxLength": 16
              },
              "pg_allow_replication": {
                "type": "boolean",
                "description": "Enable REPLICATION role option"
              },
              "redis_acl_categories": {
                "type": "array",
                "description": "Command category rules",
                "maxItems": 256,
                "items": { "type": "string" }
              },
              "redis_acl_channels": {
                "type": "array",
                "description": "Permitted pub/sub channel patterns\n\nGlob-style patterns defining which pub/sub channels can be accessed. If array is not defined, the default policy is used (allchannels).",
                "maxItems": 256,
                "items": { "type": "string" }
              },
              "redis_acl_commands": {
                "type": "array",
                "description": "Rules for individual commands",
                "maxItems": 256,
                "items": { "type": "string" }
              },
              "redis_acl_keys": {
                "type": "array",
                "description": "Key access rules",
                "maxItems": 256,
                "items": { "type": "string" }
              },
              "valkey_acl_categories": {
                "type": "array",
                "description": "Command category rules",
                "maxItems": 256,
                "items": { "type": "string" }
              },
              "valkey_acl_channels": {
                "type": "array",
                "description": "Permitted pub/sub channel patterns\n\nGlob-style patterns defining which pub/sub channels can be accessed. If array is not defined, the default policy is used (allchannels).",
                "maxItems": 256,
                "items": { "type": "string" }
              },
              "valkey_acl_commands": {
                "type": "array",
                "description": "Rules for individual commands",
                "maxItems": 256,
                "items": { "type": "string" }
              },
              "valkey_acl_keys": {
                "type": "array",
                "description": "Key access rules",
                "maxItems": 256,
                "items": { "type": "string" }
              }
            }
          },
          "authentication": {
            "type": "string",
            "description": "Authentication details",
            "enum": ["null", "caching_sha2_password", "mysql_native_password"]
          },
          "new_password": {
            "type": "string",
            "description": "New password",
            "minLength": 8,
            "maxLength": 256
          },
          "operation": {
            "type": "string",
            "description": "Operation type",
            "enum": [
              "acknowledge-renewal",
              "reset-credentials",
              "set-access-control"
            ]
          }
        },
        "required": ["operation"]
      },
      "ServiceUserCredentialsModifyResponse": {
        "type": "object",
        "description": "ServiceUserCredentialsModifyResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service": {
            "type": "object",
            "description": "Service information",
            "properties": {
              "acl": {
                "type": "array",
                "description": "List of Aiven ACL entries for Kafka service",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID",
                      "maxLength": 40
                    },
                    "permission": {
                      "type": "string",
                      "description": "Kafka permission",
                      "enum": ["admin", "read", "readwrite", "write"]
                    },
                    "topic": {
                      "type": "string",
                      "description": "Topic name pattern",
                      "minLength": 1,
                      "maxLength": 249
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": ["permission", "topic", "username"]
                }
              },
              "backups": {
                "type": "array",
                "description": "List of backups for the service",
                "items": {
                  "type": "object",
                  "properties": {
                    "additional_regions": {
                      "type": "array",
                      "description": "Additional backup regions, if available",
                      "items": {
                        "type": "object",
                        "properties": {
                          "cloud": {
                            "type": "string",
                            "description": "Target cloud",
                            "maxLength": 256
                          },
                          "pause_reason": {
                            "type": "string",
                            "description": "Reason for pausing the backup synchronization"
                          },
                          "paused": {
                            "type": "boolean",
                            "description": "Indicates additional backup synchronization is paused"
                          },
                          "region": {
                            "type": "string",
                            "description": "Cloud storage region name"
                          }
                        },
                        "required": ["cloud"]
                      }
                    },
                    "backup_name": {
                      "type": "string",
                      "description": "Internal name of this backup"
                    },
                    "backup_time": {
                      "type": "string",
                      "description": "Backup timestamp (ISO 8601)",
                      "maxLength": 36
                    },
                    "data_size": {
                      "type": "integer",
                      "description": "Backup's original size before compression"
                    },
                    "storage_location": {
                      "type": "string",
                      "description": "Location where this backup is stored"
                    },
                    "tiered_storage_data_size": {
                      "type": "integer",
                      "description": "The amount of tiered storage data in bytes referenced by this backup."
                    }
                  },
                  "required": ["backup_name", "backup_time", "data_size"]
                }
              },
              "cloud_description": {
                "type": "string",
                "description": "Cloud provider and location"
              },
              "cloud_name": {
                "type": "string",
                "description": "Target cloud",
                "maxLength": 256
              },
              "components": {
                "type": "array",
                "description": "Service component information objects",
                "items": {
                  "type": "object",
                  "properties": {
                    "component": {
                      "type": "string",
                      "description": "Service component name"
                    },
                    "host": {
                      "type": "string",
                      "description": "DNS name for connecting to the service component"
                    },
                    "kafka_authentication_method": {
                      "type": "string",
                      "description": "Kafka authentication method. This is a value specific to the 'kafka' service component",
                      "enum": ["certificate", "sasl"]
                    },
                    "kafka_ssl_ca": {
                      "type": "string",
                      "description": "Specifies if this port uses Project CA or Letsencrypt. If not specified, the default is using Project CA.This is a value specific to the 'kafka' service component.",
                      "enum": ["project_ca", "letsencrypt"]
                    },
                    "path": {
                      "type": "string",
                      "description": "Path component of the service URL (useful only if service component is HTTP or HTTPS endpoint)"
                    },
                    "port": {
                      "type": "integer",
                      "description": "Port number for connecting to the service component",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "privatelink_connection_id": {
                      "type": "string",
                      "description": "Privatelink connection ID"
                    },
                    "route": {
                      "type": "string",
                      "description": "Network access route",
                      "enum": ["dynamic", "public", "private", "privatelink"]
                    },
                    "ssl": {
                      "type": "boolean",
                      "description": "Whether the endpoint is encrypted or accepts plaintext. By default endpoints are always encrypted andthis property is only included for service components that may disable encryption."
                    },
                    "usage": {
                      "type": "string",
                      "description": "DNS usage name",
                      "enum": ["disaster_recovery", "primary", "replica"]
                    }
                  },
                  "required": ["component", "host", "port", "route", "usage"]
                }
              },
              "connection_info": {
                "type": "object",
                "description": "Service-specific connection information properties",
                "properties": {}
              },
              "connection_pools": {
                "type": "array",
                "description": "PostgreSQL PGBouncer connection pools",
                "items": {
                  "type": "object",
                  "properties": {
                    "connection_uri": {
                      "type": "string",
                      "description": "Connection URI for the DB pool"
                    },
                    "database": {
                      "type": "string",
                      "description": "Database name",
                      "maxLength": 63
                    },
                    "pool_mode": {
                      "type": "string",
                      "description": "PGBouncer pool mode",
                      "enum": ["session", "transaction", "statement"]
                    },
                    "pool_name": {
                      "type": "string",
                      "description": "Connection pool name",
                      "maxLength": 63
                    },
                    "pool_size": {
                      "type": "integer",
                      "description": "Size of PGBouncer's PostgreSQL side connection pool",
                      "minimum": 1,
                      "maximum": 10000
                    },
                    "username": {
                      "type": "string",
                      "description": "Pool username",
                      "maxLength": 64
                    }
                  },
                  "required": [
                    "connection_uri",
                    "database",
                    "pool_mode",
                    "pool_name",
                    "pool_size"
                  ]
                }
              },
              "create_time": {
                "type": "string",
                "description": "Service creation timestamp (ISO 8601)",
                "maxLength": 36
              },
              "databases": {
                "type": "array",
                "description": "List of service's user database names",
                "items": { "type": "string" }
              },
              "disk_space_mb": {
                "type": "integer",
                "description": "Megabytes of disk space for data storage",
                "minimum": 0
              },
              "features": {
                "type": "object",
                "description": "Feature flags",
                "properties": {}
              },
              "group_list": {
                "type": "array",
                "description": "List of service groups the service belongs to. This field is deprecated. It is always set to single element with value 'default'",
                "items": { "type": "string" }
              },
              "kafka_acl": {
                "type": "array",
                "description": "List of Kafka-native ACL entries",
                "items": {
                  "type": "object",
                  "properties": {
                    "host": {
                      "type": "string",
                      "description": "the host or * for all hosts",
                      "minLength": 0,
                      "maxLength": 256
                    },
                    "id": {
                      "type": "string",
                      "description": "ID",
                      "maxLength": 40
                    },
                    "operation": {
                      "type": "string",
                      "description": "Kafka ACL operation represents an operation which an ACL grants or denies permission to perform",
                      "enum": [
                        "All",
                        "Alter",
                        "AlterConfigs",
                        "ClusterAction",
                        "Create",
                        "CreateTokens",
                        "Delete",
                        "Describe",
                        "DescribeConfigs",
                        "DescribeTokens",
                        "IdempotentWrite",
                        "Read",
                        "Write"
                      ]
                    },
                    "pattern_type": {
                      "type": "string",
                      "description": "Kafka ACL pattern type of resource name",
                      "enum": ["LITERAL", "PREFIXED"]
                    },
                    "permission_type": {
                      "type": "string",
                      "description": "Kafka ACL permission type",
                      "enum": ["ALLOW", "DENY"]
                    },
                    "principal": {
                      "type": "string",
                      "description": "principal is in 'principalType:name' format",
                      "minLength": 0,
                      "maxLength": 256
                    },
                    "resource_name": {
                      "type": "string",
                      "description": "Resource pattern used to match specified resources",
                      "minLength": 0,
                      "maxLength": 256
                    },
                    "resource_type": {
                      "type": "string",
                      "description": "Kafka ACL resource type represents a type of resource which an ACL can be applied to",
                      "enum": [
                        "Cluster",
                        "DelegationToken",
                        "Group",
                        "Topic",
                        "TransactionalId",
                        "User"
                      ]
                    }
                  },
                  "required": [
                    "host",
                    "id",
                    "operation",
                    "pattern_type",
                    "permission_type",
                    "principal",
                    "resource_name",
                    "resource_type"
                  ]
                }
              },
              "maintenance": {
                "type": "object",
                "description": "Automatic maintenance settings",
                "properties": {
                  "dow": {
                    "type": "string",
                    "description": "Day of week for installing updates",
                    "enum": [
                      "monday",
                      "tuesday",
                      "wednesday",
                      "thursday",
                      "friday",
                      "saturday",
                      "sunday",
                      "never"
                    ]
                  },
                  "time": {
                    "type": "string",
                    "description": "Time for installing updates, UTC",
                    "minLength": 8,
                    "maxLength": 8
                  },
                  "updates": {
                    "type": "array",
                    "description": "List of updates waiting to be installed",
                    "items": {
                      "type": "object",
                      "properties": {
                        "deadline": {
                          "type": "string",
                          "description": "Deadline for installing the update"
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the update"
                        },
                        "documentation_link": {
                          "type": "string",
                          "description": "Optional link"
                        },
                        "impact": {
                          "type": "string",
                          "description": "Impact statement of the update"
                        },
                        "impact_portable_text": {
                          "type": "string",
                          "description": "Impact statement in portable text format"
                        },
                        "start_after": {
                          "type": "string",
                          "description": "The earliest time the update will be automatically applied"
                        },
                        "start_at": {
                          "type": "string",
                          "description": "The time when the update will be automatically applied"
                        }
                      }
                    }
                  }
                },
                "required": ["dow", "time", "updates"]
              },
              "metadata": {
                "type": "object",
                "description": "Service type specific metadata",
                "properties": {}
              },
              "node_count": {
                "type": "integer",
                "description": "Number of service nodes in the active plan"
              },
              "node_cpu_count": {
                "type": "integer",
                "description": "Number of CPUs for each node"
              },
              "node_memory_mb": {
                "type": "number",
                "description": "Megabytes of memory for each node"
              },
              "node_states": {
                "type": "array",
                "description": "State of individual service nodes",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the service node"
                    },
                    "progress_updates": {
                      "type": "array",
                      "description": "Extra information regarding the progress for current state",
                      "items": {
                        "type": "object",
                        "properties": {
                          "completed": {
                            "type": "boolean",
                            "description": "Indicates whether this phase has been completed or not"
                          },
                          "current": {
                            "type": "integer",
                            "description": "Current progress for this phase. May be missing or null."
                          },
                          "max": {
                            "type": "integer",
                            "description": "Maximum progress value for this phase. May be missing or null. May change."
                          },
                          "min": {
                            "type": "integer",
                            "description": "Minimum progress value for this phase. May be missing or null."
                          },
                          "phase": {
                            "type": "string",
                            "description": "Key identifying this phase",
                            "enum": [
                              "prepare",
                              "basebackup",
                              "stream",
                              "finalize"
                            ]
                          },
                          "unit": {
                            "type": "string",
                            "description": "Unit for current/min/max values. New units may be added. If null should be treated as generic unit",
                            "enum": [
                              "binlogs",
                              "bytes_compressed",
                              "bytes_uncompressed",
                              "wal_lsn"
                            ]
                          }
                        },
                        "required": ["completed", "phase"]
                      }
                    },
                    "role": {
                      "type": "string",
                      "description": "Role of this node. Only returned for a subset of service types",
                      "enum": ["master", "standby", "read-replica"]
                    },
                    "shard": {
                      "type": "object",
                      "description": "Shard of this node. Only returned for a subset of service types",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the shard."
                        },
                        "position": {
                          "type": "integer",
                          "description": "Position of this shard within the service"
                        }
                      }
                    },
                    "state": {
                      "type": "string",
                      "description": "Current state of the service node",
                      "enum": [
                        "leaving",
                        "running",
                        "setting_up_vm",
                        "syncing_data",
                        "timing_out",
                        "unknown"
                      ]
                    }
                  },
                  "required": ["name", "state"]
                }
              },
              "plan": {
                "type": "string",
                "description": "Subscription plan",
                "maxLength": 128
              },
              "project_vpc_id": {
                "type": "string",
                "description": "Project VPC ID",
                "minLength": 36,
                "maxLength": 36
              },
              "schema_registry_acl": {
                "type": "array",
                "description": "List of Schema Registry ACL entries",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID",
                      "maxLength": 40
                    },
                    "permission": {
                      "type": "string",
                      "description": "ACL entry for Schema Registry",
                      "enum": ["schema_registry_read", "schema_registry_write"]
                    },
                    "resource": {
                      "type": "string",
                      "description": "Schema Registry ACL entry resource name pattern",
                      "minLength": 1,
                      "maxLength": 249
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": ["permission", "resource", "username"]
                }
              },
              "server_group": {
                "type": "object",
                "description": "Service IaaS server group",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Flag set if server group is in use for the service"
                  },
                  "type": {
                    "type": "string",
                    "description": "IaaS server group type"
                  }
                }
              },
              "service_integrations": {
                "type": "array",
                "description": "Integrations with other services",
                "items": {
                  "type": "object",
                  "properties": {
                    "active": {
                      "type": "boolean",
                      "description": "True when integration is active"
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of the integration"
                    },
                    "dest_endpoint": {
                      "type": "string",
                      "description": "Destination endpoint name"
                    },
                    "dest_endpoint_id": {
                      "type": "string",
                      "description": "Destination endpoint id"
                    },
                    "dest_project": {
                      "type": "string",
                      "description": "Project name",
                      "maxLength": 63
                    },
                    "dest_service": {
                      "type": "string",
                      "description": "Destination service name"
                    },
                    "dest_service_type": {
                      "type": "string",
                      "description": "Service type code",
                      "maxLength": 64
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "True when integration is enabled"
                    },
                    "integration_status": {
                      "type": "object",
                      "description": "Integration status",
                      "properties": {
                        "state": {
                          "type": "object",
                          "description": "Service integration state",
                          "properties": {
                            "errors": {
                              "type": "array",
                              "description": "Errors",
                              "items": { "type": "string" }
                            },
                            "likely_error_cause": {
                              "type": "string",
                              "description": "Most likely cause of the errors",
                              "enum": [
                                "null",
                                "destination",
                                "integration",
                                "source",
                                "unknown"
                              ]
                            },
                            "nodes": {
                              "type": "object",
                              "description": "Nodes",
                              "properties": {}
                            },
                            "status": {
                              "type": "string",
                              "description": "Service integration status",
                              "enum": [
                                "failed",
                                "inactive",
                                "running",
                                "starting",
                                "unknown"
                              ]
                            }
                          },
                          "required": ["errors", "nodes", "status"]
                        },
                        "status_user_desc": {
                          "type": "string",
                          "description": "Integration status description"
                        }
                      },
                      "required": ["state", "status_user_desc"]
                    },
                    "integration_type": {
                      "type": "string",
                      "description": "Type of the integration"
                    },
                    "service_integration_id": {
                      "type": "string",
                      "description": "Integration ID"
                    },
                    "source_endpoint": {
                      "type": "string",
                      "description": "Source endpoint name"
                    },
                    "source_endpoint_id": {
                      "type": "string",
                      "description": "Source endpoint ID"
                    },
                    "source_project": {
                      "type": "string",
                      "description": "Project name",
                      "maxLength": 63
                    },
                    "source_service": {
                      "type": "string",
                      "description": "Source service name"
                    },
                    "source_service_type": {
                      "type": "string",
                      "description": "Service type code",
                      "maxLength": 64
                    },
                    "user_config": {
                      "type": "object",
                      "description": "Service integration settings",
                      "properties": {}
                    }
                  },
                  "required": [
                    "active",
                    "description",
                    "dest_project",
                    "dest_service_type",
                    "enabled",
                    "integration_type",
                    "service_integration_id",
                    "source_project",
                    "source_service",
                    "source_service_type"
                  ]
                }
              },
              "service_name": {
                "type": "string",
                "description": "Service name",
                "minLength": 1,
                "maxLength": 64
              },
              "service_notifications": {
                "type": "array",
                "description": "Service notifications",
                "items": {
                  "type": "object",
                  "properties": {
                    "level": {
                      "type": "string",
                      "description": "Notification level",
                      "enum": ["notice", "warning"]
                    },
                    "message": {
                      "type": "string",
                      "description": "Human notification message",
                      "maxLength": 1024
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Notification metadata",
                      "properties": {
                        "end_of_life_help_article_url": {
                          "type": "string",
                          "description": "Link to the help article"
                        },
                        "end_of_life_policy_url": {
                          "type": "string",
                          "description": "Link to the help article"
                        },
                        "service_end_of_life_time": {
                          "type": "string",
                          "description": "Timestamp in ISO 8601 format, always in UTC",
                          "maxLength": 36
                        },
                        "upgrade_to_service_type": {
                          "type": "string",
                          "description": "If the customer takes no action, the service is updated to this service type when end of life is reached on the Aiven platform. If it is the same as the service type, the platform only upgrades the version.",
                          "maxLength": 64
                        },
                        "upgrade_to_version": {
                          "type": "string",
                          "description": "The version to which the service will be updated at the end of life on the Aiven platform if the user does not take any action",
                          "maxLength": 32
                        }
                      }
                    },
                    "type": {
                      "type": "string",
                      "description": "Notification type",
                      "enum": [
                        "service_end_of_life",
                        "service_powered_off_removal"
                      ]
                    }
                  },
                  "required": ["level", "message", "metadata", "type"]
                }
              },
              "service_type": {
                "type": "string",
                "description": "Service type code",
                "maxLength": 64
              },
              "service_type_description": {
                "type": "string",
                "description": "Single line description of the service"
              },
              "service_uri": {
                "type": "string",
                "description": "URI for connecting to the service (may be null)"
              },
              "service_uri_params": {
                "type": "object",
                "description": "service_uri parameterized into key-value pairs",
                "properties": {}
              },
              "state": {
                "type": "string",
                "description": "State of the service",
                "enum": ["POWEROFF", "REBALANCING", "REBUILDING", "RUNNING"]
              },
              "tags": {
                "type": "object",
                "description": "Set of resource tags",
                "properties": {}
              },
              "tech_emails": {
                "type": "array",
                "description": "List of service technical email addresses",
                "maxItems": 10,
                "items": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": ["email"]
                }
              },
              "termination_protection": {
                "type": "boolean",
                "description": "Service is protected against termination and powering off"
              },
              "topics": {
                "type": "array",
                "description": "Kafka topics. DEPRECATED: Use /project/$project/service/$service/topic instead",
                "items": {
                  "type": "object",
                  "properties": {
                    "cleanup_policy": {
                      "type": "string",
                      "description": "cleanup.policy",
                      "maxLength": 64
                    },
                    "min_insync_replicas": {
                      "type": "integer",
                      "description": "min.insync.replicas",
                      "minimum": 1
                    },
                    "partitions": {
                      "type": "integer",
                      "description": "Number of partitions",
                      "minimum": 1,
                      "maximum": 1000000
                    },
                    "replication": {
                      "type": "integer",
                      "description": "Number of replicas",
                      "minimum": 1
                    },
                    "retention_bytes": {
                      "type": "integer",
                      "description": "retention.bytes"
                    },
                    "retention_hours": {
                      "type": "integer",
                      "description": "Retention period (hours)",
                      "maximum": 2562047788015
                    },
                    "state": {
                      "type": "string",
                      "description": "Topic state",
                      "enum": ["ACTIVE", "CONFIGURING", "DELETING"]
                    },
                    "topic_name": {
                      "type": "string",
                      "description": "Topic name",
                      "minLength": 1,
                      "maxLength": 249
                    }
                  },
                  "required": [
                    "cleanup_policy",
                    "min_insync_replicas",
                    "partitions",
                    "replication",
                    "retention_bytes",
                    "retention_hours",
                    "topic_name"
                  ]
                }
              },
              "update_time": {
                "type": "string",
                "description": "Service last update timestamp (ISO 8601)",
                "maxLength": 36
              },
              "user_config": {
                "type": "object",
                "description": "Service type-specific settings",
                "properties": {}
              },
              "users": {
                "type": "array",
                "description": "List of service users",
                "items": {
                  "type": "object",
                  "properties": {
                    "access_cert": {
                      "type": "string",
                      "description": "Access certificate for TLS client authentication"
                    },
                    "access_cert_not_valid_after_time": {
                      "type": "string",
                      "description": "Validity end time (ISO8601) for the current access certificate"
                    },
                    "access_control": {
                      "type": "object",
                      "description": "Service specific access controls for user\n\nService type specific access control rules for user. Currently only used for configuring user ACLs for Redis version 6 and above.",
                      "properties": {
                        "dragonfly_acl_categories": {
                          "type": "array",
                          "description": "Command category rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "dragonfly_acl_commands": {
                          "type": "array",
                          "description": "Rules for individual commands",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "dragonfly_acl_keys": {
                          "type": "array",
                          "description": "Key access rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "m3_group": {
                          "type": "string",
                          "description": "M3 access group to associate users with",
                          "maxLength": 16
                        },
                        "pg_allow_replication": {
                          "type": "boolean",
                          "description": "Enable REPLICATION role option"
                        },
                        "redis_acl_categories": {
                          "type": "array",
                          "description": "Command category rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "redis_acl_channels": {
                          "type": "array",
                          "description": "Permitted pub/sub channel patterns\n\nGlob-style patterns defining which pub/sub channels can be accessed. If array is not defined, the default policy is used (allchannels).",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "redis_acl_commands": {
                          "type": "array",
                          "description": "Rules for individual commands",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "redis_acl_keys": {
                          "type": "array",
                          "description": "Key access rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "valkey_acl_categories": {
                          "type": "array",
                          "description": "Command category rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "valkey_acl_channels": {
                          "type": "array",
                          "description": "Permitted pub/sub channel patterns\n\nGlob-style patterns defining which pub/sub channels can be accessed. If array is not defined, the default policy is used (allchannels).",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "valkey_acl_commands": {
                          "type": "array",
                          "description": "Rules for individual commands",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "valkey_acl_keys": {
                          "type": "array",
                          "description": "Key access rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        }
                      }
                    },
                    "access_key": {
                      "type": "string",
                      "description": "Access key for TLS client authentication"
                    },
                    "authentication": {
                      "type": "string",
                      "description": "Authentication details",
                      "enum": [
                        "null",
                        "caching_sha2_password",
                        "mysql_native_password"
                      ]
                    },
                    "expiring_cert_not_valid_after_time": {
                      "type": "string",
                      "description": "Validity end time (ISO8601) for the expiring access certificate"
                    },
                    "password": {
                      "type": "string",
                      "description": "Account password. A null value indicates a user overridden password."
                    },
                    "type": { "type": "string", "description": "Account type" },
                    "username": {
                      "type": "string",
                      "description": "Account username"
                    }
                  },
                  "required": ["password", "type", "username"]
                }
              }
            },
            "required": [
              "cloud_name",
              "create_time",
              "group_list",
              "plan",
              "project_vpc_id",
              "service_integrations",
              "service_name",
              "service_type",
              "service_uri",
              "state",
              "termination_protection",
              "update_time",
              "user_config"
            ]
          }
        },
        "required": ["service"]
      },
      "ServiceUserCredentialsResetResponse": {
        "type": "object",
        "description": "ServiceUserCredentialsResetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service": {
            "type": "object",
            "description": "Service information",
            "properties": {
              "acl": {
                "type": "array",
                "description": "List of Aiven ACL entries for Kafka service",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID",
                      "maxLength": 40
                    },
                    "permission": {
                      "type": "string",
                      "description": "Kafka permission",
                      "enum": ["admin", "read", "readwrite", "write"]
                    },
                    "topic": {
                      "type": "string",
                      "description": "Topic name pattern",
                      "minLength": 1,
                      "maxLength": 249
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": ["permission", "topic", "username"]
                }
              },
              "backups": {
                "type": "array",
                "description": "List of backups for the service",
                "items": {
                  "type": "object",
                  "properties": {
                    "additional_regions": {
                      "type": "array",
                      "description": "Additional backup regions, if available",
                      "items": {
                        "type": "object",
                        "properties": {
                          "cloud": {
                            "type": "string",
                            "description": "Target cloud",
                            "maxLength": 256
                          },
                          "pause_reason": {
                            "type": "string",
                            "description": "Reason for pausing the backup synchronization"
                          },
                          "paused": {
                            "type": "boolean",
                            "description": "Indicates additional backup synchronization is paused"
                          },
                          "region": {
                            "type": "string",
                            "description": "Cloud storage region name"
                          }
                        },
                        "required": ["cloud"]
                      }
                    },
                    "backup_name": {
                      "type": "string",
                      "description": "Internal name of this backup"
                    },
                    "backup_time": {
                      "type": "string",
                      "description": "Backup timestamp (ISO 8601)",
                      "maxLength": 36
                    },
                    "data_size": {
                      "type": "integer",
                      "description": "Backup's original size before compression"
                    },
                    "storage_location": {
                      "type": "string",
                      "description": "Location where this backup is stored"
                    },
                    "tiered_storage_data_size": {
                      "type": "integer",
                      "description": "The amount of tiered storage data in bytes referenced by this backup."
                    }
                  },
                  "required": ["backup_name", "backup_time", "data_size"]
                }
              },
              "cloud_description": {
                "type": "string",
                "description": "Cloud provider and location"
              },
              "cloud_name": {
                "type": "string",
                "description": "Target cloud",
                "maxLength": 256
              },
              "components": {
                "type": "array",
                "description": "Service component information objects",
                "items": {
                  "type": "object",
                  "properties": {
                    "component": {
                      "type": "string",
                      "description": "Service component name"
                    },
                    "host": {
                      "type": "string",
                      "description": "DNS name for connecting to the service component"
                    },
                    "kafka_authentication_method": {
                      "type": "string",
                      "description": "Kafka authentication method. This is a value specific to the 'kafka' service component",
                      "enum": ["certificate", "sasl"]
                    },
                    "kafka_ssl_ca": {
                      "type": "string",
                      "description": "Specifies if this port uses Project CA or Letsencrypt. If not specified, the default is using Project CA.This is a value specific to the 'kafka' service component.",
                      "enum": ["project_ca", "letsencrypt"]
                    },
                    "path": {
                      "type": "string",
                      "description": "Path component of the service URL (useful only if service component is HTTP or HTTPS endpoint)"
                    },
                    "port": {
                      "type": "integer",
                      "description": "Port number for connecting to the service component",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "privatelink_connection_id": {
                      "type": "string",
                      "description": "Privatelink connection ID"
                    },
                    "route": {
                      "type": "string",
                      "description": "Network access route",
                      "enum": ["dynamic", "public", "private", "privatelink"]
                    },
                    "ssl": {
                      "type": "boolean",
                      "description": "Whether the endpoint is encrypted or accepts plaintext. By default endpoints are always encrypted andthis property is only included for service components that may disable encryption."
                    },
                    "usage": {
                      "type": "string",
                      "description": "DNS usage name",
                      "enum": ["disaster_recovery", "primary", "replica"]
                    }
                  },
                  "required": ["component", "host", "port", "route", "usage"]
                }
              },
              "connection_info": {
                "type": "object",
                "description": "Service-specific connection information properties",
                "properties": {}
              },
              "connection_pools": {
                "type": "array",
                "description": "PostgreSQL PGBouncer connection pools",
                "items": {
                  "type": "object",
                  "properties": {
                    "connection_uri": {
                      "type": "string",
                      "description": "Connection URI for the DB pool"
                    },
                    "database": {
                      "type": "string",
                      "description": "Database name",
                      "maxLength": 63
                    },
                    "pool_mode": {
                      "type": "string",
                      "description": "PGBouncer pool mode",
                      "enum": ["session", "transaction", "statement"]
                    },
                    "pool_name": {
                      "type": "string",
                      "description": "Connection pool name",
                      "maxLength": 63
                    },
                    "pool_size": {
                      "type": "integer",
                      "description": "Size of PGBouncer's PostgreSQL side connection pool",
                      "minimum": 1,
                      "maximum": 10000
                    },
                    "username": {
                      "type": "string",
                      "description": "Pool username",
                      "maxLength": 64
                    }
                  },
                  "required": [
                    "connection_uri",
                    "database",
                    "pool_mode",
                    "pool_name",
                    "pool_size"
                  ]
                }
              },
              "create_time": {
                "type": "string",
                "description": "Service creation timestamp (ISO 8601)",
                "maxLength": 36
              },
              "databases": {
                "type": "array",
                "description": "List of service's user database names",
                "items": { "type": "string" }
              },
              "disk_space_mb": {
                "type": "integer",
                "description": "Megabytes of disk space for data storage",
                "minimum": 0
              },
              "features": {
                "type": "object",
                "description": "Feature flags",
                "properties": {}
              },
              "group_list": {
                "type": "array",
                "description": "List of service groups the service belongs to. This field is deprecated. It is always set to single element with value 'default'",
                "items": { "type": "string" }
              },
              "kafka_acl": {
                "type": "array",
                "description": "List of Kafka-native ACL entries",
                "items": {
                  "type": "object",
                  "properties": {
                    "host": {
                      "type": "string",
                      "description": "the host or * for all hosts",
                      "minLength": 0,
                      "maxLength": 256
                    },
                    "id": {
                      "type": "string",
                      "description": "ID",
                      "maxLength": 40
                    },
                    "operation": {
                      "type": "string",
                      "description": "Kafka ACL operation represents an operation which an ACL grants or denies permission to perform",
                      "enum": [
                        "All",
                        "Alter",
                        "AlterConfigs",
                        "ClusterAction",
                        "Create",
                        "CreateTokens",
                        "Delete",
                        "Describe",
                        "DescribeConfigs",
                        "DescribeTokens",
                        "IdempotentWrite",
                        "Read",
                        "Write"
                      ]
                    },
                    "pattern_type": {
                      "type": "string",
                      "description": "Kafka ACL pattern type of resource name",
                      "enum": ["LITERAL", "PREFIXED"]
                    },
                    "permission_type": {
                      "type": "string",
                      "description": "Kafka ACL permission type",
                      "enum": ["ALLOW", "DENY"]
                    },
                    "principal": {
                      "type": "string",
                      "description": "principal is in 'principalType:name' format",
                      "minLength": 0,
                      "maxLength": 256
                    },
                    "resource_name": {
                      "type": "string",
                      "description": "Resource pattern used to match specified resources",
                      "minLength": 0,
                      "maxLength": 256
                    },
                    "resource_type": {
                      "type": "string",
                      "description": "Kafka ACL resource type represents a type of resource which an ACL can be applied to",
                      "enum": [
                        "Cluster",
                        "DelegationToken",
                        "Group",
                        "Topic",
                        "TransactionalId",
                        "User"
                      ]
                    }
                  },
                  "required": [
                    "host",
                    "id",
                    "operation",
                    "pattern_type",
                    "permission_type",
                    "principal",
                    "resource_name",
                    "resource_type"
                  ]
                }
              },
              "maintenance": {
                "type": "object",
                "description": "Automatic maintenance settings",
                "properties": {
                  "dow": {
                    "type": "string",
                    "description": "Day of week for installing updates",
                    "enum": [
                      "monday",
                      "tuesday",
                      "wednesday",
                      "thursday",
                      "friday",
                      "saturday",
                      "sunday",
                      "never"
                    ]
                  },
                  "time": {
                    "type": "string",
                    "description": "Time for installing updates, UTC",
                    "minLength": 8,
                    "maxLength": 8
                  },
                  "updates": {
                    "type": "array",
                    "description": "List of updates waiting to be installed",
                    "items": {
                      "type": "object",
                      "properties": {
                        "deadline": {
                          "type": "string",
                          "description": "Deadline for installing the update"
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the update"
                        },
                        "documentation_link": {
                          "type": "string",
                          "description": "Optional link"
                        },
                        "impact": {
                          "type": "string",
                          "description": "Impact statement of the update"
                        },
                        "impact_portable_text": {
                          "type": "string",
                          "description": "Impact statement in portable text format"
                        },
                        "start_after": {
                          "type": "string",
                          "description": "The earliest time the update will be automatically applied"
                        },
                        "start_at": {
                          "type": "string",
                          "description": "The time when the update will be automatically applied"
                        }
                      }
                    }
                  }
                },
                "required": ["dow", "time", "updates"]
              },
              "metadata": {
                "type": "object",
                "description": "Service type specific metadata",
                "properties": {}
              },
              "node_count": {
                "type": "integer",
                "description": "Number of service nodes in the active plan"
              },
              "node_cpu_count": {
                "type": "integer",
                "description": "Number of CPUs for each node"
              },
              "node_memory_mb": {
                "type": "number",
                "description": "Megabytes of memory for each node"
              },
              "node_states": {
                "type": "array",
                "description": "State of individual service nodes",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the service node"
                    },
                    "progress_updates": {
                      "type": "array",
                      "description": "Extra information regarding the progress for current state",
                      "items": {
                        "type": "object",
                        "properties": {
                          "completed": {
                            "type": "boolean",
                            "description": "Indicates whether this phase has been completed or not"
                          },
                          "current": {
                            "type": "integer",
                            "description": "Current progress for this phase. May be missing or null."
                          },
                          "max": {
                            "type": "integer",
                            "description": "Maximum progress value for this phase. May be missing or null. May change."
                          },
                          "min": {
                            "type": "integer",
                            "description": "Minimum progress value for this phase. May be missing or null."
                          },
                          "phase": {
                            "type": "string",
                            "description": "Key identifying this phase",
                            "enum": [
                              "prepare",
                              "basebackup",
                              "stream",
                              "finalize"
                            ]
                          },
                          "unit": {
                            "type": "string",
                            "description": "Unit for current/min/max values. New units may be added. If null should be treated as generic unit",
                            "enum": [
                              "binlogs",
                              "bytes_compressed",
                              "bytes_uncompressed",
                              "wal_lsn"
                            ]
                          }
                        },
                        "required": ["completed", "phase"]
                      }
                    },
                    "role": {
                      "type": "string",
                      "description": "Role of this node. Only returned for a subset of service types",
                      "enum": ["master", "standby", "read-replica"]
                    },
                    "shard": {
                      "type": "object",
                      "description": "Shard of this node. Only returned for a subset of service types",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the shard."
                        },
                        "position": {
                          "type": "integer",
                          "description": "Position of this shard within the service"
                        }
                      }
                    },
                    "state": {
                      "type": "string",
                      "description": "Current state of the service node",
                      "enum": [
                        "leaving",
                        "running",
                        "setting_up_vm",
                        "syncing_data",
                        "timing_out",
                        "unknown"
                      ]
                    }
                  },
                  "required": ["name", "state"]
                }
              },
              "plan": {
                "type": "string",
                "description": "Subscription plan",
                "maxLength": 128
              },
              "project_vpc_id": {
                "type": "string",
                "description": "Project VPC ID",
                "minLength": 36,
                "maxLength": 36
              },
              "schema_registry_acl": {
                "type": "array",
                "description": "List of Schema Registry ACL entries",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID",
                      "maxLength": 40
                    },
                    "permission": {
                      "type": "string",
                      "description": "ACL entry for Schema Registry",
                      "enum": ["schema_registry_read", "schema_registry_write"]
                    },
                    "resource": {
                      "type": "string",
                      "description": "Schema Registry ACL entry resource name pattern",
                      "minLength": 1,
                      "maxLength": 249
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": ["permission", "resource", "username"]
                }
              },
              "server_group": {
                "type": "object",
                "description": "Service IaaS server group",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Flag set if server group is in use for the service"
                  },
                  "type": {
                    "type": "string",
                    "description": "IaaS server group type"
                  }
                }
              },
              "service_integrations": {
                "type": "array",
                "description": "Integrations with other services",
                "items": {
                  "type": "object",
                  "properties": {
                    "active": {
                      "type": "boolean",
                      "description": "True when integration is active"
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of the integration"
                    },
                    "dest_endpoint": {
                      "type": "string",
                      "description": "Destination endpoint name"
                    },
                    "dest_endpoint_id": {
                      "type": "string",
                      "description": "Destination endpoint id"
                    },
                    "dest_project": {
                      "type": "string",
                      "description": "Project name",
                      "maxLength": 63
                    },
                    "dest_service": {
                      "type": "string",
                      "description": "Destination service name"
                    },
                    "dest_service_type": {
                      "type": "string",
                      "description": "Service type code",
                      "maxLength": 64
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "True when integration is enabled"
                    },
                    "integration_status": {
                      "type": "object",
                      "description": "Integration status",
                      "properties": {
                        "state": {
                          "type": "object",
                          "description": "Service integration state",
                          "properties": {
                            "errors": {
                              "type": "array",
                              "description": "Errors",
                              "items": { "type": "string" }
                            },
                            "likely_error_cause": {
                              "type": "string",
                              "description": "Most likely cause of the errors",
                              "enum": [
                                "null",
                                "destination",
                                "integration",
                                "source",
                                "unknown"
                              ]
                            },
                            "nodes": {
                              "type": "object",
                              "description": "Nodes",
                              "properties": {}
                            },
                            "status": {
                              "type": "string",
                              "description": "Service integration status",
                              "enum": [
                                "failed",
                                "inactive",
                                "running",
                                "starting",
                                "unknown"
                              ]
                            }
                          },
                          "required": ["errors", "nodes", "status"]
                        },
                        "status_user_desc": {
                          "type": "string",
                          "description": "Integration status description"
                        }
                      },
                      "required": ["state", "status_user_desc"]
                    },
                    "integration_type": {
                      "type": "string",
                      "description": "Type of the integration"
                    },
                    "service_integration_id": {
                      "type": "string",
                      "description": "Integration ID"
                    },
                    "source_endpoint": {
                      "type": "string",
                      "description": "Source endpoint name"
                    },
                    "source_endpoint_id": {
                      "type": "string",
                      "description": "Source endpoint ID"
                    },
                    "source_project": {
                      "type": "string",
                      "description": "Project name",
                      "maxLength": 63
                    },
                    "source_service": {
                      "type": "string",
                      "description": "Source service name"
                    },
                    "source_service_type": {
                      "type": "string",
                      "description": "Service type code",
                      "maxLength": 64
                    },
                    "user_config": {
                      "type": "object",
                      "description": "Service integration settings",
                      "properties": {}
                    }
                  },
                  "required": [
                    "active",
                    "description",
                    "dest_project",
                    "dest_service_type",
                    "enabled",
                    "integration_type",
                    "service_integration_id",
                    "source_project",
                    "source_service",
                    "source_service_type"
                  ]
                }
              },
              "service_name": {
                "type": "string",
                "description": "Service name",
                "minLength": 1,
                "maxLength": 64
              },
              "service_notifications": {
                "type": "array",
                "description": "Service notifications",
                "items": {
                  "type": "object",
                  "properties": {
                    "level": {
                      "type": "string",
                      "description": "Notification level",
                      "enum": ["notice", "warning"]
                    },
                    "message": {
                      "type": "string",
                      "description": "Human notification message",
                      "maxLength": 1024
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Notification metadata",
                      "properties": {
                        "end_of_life_help_article_url": {
                          "type": "string",
                          "description": "Link to the help article"
                        },
                        "end_of_life_policy_url": {
                          "type": "string",
                          "description": "Link to the help article"
                        },
                        "service_end_of_life_time": {
                          "type": "string",
                          "description": "Timestamp in ISO 8601 format, always in UTC",
                          "maxLength": 36
                        },
                        "upgrade_to_service_type": {
                          "type": "string",
                          "description": "If the customer takes no action, the service is updated to this service type when end of life is reached on the Aiven platform. If it is the same as the service type, the platform only upgrades the version.",
                          "maxLength": 64
                        },
                        "upgrade_to_version": {
                          "type": "string",
                          "description": "The version to which the service will be updated at the end of life on the Aiven platform if the user does not take any action",
                          "maxLength": 32
                        }
                      }
                    },
                    "type": {
                      "type": "string",
                      "description": "Notification type",
                      "enum": [
                        "service_end_of_life",
                        "service_powered_off_removal"
                      ]
                    }
                  },
                  "required": ["level", "message", "metadata", "type"]
                }
              },
              "service_type": {
                "type": "string",
                "description": "Service type code",
                "maxLength": 64
              },
              "service_type_description": {
                "type": "string",
                "description": "Single line description of the service"
              },
              "service_uri": {
                "type": "string",
                "description": "URI for connecting to the service (may be null)"
              },
              "service_uri_params": {
                "type": "object",
                "description": "service_uri parameterized into key-value pairs",
                "properties": {}
              },
              "state": {
                "type": "string",
                "description": "State of the service",
                "enum": ["POWEROFF", "REBALANCING", "REBUILDING", "RUNNING"]
              },
              "tags": {
                "type": "object",
                "description": "Set of resource tags",
                "properties": {}
              },
              "tech_emails": {
                "type": "array",
                "description": "List of service technical email addresses",
                "maxItems": 10,
                "items": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": ["email"]
                }
              },
              "termination_protection": {
                "type": "boolean",
                "description": "Service is protected against termination and powering off"
              },
              "topics": {
                "type": "array",
                "description": "Kafka topics. DEPRECATED: Use /project/$project/service/$service/topic instead",
                "items": {
                  "type": "object",
                  "properties": {
                    "cleanup_policy": {
                      "type": "string",
                      "description": "cleanup.policy",
                      "maxLength": 64
                    },
                    "min_insync_replicas": {
                      "type": "integer",
                      "description": "min.insync.replicas",
                      "minimum": 1
                    },
                    "partitions": {
                      "type": "integer",
                      "description": "Number of partitions",
                      "minimum": 1,
                      "maximum": 1000000
                    },
                    "replication": {
                      "type": "integer",
                      "description": "Number of replicas",
                      "minimum": 1
                    },
                    "retention_bytes": {
                      "type": "integer",
                      "description": "retention.bytes"
                    },
                    "retention_hours": {
                      "type": "integer",
                      "description": "Retention period (hours)",
                      "maximum": 2562047788015
                    },
                    "state": {
                      "type": "string",
                      "description": "Topic state",
                      "enum": ["ACTIVE", "CONFIGURING", "DELETING"]
                    },
                    "topic_name": {
                      "type": "string",
                      "description": "Topic name",
                      "minLength": 1,
                      "maxLength": 249
                    }
                  },
                  "required": [
                    "cleanup_policy",
                    "min_insync_replicas",
                    "partitions",
                    "replication",
                    "retention_bytes",
                    "retention_hours",
                    "topic_name"
                  ]
                }
              },
              "update_time": {
                "type": "string",
                "description": "Service last update timestamp (ISO 8601)",
                "maxLength": 36
              },
              "user_config": {
                "type": "object",
                "description": "Service type-specific settings",
                "properties": {}
              },
              "users": {
                "type": "array",
                "description": "List of service users",
                "items": {
                  "type": "object",
                  "properties": {
                    "access_cert": {
                      "type": "string",
                      "description": "Access certificate for TLS client authentication"
                    },
                    "access_cert_not_valid_after_time": {
                      "type": "string",
                      "description": "Validity end time (ISO8601) for the current access certificate"
                    },
                    "access_control": {
                      "type": "object",
                      "description": "Service specific access controls for user\n\nService type specific access control rules for user. Currently only used for configuring user ACLs for Redis version 6 and above.",
                      "properties": {
                        "dragonfly_acl_categories": {
                          "type": "array",
                          "description": "Command category rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "dragonfly_acl_commands": {
                          "type": "array",
                          "description": "Rules for individual commands",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "dragonfly_acl_keys": {
                          "type": "array",
                          "description": "Key access rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "m3_group": {
                          "type": "string",
                          "description": "M3 access group to associate users with",
                          "maxLength": 16
                        },
                        "pg_allow_replication": {
                          "type": "boolean",
                          "description": "Enable REPLICATION role option"
                        },
                        "redis_acl_categories": {
                          "type": "array",
                          "description": "Command category rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "redis_acl_channels": {
                          "type": "array",
                          "description": "Permitted pub/sub channel patterns\n\nGlob-style patterns defining which pub/sub channels can be accessed. If array is not defined, the default policy is used (allchannels).",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "redis_acl_commands": {
                          "type": "array",
                          "description": "Rules for individual commands",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "redis_acl_keys": {
                          "type": "array",
                          "description": "Key access rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "valkey_acl_categories": {
                          "type": "array",
                          "description": "Command category rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "valkey_acl_channels": {
                          "type": "array",
                          "description": "Permitted pub/sub channel patterns\n\nGlob-style patterns defining which pub/sub channels can be accessed. If array is not defined, the default policy is used (allchannels).",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "valkey_acl_commands": {
                          "type": "array",
                          "description": "Rules for individual commands",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        },
                        "valkey_acl_keys": {
                          "type": "array",
                          "description": "Key access rules",
                          "maxItems": 256,
                          "items": { "type": "string" }
                        }
                      }
                    },
                    "access_key": {
                      "type": "string",
                      "description": "Access key for TLS client authentication"
                    },
                    "authentication": {
                      "type": "string",
                      "description": "Authentication details",
                      "enum": [
                        "null",
                        "caching_sha2_password",
                        "mysql_native_password"
                      ]
                    },
                    "expiring_cert_not_valid_after_time": {
                      "type": "string",
                      "description": "Validity end time (ISO8601) for the expiring access certificate"
                    },
                    "password": {
                      "type": "string",
                      "description": "Account password. A null value indicates a user overridden password."
                    },
                    "type": { "type": "string", "description": "Account type" },
                    "username": {
                      "type": "string",
                      "description": "Account username"
                    }
                  },
                  "required": ["password", "type", "username"]
                }
              }
            },
            "required": [
              "cloud_name",
              "create_time",
              "group_list",
              "plan",
              "project_vpc_id",
              "service_integrations",
              "service_name",
              "service_type",
              "service_uri",
              "state",
              "termination_protection",
              "update_time",
              "user_config"
            ]
          }
        },
        "required": ["service"]
      },
      "ServiceUserDeleteResponse": {
        "type": "object",
        "description": "ServiceUserDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceUserGetResponse": {
        "type": "object",
        "description": "ServiceUserGetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "user": {
            "type": "object",
            "description": "Service user account",
            "properties": {
              "access_cert": {
                "type": "string",
                "description": "Access certificate for TLS client authentication"
              },
              "access_cert_not_valid_after_time": {
                "type": "string",
                "description": "Validity end time (ISO8601) for the current access certificate"
              },
              "access_control": {
                "type": "object",
                "description": "Service specific access controls for user\n\nService type specific access control rules for user. Currently only used for configuring user ACLs for Redis version 6 and above.",
                "properties": {
                  "dragonfly_acl_categories": {
                    "type": "array",
                    "description": "Command category rules",
                    "maxItems": 256,
                    "items": { "type": "string" }
                  },
                  "dragonfly_acl_commands": {
                    "type": "array",
                    "description": "Rules for individual commands",
                    "maxItems": 256,
                    "items": { "type": "string" }
                  },
                  "dragonfly_acl_keys": {
                    "type": "array",
                    "description": "Key access rules",
                    "maxItems": 256,
                    "items": { "type": "string" }
                  },
                  "m3_group": {
                    "type": "string",
                    "description": "M3 access group to associate users with",
                    "maxLength": 16
                  },
                  "pg_allow_replication": {
                    "type": "boolean",
                    "description": "Enable REPLICATION role option"
                  },
                  "redis_acl_categories": {
                    "type": "array",
                    "description": "Command category rules",
                    "maxItems": 256,
                    "items": { "type": "string" }
                  },
                  "redis_acl_channels": {
                    "type": "array",
                    "description": "Permitted pub/sub channel patterns\n\nGlob-style patterns defining which pub/sub channels can be accessed. If array is not defined, the default policy is used (allchannels).",
                    "maxItems": 256,
                    "items": { "type": "string" }
                  },
                  "redis_acl_commands": {
                    "type": "array",
                    "description": "Rules for individual commands",
                    "maxItems": 256,
                    "items": { "type": "string" }
                  },
                  "redis_acl_keys": {
                    "type": "array",
                    "description": "Key access rules",
                    "maxItems": 256,
                    "items": { "type": "string" }
                  },
                  "valkey_acl_categories": {
                    "type": "array",
                    "description": "Command category rules",
                    "maxItems": 256,
                    "items": { "type": "string" }
                  },
                  "valkey_acl_channels": {
                    "type": "array",
                    "description": "Permitted pub/sub channel patterns\n\nGlob-style patterns defining which pub/sub channels can be accessed. If array is not defined, the default policy is used (allchannels).",
                    "maxItems": 256,
                    "items": { "type": "string" }
                  },
                  "valkey_acl_commands": {
                    "type": "array",
                    "description": "Rules for individual commands",
                    "maxItems": 256,
                    "items": { "type": "string" }
                  },
                  "valkey_acl_keys": {
                    "type": "array",
                    "description": "Key access rules",
                    "maxItems": 256,
                    "items": { "type": "string" }
                  }
                }
              },
              "access_key": {
                "type": "string",
                "description": "Access key for TLS client authentication"
              },
              "authentication": {
                "type": "string",
                "description": "Authentication details",
                "enum": [
                  "null",
                  "caching_sha2_password",
                  "mysql_native_password"
                ]
              },
              "expiring_cert_not_valid_after_time": {
                "type": "string",
                "description": "Validity end time (ISO8601) for the expiring access certificate"
              },
              "password": {
                "type": "string",
                "description": "Account password. A null value indicates a user overridden password."
              },
              "type": { "type": "string", "description": "Account type" },
              "username": {
                "type": "string",
                "description": "Account username"
              }
            },
            "required": ["password", "type", "username"]
          }
        },
        "required": ["user"]
      },
      "ServiceIntegrationCreateRequestBody": {
        "type": "object",
        "description": "ServiceIntegrationCreateRequestBody",
        "properties": {
          "dest_endpoint_id": {
            "type": "string",
            "description": "Integration destination endpoint ID",
            "maxLength": 36
          },
          "dest_project": {
            "type": "string",
            "description": "Destination project name",
            "maxLength": 63
          },
          "dest_service": {
            "type": "string",
            "description": "Destination service name",
            "maxLength": 64
          },
          "integration_type": {
            "type": "string",
            "description": "Service integration type",
            "enum": [
              "alertmanager",
              "application_service_credential",
              "autoscaler",
              "caching",
              "cassandra_cross_service_cluster",
              "clickhouse_credentials",
              "clickhouse_kafka",
              "clickhouse_postgresql",
              "dashboard",
              "datadog",
              "datasource",
              "disaster_recovery",
              "external_aws_cloudwatch_logs",
              "external_aws_cloudwatch_metrics",
              "external_elasticsearch_logs",
              "external_google_cloud_logging",
              "external_opensearch_logs",
              "flink",
              "flink_external_bigquery",
              "flink_external_kafka",
              "flink_external_postgresql",
              "internal_connectivity",
              "jolokia",
              "kafka_connect",
              "kafka_connect_postgresql",
              "kafka_logs",
              "kafka_mirrormaker",
              "logs",
              "m3aggregator",
              "m3coordinator",
              "metrics",
              "opensearch_cross_cluster_replication",
              "opensearch_cross_cluster_search",
              "prometheus",
              "read_replica",
              "rsyslog",
              "schema_registry_proxy",
              "stresstester",
              "thanos_distributed_query",
              "thanos_migrate",
              "thanoscompactor",
              "thanosquery",
              "thanosruler",
              "thanosstore",
              "vector",
              "vmalert"
            ]
          },
          "source_endpoint_id": {
            "type": "string",
            "description": "Integration source endpoint ID",
            "maxLength": 36
          },
          "source_project": {
            "type": "string",
            "description": "Source project name",
            "maxLength": 63
          },
          "source_service": {
            "type": "string",
            "description": "Source service name",
            "maxLength": 64
          },
          "user_config": {
            "type": "object",
            "description": "Service type-specific settings",
            "properties": {}
          }
        },
        "required": ["integration_type"]
      },
      "ServiceIntegrationCreateResponse": {
        "type": "object",
        "description": "ServiceIntegrationCreateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service_integration": {
            "type": "object",
            "description": "Service integration",
            "properties": {
              "active": {
                "type": "boolean",
                "description": "True when integration is active"
              },
              "description": {
                "type": "string",
                "description": "Description of the integration"
              },
              "dest_endpoint": {
                "type": "string",
                "description": "Destination endpoint name"
              },
              "dest_endpoint_id": {
                "type": "string",
                "description": "Destination endpoint id"
              },
              "dest_project": {
                "type": "string",
                "description": "Project name",
                "maxLength": 63
              },
              "dest_service": {
                "type": "string",
                "description": "Destination service name"
              },
              "dest_service_type": {
                "type": "string",
                "description": "Service type code",
                "maxLength": 64
              },
              "enabled": {
                "type": "boolean",
                "description": "True when integration is enabled"
              },
              "integration_status": {
                "type": "object",
                "description": "Integration status",
                "properties": {
                  "state": {
                    "type": "object",
                    "description": "Service integration state",
                    "properties": {
                      "errors": {
                        "type": "array",
                        "description": "Errors",
                        "items": { "type": "string" }
                      },
                      "likely_error_cause": {
                        "type": "string",
                        "description": "Most likely cause of the errors",
                        "enum": [
                          "null",
                          "destination",
                          "integration",
                          "source",
                          "unknown"
                        ]
                      },
                      "nodes": {
                        "type": "object",
                        "description": "Nodes",
                        "properties": {}
                      },
                      "status": {
                        "type": "string",
                        "description": "Service integration status",
                        "enum": [
                          "failed",
                          "inactive",
                          "running",
                          "starting",
                          "unknown"
                        ]
                      }
                    },
                    "required": ["errors", "nodes", "status"]
                  },
                  "status_user_desc": {
                    "type": "string",
                    "description": "Integration status description"
                  }
                },
                "required": ["state", "status_user_desc"]
              },
              "integration_type": {
                "type": "string",
                "description": "Type of the integration"
              },
              "service_integration_id": {
                "type": "string",
                "description": "Integration ID"
              },
              "source_endpoint": {
                "type": "string",
                "description": "Source endpoint name"
              },
              "source_endpoint_id": {
                "type": "string",
                "description": "Source endpoint ID"
              },
              "source_project": {
                "type": "string",
                "description": "Project name",
                "maxLength": 63
              },
              "source_service": {
                "type": "string",
                "description": "Source service name"
              },
              "source_service_type": {
                "type": "string",
                "description": "Service type code",
                "maxLength": 64
              },
              "user_config": {
                "type": "object",
                "description": "Service integration settings",
                "properties": {}
              }
            },
            "required": [
              "active",
              "description",
              "dest_project",
              "dest_service_type",
              "enabled",
              "integration_type",
              "service_integration_id",
              "source_project",
              "source_service",
              "source_service_type"
            ]
          }
        },
        "required": ["service_integration"]
      },
      "ServiceIntegrationDeleteResponse": {
        "type": "object",
        "description": "ServiceIntegrationDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceIntegrationEndpointCreateRequestBody": {
        "type": "object",
        "description": "ServiceIntegrationEndpointCreateRequestBody",
        "properties": {
          "endpoint_name": {
            "type": "string",
            "description": "Integration endpoint name",
            "minLength": 1,
            "maxLength": 40
          },
          "endpoint_type": {
            "type": "string",
            "description": "Service integration endpoint type",
            "enum": [
              "autoscaler",
              "datadog",
              "external_aws_cloudwatch_logs",
              "external_aws_cloudwatch_metrics",
              "external_aws_s3",
              "external_azure_blob_storage",
              "external_clickhouse",
              "external_elasticsearch_logs",
              "external_google_cloud_bigquery",
              "external_google_cloud_logging",
              "external_kafka",
              "external_mysql",
              "external_opensearch_logs",
              "external_postgresql",
              "external_prometheus",
              "external_redis",
              "external_schema_registry",
              "external_sumologic_logs",
              "jolokia",
              "prometheus",
              "rsyslog"
            ]
          },
          "user_config": {
            "type": "object",
            "description": "Service integration endpoint settings",
            "properties": {}
          }
        },
        "required": ["endpoint_name", "endpoint_type", "user_config"]
      },
      "ServiceIntegrationEndpointCreateResponse": {
        "type": "object",
        "description": "ServiceIntegrationEndpointCreateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service_integration_endpoint": {
            "type": "object",
            "description": "Service integration endpoint",
            "properties": {
              "endpoint_config": {
                "type": "object",
                "description": "Service integration endpoint backend settings",
                "properties": {}
              },
              "endpoint_id": {
                "type": "string",
                "description": "Integration endpoint ID"
              },
              "endpoint_name": {
                "type": "string",
                "description": "Integration endpoint name",
                "minLength": 1,
                "maxLength": 40
              },
              "endpoint_type": {
                "type": "string",
                "description": "Integration endpoint type",
                "enum": [
                  "autoscaler",
                  "datadog",
                  "external_aws_cloudwatch_logs",
                  "external_aws_cloudwatch_metrics",
                  "external_aws_s3",
                  "external_azure_blob_storage",
                  "external_clickhouse",
                  "external_elasticsearch_logs",
                  "external_google_cloud_bigquery",
                  "external_google_cloud_logging",
                  "external_kafka",
                  "external_mysql",
                  "external_opensearch_logs",
                  "external_postgresql",
                  "external_prometheus",
                  "external_redis",
                  "external_schema_registry",
                  "external_sumologic_logs",
                  "jolokia",
                  "prometheus",
                  "rsyslog"
                ]
              },
              "user_config": {
                "type": "object",
                "description": "Service integration endpoint settings",
                "properties": {}
              }
            },
            "required": [
              "endpoint_config",
              "endpoint_id",
              "endpoint_name",
              "endpoint_type",
              "user_config"
            ]
          }
        },
        "required": ["service_integration_endpoint"]
      },
      "ServiceIntegrationEndpointDeleteResponse": {
        "type": "object",
        "description": "ServiceIntegrationEndpointDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceIntegrationEndpointGetResponse": {
        "type": "object",
        "description": "ServiceIntegrationEndpointGetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service_integration_endpoint": {
            "type": "object",
            "description": "Service integration endpoint",
            "properties": {
              "endpoint_config": {
                "type": "object",
                "description": "Service integration endpoint backend settings",
                "properties": {}
              },
              "endpoint_id": {
                "type": "string",
                "description": "Integration endpoint ID"
              },
              "endpoint_name": {
                "type": "string",
                "description": "Integration endpoint name",
                "minLength": 1,
                "maxLength": 40
              },
              "endpoint_type": {
                "type": "string",
                "description": "Integration endpoint type",
                "enum": [
                  "autoscaler",
                  "datadog",
                  "external_aws_cloudwatch_logs",
                  "external_aws_cloudwatch_metrics",
                  "external_aws_s3",
                  "external_azure_blob_storage",
                  "external_clickhouse",
                  "external_elasticsearch_logs",
                  "external_google_cloud_bigquery",
                  "external_google_cloud_logging",
                  "external_kafka",
                  "external_mysql",
                  "external_opensearch_logs",
                  "external_postgresql",
                  "external_prometheus",
                  "external_redis",
                  "external_schema_registry",
                  "external_sumologic_logs",
                  "jolokia",
                  "prometheus",
                  "rsyslog"
                ]
              },
              "user_config": {
                "type": "object",
                "description": "Service integration endpoint settings",
                "properties": {}
              }
            },
            "required": [
              "endpoint_config",
              "endpoint_id",
              "endpoint_name",
              "endpoint_type",
              "user_config"
            ]
          }
        },
        "required": ["service_integration_endpoint"]
      },
      "ServiceIntegrationEndpointListResponse": {
        "type": "object",
        "description": "ServiceIntegrationEndpointListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service_integration_endpoints": {
            "type": "array",
            "description": "List of service integrations",
            "items": {
              "type": "object",
              "properties": {
                "endpoint_config": {
                  "type": "object",
                  "description": "Service integration endpoint backend settings",
                  "properties": {}
                },
                "endpoint_id": {
                  "type": "string",
                  "description": "Integration endpoint ID"
                },
                "endpoint_name": {
                  "type": "string",
                  "description": "Integration endpoint name",
                  "minLength": 1,
                  "maxLength": 40
                },
                "endpoint_type": {
                  "type": "string",
                  "description": "Integration endpoint type",
                  "enum": [
                    "autoscaler",
                    "datadog",
                    "external_aws_cloudwatch_logs",
                    "external_aws_cloudwatch_metrics",
                    "external_aws_s3",
                    "external_azure_blob_storage",
                    "external_clickhouse",
                    "external_elasticsearch_logs",
                    "external_google_cloud_bigquery",
                    "external_google_cloud_logging",
                    "external_kafka",
                    "external_mysql",
                    "external_opensearch_logs",
                    "external_postgresql",
                    "external_prometheus",
                    "external_redis",
                    "external_schema_registry",
                    "external_sumologic_logs",
                    "jolokia",
                    "prometheus",
                    "rsyslog"
                  ]
                },
                "user_config": {
                  "type": "object",
                  "description": "Service integration endpoint settings",
                  "properties": {}
                }
              },
              "required": [
                "endpoint_config",
                "endpoint_id",
                "endpoint_name",
                "endpoint_type",
                "user_config"
              ]
            }
          }
        },
        "required": ["service_integration_endpoints"]
      },
      "ServiceIntegrationEndpointTypesResponse": {
        "type": "object",
        "description": "ServiceIntegrationEndpointTypesResponse",
        "properties": {
          "endpoint_types": {
            "type": "array",
            "description": "List of service integration endpoint types",
            "items": {
              "type": "object",
              "properties": {
                "endpoint_type": {
                  "type": "string",
                  "description": "Endpoint type name"
                },
                "service_types": {
                  "type": "array",
                  "description": "Supported service types",
                  "items": { "type": "string" }
                },
                "title": {
                  "type": "string",
                  "description": "Endpoint type description"
                },
                "user_config_schema": {
                  "type": "object",
                  "description": "JSON-Schema for the 'user_config' properties",
                  "properties": {}
                }
              },
              "required": [
                "endpoint_type",
                "service_types",
                "title",
                "user_config_schema"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["endpoint_types"]
      },
      "ServiceIntegrationEndpointUpdateRequestBody": {
        "type": "object",
        "description": "ServiceIntegrationEndpointUpdateRequestBody",
        "properties": {
          "user_config": {
            "type": "object",
            "description": "Service integration endpoint settings",
            "properties": {}
          }
        },
        "required": ["user_config"]
      },
      "ServiceIntegrationEndpointUpdateResponse": {
        "type": "object",
        "description": "ServiceIntegrationEndpointUpdateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service_integration_endpoint": {
            "type": "object",
            "description": "Service integration endpoint",
            "properties": {
              "endpoint_config": {
                "type": "object",
                "description": "Service integration endpoint backend settings",
                "properties": {}
              },
              "endpoint_id": {
                "type": "string",
                "description": "Integration endpoint ID"
              },
              "endpoint_name": {
                "type": "string",
                "description": "Integration endpoint name",
                "minLength": 1,
                "maxLength": 40
              },
              "endpoint_type": {
                "type": "string",
                "description": "Integration endpoint type",
                "enum": [
                  "autoscaler",
                  "datadog",
                  "external_aws_cloudwatch_logs",
                  "external_aws_cloudwatch_metrics",
                  "external_aws_s3",
                  "external_azure_blob_storage",
                  "external_clickhouse",
                  "external_elasticsearch_logs",
                  "external_google_cloud_bigquery",
                  "external_google_cloud_logging",
                  "external_kafka",
                  "external_mysql",
                  "external_opensearch_logs",
                  "external_postgresql",
                  "external_prometheus",
                  "external_redis",
                  "external_schema_registry",
                  "external_sumologic_logs",
                  "jolokia",
                  "prometheus",
                  "rsyslog"
                ]
              },
              "user_config": {
                "type": "object",
                "description": "Service integration endpoint settings",
                "properties": {}
              }
            },
            "required": [
              "endpoint_config",
              "endpoint_id",
              "endpoint_name",
              "endpoint_type",
              "user_config"
            ]
          }
        },
        "required": ["service_integration_endpoint"]
      },
      "ServiceIntegrationGetResponse": {
        "type": "object",
        "description": "ServiceIntegrationGetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service_integration": {
            "type": "object",
            "description": "Service integration",
            "properties": {
              "active": {
                "type": "boolean",
                "description": "True when integration is active"
              },
              "description": {
                "type": "string",
                "description": "Description of the integration"
              },
              "dest_endpoint": {
                "type": "string",
                "description": "Destination endpoint name"
              },
              "dest_endpoint_id": {
                "type": "string",
                "description": "Destination endpoint id"
              },
              "dest_project": {
                "type": "string",
                "description": "Project name",
                "maxLength": 63
              },
              "dest_service": {
                "type": "string",
                "description": "Destination service name"
              },
              "dest_service_type": {
                "type": "string",
                "description": "Service type code",
                "maxLength": 64
              },
              "enabled": {
                "type": "boolean",
                "description": "True when integration is enabled"
              },
              "integration_status": {
                "type": "object",
                "description": "Integration status",
                "properties": {
                  "state": {
                    "type": "object",
                    "description": "Service integration state",
                    "properties": {
                      "errors": {
                        "type": "array",
                        "description": "Errors",
                        "items": { "type": "string" }
                      },
                      "likely_error_cause": {
                        "type": "string",
                        "description": "Most likely cause of the errors",
                        "enum": [
                          "null",
                          "destination",
                          "integration",
                          "source",
                          "unknown"
                        ]
                      },
                      "nodes": {
                        "type": "object",
                        "description": "Nodes",
                        "properties": {}
                      },
                      "status": {
                        "type": "string",
                        "description": "Service integration status",
                        "enum": [
                          "failed",
                          "inactive",
                          "running",
                          "starting",
                          "unknown"
                        ]
                      }
                    },
                    "required": ["errors", "nodes", "status"]
                  },
                  "status_user_desc": {
                    "type": "string",
                    "description": "Integration status description"
                  }
                },
                "required": ["state", "status_user_desc"]
              },
              "integration_type": {
                "type": "string",
                "description": "Type of the integration"
              },
              "service_integration_id": {
                "type": "string",
                "description": "Integration ID"
              },
              "source_endpoint": {
                "type": "string",
                "description": "Source endpoint name"
              },
              "source_endpoint_id": {
                "type": "string",
                "description": "Source endpoint ID"
              },
              "source_project": {
                "type": "string",
                "description": "Project name",
                "maxLength": 63
              },
              "source_service": {
                "type": "string",
                "description": "Source service name"
              },
              "source_service_type": {
                "type": "string",
                "description": "Service type code",
                "maxLength": 64
              },
              "user_config": {
                "type": "object",
                "description": "Service integration settings",
                "properties": {}
              }
            },
            "required": [
              "active",
              "description",
              "dest_project",
              "dest_service_type",
              "enabled",
              "integration_type",
              "service_integration_id",
              "source_project",
              "source_service",
              "source_service_type"
            ]
          }
        },
        "required": ["service_integration"]
      },
      "ServiceIntegrationListResponse": {
        "type": "object",
        "description": "ServiceIntegrationListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service_integrations": {
            "type": "array",
            "description": "List of service integrations in current project for a service",
            "items": {
              "type": "object",
              "properties": {
                "active": {
                  "type": "boolean",
                  "description": "True when integration is active"
                },
                "description": {
                  "type": "string",
                  "description": "Description of the integration"
                },
                "dest_endpoint": {
                  "type": "string",
                  "description": "Destination endpoint name"
                },
                "dest_endpoint_id": {
                  "type": "string",
                  "description": "Destination endpoint id"
                },
                "dest_project": {
                  "type": "string",
                  "description": "Project name",
                  "maxLength": 63
                },
                "dest_service": {
                  "type": "string",
                  "description": "Destination service name"
                },
                "dest_service_type": {
                  "type": "string",
                  "description": "Service type code",
                  "maxLength": 64
                },
                "enabled": {
                  "type": "boolean",
                  "description": "True when integration is enabled"
                },
                "integration_status": {
                  "type": "object",
                  "description": "Integration status",
                  "properties": {
                    "state": {
                      "type": "object",
                      "description": "Service integration state",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "description": "Errors",
                          "items": { "type": "string" }
                        },
                        "likely_error_cause": {
                          "type": "string",
                          "description": "Most likely cause of the errors",
                          "enum": [
                            "null",
                            "destination",
                            "integration",
                            "source",
                            "unknown"
                          ]
                        },
                        "nodes": {
                          "type": "object",
                          "description": "Nodes",
                          "properties": {}
                        },
                        "status": {
                          "type": "string",
                          "description": "Service integration status",
                          "enum": [
                            "failed",
                            "inactive",
                            "running",
                            "starting",
                            "unknown"
                          ]
                        }
                      },
                      "required": ["errors", "nodes", "status"]
                    },
                    "status_user_desc": {
                      "type": "string",
                      "description": "Integration status description"
                    }
                  },
                  "required": ["state", "status_user_desc"]
                },
                "integration_type": {
                  "type": "string",
                  "description": "Type of the integration"
                },
                "service_integration_id": {
                  "type": "string",
                  "description": "Integration ID"
                },
                "source_endpoint": {
                  "type": "string",
                  "description": "Source endpoint name"
                },
                "source_endpoint_id": {
                  "type": "string",
                  "description": "Source endpoint ID"
                },
                "source_project": {
                  "type": "string",
                  "description": "Project name",
                  "maxLength": 63
                },
                "source_service": {
                  "type": "string",
                  "description": "Source service name"
                },
                "source_service_type": {
                  "type": "string",
                  "description": "Service type code",
                  "maxLength": 64
                },
                "user_config": {
                  "type": "object",
                  "description": "Service integration settings",
                  "properties": {}
                }
              },
              "required": [
                "active",
                "description",
                "dest_project",
                "dest_service_type",
                "enabled",
                "integration_type",
                "service_integration_id",
                "source_project",
                "source_service",
                "source_service_type"
              ]
            }
          }
        },
        "required": ["service_integrations"]
      },
      "ServiceIntegrationTypesResponse": {
        "type": "object",
        "description": "ServiceIntegrationTypesResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "integration_types": {
            "type": "array",
            "description": "List of service integration types",
            "items": {
              "type": "object",
              "properties": {
                "dest_description": {
                  "type": "string",
                  "description": "Description of the destination service"
                },
                "dest_service_type": {
                  "type": "string",
                  "description": "Service type. DEPRECATED: Use dest_service_types instead"
                },
                "dest_service_types": {
                  "type": "array",
                  "description": "Supported destination service types",
                  "items": { "type": "string" }
                },
                "integration_type": {
                  "type": "string",
                  "description": "Integration type name"
                },
                "source_description": {
                  "type": "string",
                  "description": "Description of the source service"
                },
                "source_service_types": {
                  "type": "array",
                  "description": "Supported source service types",
                  "items": { "type": "string" }
                },
                "user_config_schema": {
                  "type": "object",
                  "description": "JSON-Schema for the 'user_config' properties",
                  "properties": {}
                }
              },
              "required": [
                "dest_description",
                "dest_service_type",
                "dest_service_types",
                "integration_type",
                "source_description",
                "source_service_types",
                "user_config_schema"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["integration_types"]
      },
      "ServiceIntegrationUpdateRequestBody": {
        "type": "object",
        "description": "ServiceIntegrationUpdateRequestBody",
        "properties": {
          "user_config": {
            "type": "object",
            "description": "Service integration settings",
            "properties": {}
          }
        },
        "required": ["user_config"]
      },
      "ServiceIntegrationUpdateResponse": {
        "type": "object",
        "description": "ServiceIntegrationUpdateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service_integration": {
            "type": "object",
            "description": "Service integration",
            "properties": {
              "active": {
                "type": "boolean",
                "description": "True when integration is active"
              },
              "description": {
                "type": "string",
                "description": "Description of the integration"
              },
              "dest_endpoint": {
                "type": "string",
                "description": "Destination endpoint name"
              },
              "dest_endpoint_id": {
                "type": "string",
                "description": "Destination endpoint id"
              },
              "dest_project": {
                "type": "string",
                "description": "Project name",
                "maxLength": 63
              },
              "dest_service": {
                "type": "string",
                "description": "Destination service name"
              },
              "dest_service_type": {
                "type": "string",
                "description": "Service type code",
                "maxLength": 64
              },
              "enabled": {
                "type": "boolean",
                "description": "True when integration is enabled"
              },
              "integration_status": {
                "type": "object",
                "description": "Integration status",
                "properties": {
                  "state": {
                    "type": "object",
                    "description": "Service integration state",
                    "properties": {
                      "errors": {
                        "type": "array",
                        "description": "Errors",
                        "items": { "type": "string" }
                      },
                      "likely_error_cause": {
                        "type": "string",
                        "description": "Most likely cause of the errors",
                        "enum": [
                          "null",
                          "destination",
                          "integration",
                          "source",
                          "unknown"
                        ]
                      },
                      "nodes": {
                        "type": "object",
                        "description": "Nodes",
                        "properties": {}
                      },
                      "status": {
                        "type": "string",
                        "description": "Service integration status",
                        "enum": [
                          "failed",
                          "inactive",
                          "running",
                          "starting",
                          "unknown"
                        ]
                      }
                    },
                    "required": ["errors", "nodes", "status"]
                  },
                  "status_user_desc": {
                    "type": "string",
                    "description": "Integration status description"
                  }
                },
                "required": ["state", "status_user_desc"]
              },
              "integration_type": {
                "type": "string",
                "description": "Type of the integration"
              },
              "service_integration_id": {
                "type": "string",
                "description": "Integration ID"
              },
              "source_endpoint": {
                "type": "string",
                "description": "Source endpoint name"
              },
              "source_endpoint_id": {
                "type": "string",
                "description": "Source endpoint ID"
              },
              "source_project": {
                "type": "string",
                "description": "Project name",
                "maxLength": 63
              },
              "source_service": {
                "type": "string",
                "description": "Source service name"
              },
              "source_service_type": {
                "type": "string",
                "description": "Service type code",
                "maxLength": 64
              },
              "user_config": {
                "type": "object",
                "description": "Service integration settings",
                "properties": {}
              }
            },
            "required": [
              "active",
              "description",
              "dest_project",
              "dest_service_type",
              "enabled",
              "integration_type",
              "service_integration_id",
              "source_project",
              "source_service",
              "source_service_type"
            ]
          }
        },
        "required": ["service_integration"]
      },
      "ProjectStaticIPAssociateRequestBody": {
        "type": "object",
        "description": "ProjectStaticIPAssociateRequestBody",
        "properties": {
          "service_name": {
            "type": "string",
            "description": "Service name",
            "minLength": 1,
            "maxLength": 64
          }
        },
        "required": ["service_name"]
      },
      "ProjectStaticIPAssociateResponse": {
        "type": "object",
        "description": "ProjectStaticIPAssociateResponse",
        "properties": {
          "cloud_name": {
            "type": "string",
            "description": "Target cloud",
            "maxLength": 256
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "ip_address": { "type": "string", "description": "IPv4 address" },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service_name": {
            "type": "string",
            "description": "Service name",
            "minLength": 1,
            "maxLength": 64
          },
          "state": {
            "type": "string",
            "description": "Static IP address state",
            "enum": [
              "creating",
              "created",
              "available",
              "assigned",
              "deleting",
              "deleted"
            ]
          },
          "static_ip_address_id": {
            "type": "string",
            "description": "Static IP address identifier"
          },
          "termination_protection": {
            "type": "boolean",
            "description": "Static IP address is protected against deletion"
          }
        },
        "required": [
          "cloud_name",
          "ip_address",
          "service_name",
          "state",
          "static_ip_address_id",
          "termination_protection"
        ]
      },
      "ProjectStaticIPAvailabilityListResponse": {
        "type": "object",
        "description": "ProjectStaticIPAvailabilityListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "static_ip_address_availability": {
            "type": "array",
            "description": "Paginated array",
            "items": {
              "type": "object",
              "properties": {
                "cloud_name": {
                  "type": "string",
                  "description": "Target cloud",
                  "maxLength": 256
                },
                "price_usd": {
                  "type": "string",
                  "description": "Hourly static IP address price in this cloud region"
                }
              },
              "required": ["cloud_name", "price_usd"]
            }
          }
        },
        "required": ["static_ip_address_availability"]
      },
      "ProjectStaticIPDissociateResponse": {
        "type": "object",
        "description": "ProjectStaticIPDissociateResponse",
        "properties": {
          "cloud_name": {
            "type": "string",
            "description": "Target cloud",
            "maxLength": 256
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "ip_address": { "type": "string", "description": "IPv4 address" },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service_name": {
            "type": "string",
            "description": "Service name",
            "minLength": 1,
            "maxLength": 64
          },
          "state": {
            "type": "string",
            "description": "Static IP address state",
            "enum": [
              "creating",
              "created",
              "available",
              "assigned",
              "deleting",
              "deleted"
            ]
          },
          "static_ip_address_id": {
            "type": "string",
            "description": "Static IP address identifier"
          },
          "termination_protection": {
            "type": "boolean",
            "description": "Static IP address is protected against deletion"
          }
        },
        "required": [
          "cloud_name",
          "ip_address",
          "service_name",
          "state",
          "static_ip_address_id",
          "termination_protection"
        ]
      },
      "ProjectStaticIPPatchRequestBody": {
        "type": "object",
        "description": "ProjectStaticIPPatchRequestBody",
        "properties": {
          "termination_protection": {
            "type": "boolean",
            "description": "Static IP address is protected against deletion"
          }
        }
      },
      "ProjectStaticIPPatchResponse": {
        "type": "object",
        "description": "ProjectStaticIPPatchResponse",
        "properties": {
          "cloud_name": {
            "type": "string",
            "description": "Target cloud",
            "maxLength": 256
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "ip_address": { "type": "string", "description": "IPv4 address" },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service_name": {
            "type": "string",
            "description": "Service name",
            "minLength": 1,
            "maxLength": 64
          },
          "state": {
            "type": "string",
            "description": "Static IP address state",
            "enum": [
              "creating",
              "created",
              "available",
              "assigned",
              "deleting",
              "deleted"
            ]
          },
          "static_ip_address_id": {
            "type": "string",
            "description": "Static IP address identifier"
          },
          "termination_protection": {
            "type": "boolean",
            "description": "Static IP address is protected against deletion"
          }
        },
        "required": [
          "cloud_name",
          "ip_address",
          "service_name",
          "state",
          "static_ip_address_id",
          "termination_protection"
        ]
      },
      "StaticIPCreateRequestBody": {
        "type": "object",
        "description": "StaticIPCreateRequestBody",
        "properties": {
          "cloud_name": {
            "type": "string",
            "description": "Target cloud",
            "maxLength": 256
          },
          "termination_protection": {
            "type": "boolean",
            "description": "Static IP address is protected against deletion"
          }
        },
        "required": ["cloud_name"]
      },
      "StaticIPCreateResponse": {
        "type": "object",
        "description": "StaticIPCreateResponse",
        "properties": {
          "cloud_name": {
            "type": "string",
            "description": "Target cloud",
            "maxLength": 256
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "ip_address": { "type": "string", "description": "IPv4 address" },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service_name": {
            "type": "string",
            "description": "Service name",
            "minLength": 1,
            "maxLength": 64
          },
          "state": {
            "type": "string",
            "description": "Static IP address state",
            "enum": [
              "creating",
              "created",
              "available",
              "assigned",
              "deleting",
              "deleted"
            ]
          },
          "static_ip_address_id": {
            "type": "string",
            "description": "Static IP address identifier"
          },
          "termination_protection": {
            "type": "boolean",
            "description": "Static IP address is protected against deletion"
          }
        },
        "required": [
          "cloud_name",
          "ip_address",
          "service_name",
          "state",
          "static_ip_address_id",
          "termination_protection"
        ]
      },
      "StaticIPListResponse": {
        "type": "object",
        "description": "StaticIPListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "static_ips": {
            "type": "array",
            "description": "Paginated array",
            "items": {
              "type": "object",
              "properties": {
                "cloud_name": {
                  "type": "string",
                  "description": "Target cloud",
                  "maxLength": 256
                },
                "ip_address": {
                  "type": "string",
                  "description": "IPv4 address"
                },
                "service_name": {
                  "type": "string",
                  "description": "Service name",
                  "minLength": 1,
                  "maxLength": 64
                },
                "state": {
                  "type": "string",
                  "description": "Static IP address state",
                  "enum": [
                    "creating",
                    "created",
                    "available",
                    "assigned",
                    "deleting",
                    "deleted"
                  ]
                },
                "static_ip_address_id": {
                  "type": "string",
                  "description": "Static IP address identifier"
                },
                "termination_protection": {
                  "type": "boolean",
                  "description": "Static IP address is protected against deletion"
                }
              },
              "required": [
                "cloud_name",
                "ip_address",
                "service_name",
                "state",
                "static_ip_address_id",
                "termination_protection"
              ]
            }
          }
        },
        "required": ["static_ips"]
      },
      "OrganizationTicketListResponse": {
        "type": "object",
        "description": "OrganizationTicketListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "tickets": {
            "type": "array",
            "description": "List of tickets",
            "items": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "create_time": {
                  "type": "string",
                  "description": "Created timestamp, ISO 8601 format",
                  "maxLength": 36
                },
                "description": {
                  "type": "string",
                  "description": "Longer description",
                  "minLength": 1,
                  "maxLength": 32000
                },
                "followers": {
                  "type": "array",
                  "description": "Ticket followers",
                  "items": {
                    "type": "object",
                    "properties": {
                      "real_name": {
                        "type": "string",
                        "description": "User real name",
                        "maxLength": 256
                      },
                      "user_email": {
                        "type": "string",
                        "description": "User email address",
                        "maxLength": 319
                      },
                      "user_id": { "type": "string", "description": "User ID" }
                    },
                    "required": ["real_name", "user_email", "user_id"]
                  }
                },
                "following": {
                  "type": "boolean",
                  "description": "Whether the current user is following this ticket"
                },
                "organization_id": {
                  "type": "string",
                  "description": "Organization ID",
                  "maxLength": 36
                },
                "project_name": {
                  "type": "string",
                  "description": "Project name",
                  "maxLength": 63
                },
                "service_name": {
                  "type": "string",
                  "description": "Service name",
                  "minLength": 1,
                  "maxLength": 64
                },
                "severity": {
                  "type": "string",
                  "description": "Severity level",
                  "enum": ["critical", "high", "low"]
                },
                "state": {
                  "type": "string",
                  "description": "Is ticket open or closed",
                  "enum": ["closed", "open"]
                },
                "submitter": {
                  "type": "object",
                  "description": "User information",
                  "properties": {
                    "real_name": {
                      "type": "string",
                      "description": "User real name",
                      "maxLength": 256
                    },
                    "user_email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    },
                    "user_id": { "type": "string", "description": "User ID" }
                  },
                  "required": ["real_name", "user_email", "user_id"]
                },
                "ticket_id": { "type": "string", "description": "Ticket ID" },
                "title": {
                  "type": "string",
                  "description": "Short description",
                  "minLength": 1,
                  "maxLength": 255
                },
                "update_time": {
                  "type": "string",
                  "description": "Update timestamp, ISO 8601 format",
                  "maxLength": 36
                },
                "user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                },
                "user_real_name": {
                  "type": "string",
                  "description": "User real name",
                  "maxLength": 256
                }
              },
              "required": [
                "create_time",
                "description",
                "followers",
                "service_name",
                "severity",
                "state",
                "submitter",
                "ticket_id",
                "title",
                "update_time",
                "user_email",
                "user_real_name"
              ]
            }
          }
        },
        "required": ["tickets"]
      },
      "ProjectTicketCreateResponse": {
        "type": "object",
        "description": "ProjectTicketCreateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "ticket": {
            "type": "object",
            "description": "Support ticket",
            "properties": {
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "create_time": {
                "type": "string",
                "description": "Created timestamp, ISO 8601 format",
                "maxLength": 36
              },
              "description": {
                "type": "string",
                "description": "Longer description",
                "minLength": 1,
                "maxLength": 32000
              },
              "followers": {
                "type": "array",
                "description": "Ticket followers",
                "items": {
                  "type": "object",
                  "properties": {
                    "real_name": {
                      "type": "string",
                      "description": "User real name",
                      "maxLength": 256
                    },
                    "user_email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    },
                    "user_id": { "type": "string", "description": "User ID" }
                  },
                  "required": ["real_name", "user_email", "user_id"]
                }
              },
              "following": {
                "type": "boolean",
                "description": "Whether the current user is following this ticket"
              },
              "organization_id": {
                "type": "string",
                "description": "Organization ID",
                "maxLength": 36
              },
              "project_name": {
                "type": "string",
                "description": "Project name",
                "maxLength": 63
              },
              "service_name": {
                "type": "string",
                "description": "Service name",
                "minLength": 1,
                "maxLength": 64
              },
              "severity": {
                "type": "string",
                "description": "Severity level",
                "enum": ["critical", "high", "low"]
              },
              "state": {
                "type": "string",
                "description": "Is ticket open or closed",
                "enum": ["closed", "open"]
              },
              "submitter": {
                "type": "object",
                "description": "User information",
                "properties": {
                  "real_name": {
                    "type": "string",
                    "description": "User real name",
                    "maxLength": 256
                  },
                  "user_email": {
                    "type": "string",
                    "description": "User email address",
                    "maxLength": 319
                  },
                  "user_id": { "type": "string", "description": "User ID" }
                },
                "required": ["real_name", "user_email", "user_id"]
              },
              "ticket_id": { "type": "string", "description": "Ticket ID" },
              "title": {
                "type": "string",
                "description": "Short description",
                "minLength": 1,
                "maxLength": 255
              },
              "update_time": {
                "type": "string",
                "description": "Update timestamp, ISO 8601 format",
                "maxLength": 36
              },
              "user_email": {
                "type": "string",
                "description": "User email address",
                "maxLength": 319
              },
              "user_real_name": {
                "type": "string",
                "description": "User real name",
                "maxLength": 256
              }
            },
            "required": [
              "create_time",
              "description",
              "followers",
              "project_name",
              "service_name",
              "severity",
              "state",
              "submitter",
              "ticket_id",
              "title",
              "update_time",
              "user_email",
              "user_real_name"
            ]
          }
        },
        "required": ["ticket"]
      },
      "ProjectTicketInviteResponse": {
        "type": "object",
        "description": "ProjectTicketInviteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["message"]
      },
      "ProjectTicketListResponse": {
        "type": "object",
        "description": "ProjectTicketListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "tickets": {
            "type": "array",
            "description": "List of tickets",
            "items": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "create_time": {
                  "type": "string",
                  "description": "Created timestamp, ISO 8601 format",
                  "maxLength": 36
                },
                "description": {
                  "type": "string",
                  "description": "Longer description",
                  "minLength": 1,
                  "maxLength": 32000
                },
                "followers": {
                  "type": "array",
                  "description": "Ticket followers",
                  "items": {
                    "type": "object",
                    "properties": {
                      "real_name": {
                        "type": "string",
                        "description": "User real name",
                        "maxLength": 256
                      },
                      "user_email": {
                        "type": "string",
                        "description": "User email address",
                        "maxLength": 319
                      },
                      "user_id": { "type": "string", "description": "User ID" }
                    },
                    "required": ["real_name", "user_email", "user_id"]
                  }
                },
                "following": {
                  "type": "boolean",
                  "description": "Whether the current user is following this ticket"
                },
                "organization_id": {
                  "type": "string",
                  "description": "Organization ID",
                  "maxLength": 36
                },
                "project_name": {
                  "type": "string",
                  "description": "Project name",
                  "maxLength": 63
                },
                "service_name": {
                  "type": "string",
                  "description": "Service name",
                  "minLength": 1,
                  "maxLength": 64
                },
                "severity": {
                  "type": "string",
                  "description": "Severity level",
                  "enum": ["critical", "high", "low"]
                },
                "state": {
                  "type": "string",
                  "description": "Is ticket open or closed",
                  "enum": ["closed", "open"]
                },
                "submitter": {
                  "type": "object",
                  "description": "User information",
                  "properties": {
                    "real_name": {
                      "type": "string",
                      "description": "User real name",
                      "maxLength": 256
                    },
                    "user_email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    },
                    "user_id": { "type": "string", "description": "User ID" }
                  },
                  "required": ["real_name", "user_email", "user_id"]
                },
                "ticket_id": { "type": "string", "description": "Ticket ID" },
                "title": {
                  "type": "string",
                  "description": "Short description",
                  "minLength": 1,
                  "maxLength": 255
                },
                "update_time": {
                  "type": "string",
                  "description": "Update timestamp, ISO 8601 format",
                  "maxLength": 36
                },
                "user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                },
                "user_real_name": {
                  "type": "string",
                  "description": "User real name",
                  "maxLength": 256
                }
              },
              "required": [
                "create_time",
                "description",
                "followers",
                "project_name",
                "service_name",
                "severity",
                "state",
                "submitter",
                "ticket_id",
                "title",
                "update_time",
                "user_email",
                "user_real_name"
              ]
            }
          }
        },
        "required": ["tickets"]
      },
      "AccessTokenCreateRequestBody": {
        "type": "object",
        "description": "AccessTokenCreateRequestBody",
        "properties": {
          "description": {
            "type": "string",
            "description": "Name / description of an access token",
            "maxLength": 1000
          },
          "extend_when_used": {
            "type": "boolean",
            "description": "Extend token expiration time when token is used. Only applicable if max_age_seconds is specified."
          },
          "ip_allowlist": {
            "type": "array",
            "description": "List of allowed IP ranges",
            "maxItems": 100,
            "items": { "type": "string" }
          },
          "max_age_seconds": {
            "type": "number",
            "description": "Time the token remains valid since creation (or since last use if extend_when_used is true)",
            "minimum": 600,
            "maximum": 315360000
          },
          "scopes": {
            "type": "array",
            "description": "Scopes this token is restricted to, if specified",
            "maxItems": 100,
            "items": { "type": "string" }
          }
        },
        "required": ["description"]
      },
      "AccessTokenCreateResponse": {
        "type": "object",
        "description": "AccessTokenCreateResponse",
        "properties": {
          "create_time": {
            "type": "string",
            "description": "Timestamp when the access token was created"
          },
          "created_manually": {
            "type": "boolean",
            "description": "True for tokens explicitly created via the access_tokens API, false for tokens created via login."
          },
          "currently_active": {
            "type": "boolean",
            "description": "true if API request was made with this access token"
          },
          "description": {
            "type": "string",
            "description": "Name / description of an access token",
            "maxLength": 1000
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "expiry_time": {
            "type": "string",
            "description": "Timestamp when the access token will expire unless extended, if ever"
          },
          "extend_when_used": {
            "type": "boolean",
            "description": "Extend token expiration time when token is used. Only applicable if max_age_seconds is specified."
          },
          "full_token": {
            "type": "string",
            "description": "This full access token can be used to make API calls. This can also be used to update or revoke tokens. Note that when using this token with the update and revoke APIs it must be URL encoded because it may contain /, + and = characters (/ =&gt; %2F, + =&gt; %2B, = =&gt; %3D)."
          },
          "ip_allowlist": {
            "type": "array",
            "description": "List of allowed IP ranges",
            "maxItems": 100,
            "items": { "type": "string" }
          },
          "last_ip": {
            "type": "string",
            "description": "IP address the access token was last used from in case it has ever been used"
          },
          "last_used_time": {
            "type": "string",
            "description": "Timestamp when the access token was last used, if ever"
          },
          "last_user_agent": {
            "type": "string",
            "description": "User agent string of the client that last used the token in case it has ever been used"
          },
          "last_user_agent_human_readable": {
            "type": "string",
            "description": "Human readable user agent string of the client that last used the token in case user agent is known"
          },
          "max_age_seconds": {
            "type": "number",
            "description": "Time the token remains valid since creation (or since last use if extend_when_used is true)",
            "minimum": 600,
            "maximum": 315360000
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "scopes": {
            "type": "array",
            "description": "Scopes this token is restricted to, if specified",
            "maxItems": 100,
            "items": { "type": "string" }
          },
          "token_prefix": {
            "type": "string",
            "description": "First characters of the actual token value. Full value is only exposed after creation. This value is used when updating or revoking tokens. Note that the value may contain /, + and = characters and must be URL encoded when used (/ =&gt; %2F, + =&gt; %2B, = =&gt; %3D)."
          }
        },
        "required": [
          "create_time",
          "created_manually",
          "extend_when_used",
          "full_token",
          "max_age_seconds",
          "token_prefix"
        ]
      },
      "AccessTokenListResponse": {
        "type": "object",
        "description": "AccessTokenListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "tokens": {
            "type": "array",
            "description": "List of access tokens",
            "items": {
              "type": "object",
              "properties": {
                "create_time": {
                  "type": "string",
                  "description": "Timestamp when the access token was created"
                },
                "created_manually": {
                  "type": "boolean",
                  "description": "True for tokens explicitly created via the access_tokens API, false for tokens created via login."
                },
                "currently_active": {
                  "type": "boolean",
                  "description": "true if API request was made with this access token"
                },
                "description": {
                  "type": "string",
                  "description": "Name / description of an access token",
                  "maxLength": 1000
                },
                "expiry_time": {
                  "type": "string",
                  "description": "Timestamp when the access token will expire unless extended, if ever"
                },
                "extend_when_used": {
                  "type": "boolean",
                  "description": "Extend token expiration time when token is used. Only applicable if max_age_seconds is specified."
                },
                "ip_allowlist": {
                  "type": "array",
                  "description": "List of allowed IP ranges",
                  "maxItems": 100,
                  "items": { "type": "string" }
                },
                "last_ip": {
                  "type": "string",
                  "description": "IP address the access token was last used from in case it has ever been used"
                },
                "last_used_time": {
                  "type": "string",
                  "description": "Timestamp when the access token was last used, if ever"
                },
                "last_user_agent": {
                  "type": "string",
                  "description": "User agent string of the client that last used the token in case it has ever been used"
                },
                "last_user_agent_human_readable": {
                  "type": "string",
                  "description": "Human readable user agent string of the client that last used the token in case user agent is known"
                },
                "max_age_seconds": {
                  "type": "number",
                  "description": "Time the token remains valid since creation (or since last use if extend_when_used is true)",
                  "minimum": 600,
                  "maximum": 315360000
                },
                "scopes": {
                  "type": "array",
                  "description": "Scopes this token is restricted to, if specified",
                  "maxItems": 100,
                  "items": { "type": "string" }
                },
                "token_prefix": {
                  "type": "string",
                  "description": "First characters of the actual token value. Full value is only exposed after creation. This value is used when updating or revoking tokens. Note that the value may contain /, + and = characters and must be URL encoded when used (/ =&gt; %2F, + =&gt; %2B, = =&gt; %3D)."
                }
              },
              "required": [
                "create_time",
                "created_manually",
                "extend_when_used",
                "max_age_seconds",
                "token_prefix"
              ]
            }
          }
        },
        "required": ["tokens"]
      },
      "AccessTokenRevokeResponse": {
        "type": "object",
        "description": "AccessTokenRevokeResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "AccessTokenUpdateRequestBody": {
        "type": "object",
        "description": "AccessTokenUpdateRequestBody",
        "properties": {
          "description": {
            "type": "string",
            "description": "Name / description of an access token",
            "maxLength": 1000
          }
        },
        "required": ["description"]
      },
      "AccessTokenUpdateResponse": {
        "type": "object",
        "description": "AccessTokenUpdateResponse",
        "properties": {
          "create_time": {
            "type": "string",
            "description": "Timestamp when the access token was created"
          },
          "created_manually": {
            "type": "boolean",
            "description": "True for tokens explicitly created via the access_tokens API, false for tokens created via login."
          },
          "currently_active": {
            "type": "boolean",
            "description": "true if API request was made with this access token"
          },
          "description": {
            "type": "string",
            "description": "Name / description of an access token",
            "maxLength": 1000
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "expiry_time": {
            "type": "string",
            "description": "Timestamp when the access token will expire unless extended, if ever"
          },
          "extend_when_used": {
            "type": "boolean",
            "description": "Extend token expiration time when token is used. Only applicable if max_age_seconds is specified."
          },
          "ip_allowlist": {
            "type": "array",
            "description": "List of allowed IP ranges",
            "maxItems": 100,
            "items": { "type": "string" }
          },
          "last_ip": {
            "type": "string",
            "description": "IP address the access token was last used from in case it has ever been used"
          },
          "last_used_time": {
            "type": "string",
            "description": "Timestamp when the access token was last used, if ever"
          },
          "last_user_agent": {
            "type": "string",
            "description": "User agent string of the client that last used the token in case it has ever been used"
          },
          "last_user_agent_human_readable": {
            "type": "string",
            "description": "Human readable user agent string of the client that last used the token in case user agent is known"
          },
          "max_age_seconds": {
            "type": "number",
            "description": "Time the token remains valid since creation (or since last use if extend_when_used is true)",
            "minimum": 600,
            "maximum": 315360000
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "scopes": {
            "type": "array",
            "description": "Scopes this token is restricted to, if specified",
            "maxItems": 100,
            "items": { "type": "string" }
          },
          "token_prefix": {
            "type": "string",
            "description": "First characters of the actual token value. Full value is only exposed after creation. This value is used when updating or revoking tokens. Note that the value may contain /, + and = characters and must be URL encoded when used (/ =&gt; %2F, + =&gt; %2B, = =&gt; %3D)."
          }
        },
        "required": [
          "create_time",
          "extend_when_used",
          "max_age_seconds",
          "token_prefix"
        ]
      },
      "CheckPasswordStrengthExistingUserRequestBody": {
        "type": "object",
        "description": "CheckPasswordStrengthExistingUserRequestBody",
        "properties": {
          "new_password": {
            "type": "string",
            "description": "New password",
            "maxLength": 256
          },
          "old_password": {
            "type": "string",
            "description": "User password",
            "maxLength": 256
          }
        },
        "required": ["new_password", "old_password"]
      },
      "CheckPasswordStrengthExistingUserResponse": {
        "type": "object",
        "description": "CheckPasswordStrengthExistingUserResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "password_strength": {
            "type": "object",
            "description": "Password strength",
            "properties": {
              "is_acceptable": {
                "type": "boolean",
                "description": "True if the password is acceptable"
              },
              "message": {
                "type": "string",
                "description": "Password strength message"
              },
              "score": {
                "type": "integer",
                "description": "Password strength score",
                "minimum": 0,
                "maximum": 4
              }
            },
            "required": ["message", "score"]
          }
        },
        "required": ["password_strength"]
      },
      "CheckPasswordStrengthNewUserRequestBody": {
        "type": "object",
        "description": "CheckPasswordStrengthNewUserRequestBody",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "maxLength": 319
          },
          "password": {
            "type": "string",
            "description": "New password",
            "maxLength": 256
          },
          "real_name": {
            "type": "string",
            "description": "User real name",
            "maxLength": 256
          }
        },
        "required": ["password"]
      },
      "CheckPasswordStrengthNewUserResponse": {
        "type": "object",
        "description": "CheckPasswordStrengthNewUserResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "password_strength": {
            "type": "object",
            "description": "Password strength",
            "properties": {
              "is_acceptable": {
                "type": "boolean",
                "description": "True if the password is acceptable"
              },
              "message": {
                "type": "string",
                "description": "Password strength message"
              },
              "score": {
                "type": "integer",
                "description": "Password strength score",
                "minimum": 0,
                "maximum": 4
              }
            },
            "required": ["message", "score"]
          }
        },
        "required": ["password_strength"]
      },
      "OrganizationMemberGroupsListResponse": {
        "type": "object",
        "description": "OrganizationMemberGroupsListResponse",
        "properties": {
          "user_groups": {
            "type": "array",
            "description": "User Groups",
            "items": {
              "type": "object",
              "properties": {
                "create_time": {
                  "type": "string",
                  "description": "User group creation time",
                  "maxLength": 36
                },
                "description": {
                  "type": "string",
                  "description": "Description",
                  "maxLength": 4096
                },
                "managed_by_scim": {
                  "type": "boolean",
                  "description": "Managed By Scim"
                },
                "update_time": {
                  "type": "string",
                  "description": "User group last update time",
                  "maxLength": 36
                },
                "user_group_id": {
                  "type": "string",
                  "description": "User Group ID",
                  "maxLength": 36
                },
                "user_group_name": {
                  "type": "string",
                  "description": "User Group Name",
                  "maxLength": 128
                }
              },
              "required": [
                "create_time",
                "description",
                "managed_by_scim",
                "update_time",
                "user_group_id",
                "user_group_name"
              ]
            }
          }
        },
        "required": ["user_groups"]
      },
      "OrganizationMemberPermissionsListResponse": {
        "type": "object",
        "description": "OrganizationMemberPermissionsListResponse",
        "properties": {
          "permissions": {
            "type": "array",
            "description": "Organization member permissions",
            "items": {
              "type": "object",
              "properties": {
                "permissions": {
                  "type": "array",
                  "description": "List of roles",
                  "items": { "type": "string" }
                },
                "resource_id": {
                  "type": "string",
                  "description": "Resource Identifier"
                },
                "resource_type": {
                  "type": "string",
                  "description": "Resource type",
                  "enum": ["project", "organization", "organization_unit"]
                }
              },
              "required": ["permissions", "resource_id", "resource_type"]
            }
          }
        },
        "required": ["permissions"]
      },
      "OrganizationUserAuthenticationMethodsListResponse": {
        "type": "object",
        "description": "OrganizationUserAuthenticationMethodsListResponse",
        "properties": {
          "authentication_methods": {
            "type": "array",
            "description": "List of authentication methods for the organization user",
            "items": {
              "type": "object",
              "properties": {
                "is_enabled_2fa": {
                  "type": "boolean",
                  "description": "Verifies if 2FA is enabled for the user"
                },
                "last_used_time": {
                  "type": "string",
                  "description": "Last activity time with the authentication method",
                  "maxLength": 36
                },
                "local_provider_id": {
                  "type": "string",
                  "description": "Local authentication method provider resource ID"
                },
                "method_id": {
                  "type": "string",
                  "description": "User authentication method ID"
                },
                "name": {
                  "type": "string",
                  "description": "Name of the organization authentication method"
                },
                "organization_id": {
                  "type": "string",
                  "description": "Organization ID"
                },
                "remote_provider_id": {
                  "type": "string",
                  "description": "Remote authentication method provider ID"
                },
                "type": {
                  "type": "string",
                  "description": "Type of the organization authentication method"
                },
                "user_email": {
                  "type": "string",
                  "description": "User's email address for the authentication method"
                },
                "user_id": { "type": "string", "description": "User ID" }
              },
              "required": ["remote_provider_id"]
            }
          }
        },
        "required": ["authentication_methods"]
      },
      "OrganizationUserGetResponse": {
        "type": "object",
        "description": "OrganizationUserGetResponse",
        "properties": {
          "is_super_admin": {
            "type": "boolean",
            "description": "Super admin state of the organization user"
          },
          "join_time": {
            "type": "string",
            "description": "Join time",
            "maxLength": 36
          },
          "last_activity_time": {
            "type": "string",
            "description": "Last activity time",
            "maxLength": 36
          },
          "user_id": { "type": "string", "description": "User ID" },
          "user_info": {
            "type": "object",
            "description": "OrganizationUserInfo",
            "properties": {
              "city": { "type": "string", "description": "City" },
              "country": { "type": "string", "description": "Country" },
              "create_time": {
                "type": "string",
                "description": "Creation time",
                "maxLength": 36
              },
              "department": { "type": "string", "description": "Department" },
              "is_application_user": {
                "type": "boolean",
                "description": "Is Application User"
              },
              "job_title": { "type": "string", "description": "Job Title" },
              "managed_by_scim": {
                "type": "boolean",
                "description": "Managed By Scim"
              },
              "managing_organization_id": {
                "type": "string",
                "description": "Managing Organization ID",
                "maxLength": 36
              },
              "real_name": {
                "type": "string",
                "description": "Real Name",
                "maxLength": 256
              },
              "state": { "type": "string", "description": "State" },
              "user_email": { "type": "string", "description": "User Email" }
            },
            "required": [
              "create_time",
              "is_application_user",
              "managed_by_scim",
              "real_name",
              "state",
              "user_email"
            ]
          }
        },
        "required": [
          "is_super_admin",
          "join_time",
          "last_activity_time",
          "user_id",
          "user_info"
        ]
      },
      "OrganizationUserListResponse": {
        "type": "object",
        "description": "OrganizationUserListResponse",
        "properties": {
          "users": {
            "type": "array",
            "description": "List of users of the organization",
            "items": {
              "type": "object",
              "properties": {
                "is_super_admin": {
                  "type": "boolean",
                  "description": "Super admin state of the organization user"
                },
                "join_time": {
                  "type": "string",
                  "description": "Join time",
                  "maxLength": 36
                },
                "last_activity_time": {
                  "type": "string",
                  "description": "Last activity time",
                  "maxLength": 36
                },
                "user_id": { "type": "string", "description": "User ID" },
                "user_info": {
                  "type": "object",
                  "description": "OrganizationUserInfo",
                  "properties": {
                    "city": { "type": "string", "description": "City" },
                    "country": { "type": "string", "description": "Country" },
                    "create_time": {
                      "type": "string",
                      "description": "Creation time",
                      "maxLength": 36
                    },
                    "department": {
                      "type": "string",
                      "description": "Department"
                    },
                    "is_application_user": {
                      "type": "boolean",
                      "description": "Is Application User"
                    },
                    "job_title": {
                      "type": "string",
                      "description": "Job Title"
                    },
                    "managed_by_scim": {
                      "type": "boolean",
                      "description": "Managed By Scim"
                    },
                    "managing_organization_id": {
                      "type": "string",
                      "description": "Managing Organization ID",
                      "maxLength": 36
                    },
                    "real_name": {
                      "type": "string",
                      "description": "Real Name",
                      "maxLength": 256
                    },
                    "state": { "type": "string", "description": "State" },
                    "user_email": {
                      "type": "string",
                      "description": "User Email"
                    }
                  },
                  "required": [
                    "create_time",
                    "is_application_user",
                    "managed_by_scim",
                    "real_name",
                    "state",
                    "user_email"
                  ]
                }
              },
              "required": [
                "is_super_admin",
                "join_time",
                "last_activity_time",
                "user_id",
                "user_info"
              ]
            }
          }
        },
        "required": ["users"]
      },
      "OrganizationUserTokensListResponse": {
        "type": "object",
        "description": "OrganizationUserTokensListResponse",
        "properties": {
          "tokens": {
            "type": "array",
            "description": "List of user tokens accessible to the organization",
            "items": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string",
                  "description": "Description"
                },
                "ip_allowlist": {
                  "type": "array",
                  "description": "List of IP addresses that are allowed to use the token",
                  "items": { "type": "string" }
                },
                "last_ip": { "type": "string", "description": "Last-used IP" },
                "last_used_time": {
                  "type": "string",
                  "description": "Last-used time",
                  "maxLength": 36
                },
                "last_user_agent": {
                  "type": "string",
                  "description": "Last-used user agent"
                },
                "token_prefix": {
                  "type": "string",
                  "description": "Token prefix"
                }
              },
              "required": [
                "description",
                "ip_allowlist",
                "last_ip",
                "last_used_time",
                "last_user_agent",
                "token_prefix"
              ]
            }
          }
        },
        "required": ["tokens"]
      },
      "OrganizationUserUpdateRequestBody": {
        "type": "object",
        "description": "OrganizationUserUpdateRequestBody",
        "properties": {
          "city": { "type": "string", "description": "City" },
          "country": { "type": "string", "description": "Country" },
          "department": { "type": "string", "description": "Department" },
          "is_super_admin": {
            "type": "boolean",
            "description": "Alters super admin state of the organization user"
          },
          "job_title": { "type": "string", "description": "Job Title" },
          "real_name": {
            "type": "string",
            "description": "Real Name",
            "maxLength": 256
          },
          "state": {
            "type": "string",
            "description": "State of the user in the organization",
            "enum": ["active", "deactivated", "deleted"]
          }
        }
      },
      "OrganizationUserUpdateResponse": {
        "type": "object",
        "description": "OrganizationUserUpdateResponse",
        "properties": {
          "is_super_admin": {
            "type": "boolean",
            "description": "Super admin state of the organization user"
          },
          "join_time": {
            "type": "string",
            "description": "Join time",
            "maxLength": 36
          },
          "last_activity_time": {
            "type": "string",
            "description": "Last activity time",
            "maxLength": 36
          },
          "user_id": { "type": "string", "description": "User ID" },
          "user_info": {
            "type": "object",
            "description": "OrganizationUserInfo",
            "properties": {
              "city": { "type": "string", "description": "City" },
              "country": { "type": "string", "description": "Country" },
              "create_time": {
                "type": "string",
                "description": "Creation time",
                "maxLength": 36
              },
              "department": { "type": "string", "description": "Department" },
              "is_application_user": {
                "type": "boolean",
                "description": "Is Application User"
              },
              "job_title": { "type": "string", "description": "Job Title" },
              "managed_by_scim": {
                "type": "boolean",
                "description": "Managed By Scim"
              },
              "managing_organization_id": {
                "type": "string",
                "description": "Managing Organization ID",
                "maxLength": 36
              },
              "real_name": {
                "type": "string",
                "description": "Real Name",
                "maxLength": 256
              },
              "state": { "type": "string", "description": "State" },
              "user_email": { "type": "string", "description": "User Email" }
            },
            "required": [
              "create_time",
              "is_application_user",
              "managed_by_scim",
              "real_name",
              "state",
              "user_email"
            ]
          }
        },
        "required": [
          "is_super_admin",
          "join_time",
          "last_activity_time",
          "user_id",
          "user_info"
        ]
      },
      "TwoFactorAuthConfigureRequestBody": {
        "type": "object",
        "description": "TwoFactorAuthConfigureRequestBody",
        "properties": {
          "method": {
            "type": "string",
            "description": "Two-factor authentication method being used, if any",
            "maxLength": 32
          },
          "password": {
            "type": "string",
            "description": "Current password",
            "maxLength": 256
          }
        },
        "required": ["method", "password"]
      },
      "TwoFactorAuthConfigureResponse": {
        "type": "object",
        "description": "TwoFactorAuthConfigureResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "method": {
            "type": "string",
            "description": "Two-factor authentication method being used, if any",
            "maxLength": 32
          },
          "qrcode": {
            "type": "string",
            "description": "QR code describing the TOTP as a base64-encoded PNG"
          },
          "uri": {
            "type": "string",
            "description": "URI describing the TOTP",
            "maxLength": 2048
          }
        },
        "required": ["method"]
      },
      "TwoFactorAuthConfigureOTPRequestBody": {
        "type": "object",
        "description": "TwoFactorAuthConfigureOTPRequestBody",
        "properties": {
          "otp": {
            "type": "string",
            "description": "One-time password",
            "maxLength": 6
          },
          "password": {
            "type": "string",
            "description": "Current password",
            "maxLength": 256
          },
          "uri": {
            "type": "string",
            "description": "URI describing the TOTP",
            "maxLength": 2048
          }
        },
        "required": ["otp", "password", "uri"]
      },
      "TwoFactorAuthConfigureOTPResponse": {
        "type": "object",
        "description": "TwoFactorAuthConfigureOTPResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "method": {
            "type": "string",
            "description": "Two-factor authentication method being used, if any",
            "maxLength": 32
          },
          "token": {
            "type": "string",
            "description": "New API session authentication token when configuration is complete"
          }
        },
        "required": ["method", "token"]
      },
      "UserAccountInvitesAcceptRequestBody": {
        "type": "object",
        "description": "UserAccountInvitesAcceptRequestBody",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "Account ID",
            "maxLength": 36
          },
          "team_id": {
            "type": "string",
            "description": "Team ID",
            "maxLength": 32
          }
        },
        "required": ["account_id"]
      },
      "UserAccountInvitesAcceptResponse": {
        "type": "object",
        "description": "UserAccountInvitesAcceptResponse",
        "properties": {
          "account_invites": {
            "type": "array",
            "description": "List of invites",
            "items": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "account_name": {
                  "type": "string",
                  "description": "Account name",
                  "maxLength": 128
                },
                "create_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "invited_by_user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                },
                "team_id": {
                  "type": "string",
                  "description": "Team ID",
                  "maxLength": 32
                },
                "team_name": {
                  "type": "string",
                  "description": "Team name",
                  "maxLength": 128
                },
                "user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                }
              },
              "required": [
                "account_id",
                "account_name",
                "create_time",
                "invited_by_user_email",
                "team_id",
                "team_name",
                "user_email"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["account_invites"]
      },
      "UserAccountInvitesListResponse": {
        "type": "object",
        "description": "UserAccountInvitesListResponse",
        "properties": {
          "account_invites": {
            "type": "array",
            "description": "List of invites",
            "items": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "account_name": {
                  "type": "string",
                  "description": "Account name",
                  "maxLength": 128
                },
                "create_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "invited_by_user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                },
                "team_id": {
                  "type": "string",
                  "description": "Team ID",
                  "maxLength": 32
                },
                "team_name": {
                  "type": "string",
                  "description": "Team name",
                  "maxLength": 128
                },
                "user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                }
              },
              "required": [
                "account_id",
                "account_name",
                "create_time",
                "invited_by_user_email",
                "team_id",
                "team_name",
                "user_email"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["account_invites"]
      },
      "UserAccountInvitesRejectRequestBody": {
        "type": "object",
        "description": "UserAccountInvitesRejectRequestBody",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "Account ID",
            "maxLength": 36
          },
          "team_id": {
            "type": "string",
            "description": "Team ID",
            "maxLength": 32
          }
        },
        "required": ["account_id", "team_id"]
      },
      "UserAccountInvitesRejectResponse": {
        "type": "object",
        "description": "UserAccountInvitesRejectResponse",
        "properties": {
          "account_invites": {
            "type": "array",
            "description": "List of invites",
            "items": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "account_name": {
                  "type": "string",
                  "description": "Account name",
                  "maxLength": 128
                },
                "create_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "invited_by_user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                },
                "team_id": {
                  "type": "string",
                  "description": "Team ID",
                  "maxLength": 32
                },
                "team_name": {
                  "type": "string",
                  "description": "Team name",
                  "maxLength": 128
                },
                "user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                }
              },
              "required": [
                "account_id",
                "account_name",
                "create_time",
                "invited_by_user_email",
                "team_id",
                "team_name",
                "user_email"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["account_invites"]
      },
      "UserAuthRequestBody": {
        "type": "object",
        "description": "UserAuthRequestBody",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "maxLength": 319
          },
          "otp": {
            "type": "string",
            "description": "One-time password",
            "maxLength": 6
          },
          "password": {
            "type": "string",
            "description": "User password",
            "maxLength": 256
          }
        },
        "required": ["email", "password"]
      },
      "UserAuthResponse": {
        "type": "object",
        "description": "UserAuthResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "return_url": { "type": "string", "description": "Return URL" },
          "state": { "type": "string", "description": "User account state" },
          "token": {
            "type": "string",
            "description": "API session authentication token"
          },
          "user_email": {
            "type": "string",
            "description": "User email address",
            "maxLength": 319
          }
        },
        "required": ["state", "token", "user_email"]
      },
      "UserAuthLoginOptionsRequestBody": {
        "type": "object",
        "description": "UserAuthLoginOptionsRequestBody",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "maxLength": 319
          }
        }
      },
      "UserAuthLoginOptionsResponse": {
        "type": "object",
        "description": "UserAuthLoginOptionsResponse",
        "properties": {
          "None": {
            "type": "array",
            "description": "List of available login methods",
            "items": { "type": "object", "properties": {} }
          },
          "action": {
            "type": "string",
            "description": "Action",
            "enum": [
              "azure_oauth",
              "github_oauth",
              "google_oauth",
              "hasura_oauth",
              "password",
              "saml",
              "signup"
            ]
          },
          "method": {
            "type": "string",
            "description": "HTTP method used for redirecting",
            "enum": ["POST", "GET"]
          },
          "name": { "type": "string", "description": "Human readable name" },
          "redirect_url": {
            "type": "string",
            "description": "Redirect URL for signing in"
          }
        },
        "required": ["action"]
      },
      "UserAuthenticationMethodDeleteResponse": {
        "type": "object",
        "description": "UserAuthenticationMethodDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "UserAuthenticationMethodsListResponse": {
        "type": "object",
        "description": "UserAuthenticationMethodsListResponse",
        "properties": {
          "authentication_methods": {
            "type": "array",
            "description": "List of linked authentication methods",
            "items": {
              "type": "object",
              "properties": {
                "authentication_method_account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "create_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "currently_active": {
                  "type": "boolean",
                  "description": "true if API was accessed with this authentication method"
                },
                "delete_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "last_used_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "method_id": {
                  "type": "string",
                  "description": "Unique ID for authentication method"
                },
                "name": {
                  "type": "string",
                  "description": "Authentication method name",
                  "maxLength": 128
                },
                "public_remote_identity": {
                  "type": "string",
                  "description": "Identity on remote provider, if available. May be email address, but not necessarily."
                },
                "remote_provider_id": {
                  "type": "string",
                  "description": "Provider ID"
                },
                "state": {
                  "type": "string",
                  "description": "State for authentication method",
                  "enum": ["active", "deleted"]
                },
                "update_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                }
              },
              "required": [
                "authentication_method_account_id",
                "create_time",
                "currently_active",
                "delete_time",
                "last_used_time",
                "method_id",
                "public_remote_identity",
                "remote_provider_id",
                "state",
                "update_time",
                "user_email"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["authentication_methods"]
      },
      "UserCreateRequestBody": {
        "type": "object",
        "description": "UserCreateRequestBody",
        "properties": {
          "company": {
            "type": "string",
            "description": "Name of a company",
            "maxLength": 128
          },
          "country_code": {
            "type": "string",
            "description": "Two letter country code for country",
            "maxLength": 2
          },
          "credit_code": {
            "type": "string",
            "description": "Credit code",
            "maxLength": 1024
          },
          "email": {
            "type": "string",
            "description": "User email address",
            "maxLength": 319
          },
          "email_communication_categories": {
            "type": "array",
            "description": "Categories of email communication enabled for user during signup",
            "maxItems": 3,
            "items": { "type": "string" }
          },
          "origin": {
            "type": "string",
            "description": "Origin of the user",
            "maxLength": 1024
          },
          "password": {
            "type": "string",
            "description": "User password",
            "maxLength": 256
          },
          "real_name": {
            "type": "string",
            "description": "User real name",
            "maxLength": 256
          },
          "state": {
            "type": "string",
            "description": "Address state or province",
            "maxLength": 128
          },
          "token": {
            "type": "string",
            "description": "Signup token for single sign-on linking",
            "maxLength": 4096
          }
        },
        "required": ["email", "real_name"]
      },
      "UserCreateResponse": {
        "type": "object",
        "description": "UserCreateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "state": { "type": "string", "description": "User account state" },
          "token": {
            "type": "string",
            "description": "API session authentication token"
          },
          "user": {
            "type": "object",
            "description": "User information",
            "properties": {
              "auth": {
                "type": "array",
                "description": "List of user's required authentication methods",
                "items": { "type": "string" }
              },
              "city": {
                "type": "string",
                "description": "City",
                "maxLength": 256
              },
              "country": {
                "type": "string",
                "description": "Country code ISO 3166-1 alpha-2",
                "maxLength": 256
              },
              "create_time": {
                "type": "string",
                "description": "User registration time",
                "maxLength": 36
              },
              "department": {
                "type": "string",
                "description": "Job department",
                "maxLength": 256
              },
              "features": {
                "type": "object",
                "description": "Feature flags",
                "properties": {}
              },
              "invitations": {
                "type": "array",
                "description": "List of pending invitations",
                "items": {
                  "type": "object",
                  "properties": {
                    "invite_code": {
                      "type": "string",
                      "description": "Code for accepting the invitation"
                    },
                    "invite_time": {
                      "type": "string",
                      "description": "Timestamp in ISO 8601 format, always in UTC",
                      "maxLength": 36
                    },
                    "inviting_user_email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    },
                    "project_name": {
                      "type": "string",
                      "description": "Project name",
                      "maxLength": 63
                    }
                  },
                  "required": [
                    "invite_code",
                    "invite_time",
                    "inviting_user_email",
                    "project_name"
                  ]
                }
              },
              "job_title": {
                "type": "string",
                "description": "Job title",
                "maxLength": 256
              },
              "managed_by_scim": {
                "type": "boolean",
                "description": "User management status"
              },
              "managing_organization_id": {
                "type": "string",
                "description": "Organization ID",
                "maxLength": 36
              },
              "project_membership": {
                "type": "object",
                "description": "Project membership and type of membership",
                "properties": {
                  "ANY": {
                    "type": "string",
                    "description": "Project member type",
                    "enum": [
                      "admin",
                      "developer",
                      "operator",
                      "organization:app_users:write",
                      "organization:audit_logs:read",
                      "organization:domains:write",
                      "organization:groups:write",
                      "organization:idps:write",
                      "organization:networking:read",
                      "organization:networking:write",
                      "organization:projects:write",
                      "organization:users:write",
                      "project:audit_logs:read",
                      "project:integrations:read",
                      "project:integrations:write",
                      "project:networking:read",
                      "project:networking:write",
                      "project:permissions:read",
                      "project:services:read",
                      "project:services:write",
                      "read_only",
                      "role:organization:admin",
                      "role:services:maintenance",
                      "role:services:recover",
                      "service:configuration:write",
                      "service:data:write",
                      "service:logs:read",
                      "service:secrets:read",
                      "service:users:write"
                    ]
                  }
                }
              },
              "project_memberships": {
                "type": "object",
                "description": "List of project membership and type of membership",
                "properties": {
                  "ANY": {
                    "type": "array",
                    "description": "List of project member type",
                    "items": { "type": "string" }
                  }
                }
              },
              "projects": {
                "type": "array",
                "description": "List of projects the user is a member of",
                "items": { "type": "string" }
              },
              "real_name": {
                "type": "string",
                "description": "User real name",
                "maxLength": 256
              },
              "state": {
                "type": "string",
                "description": "User account state"
              },
              "token_validity_begin": {
                "type": "string",
                "description": "Earliest valid authentication token timestamp",
                "maxLength": 36
              },
              "user": {
                "type": "string",
                "description": "User email address",
                "maxLength": 319
              },
              "user_id": { "type": "string", "description": "User ID" }
            },
            "required": [
              "auth",
              "invitations",
              "project_membership",
              "project_memberships",
              "projects",
              "real_name",
              "state",
              "user",
              "user_id"
            ]
          },
          "user_email": {
            "type": "string",
            "description": "User email address",
            "maxLength": 319
          }
        },
        "required": ["state", "token", "user", "user_email"]
      },
      "UserExpireTokensResponse": {
        "type": "object",
        "description": "UserExpireTokensResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "UserInfoResponse": {
        "type": "object",
        "description": "UserInfoResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "user": {
            "type": "object",
            "description": "User information",
            "properties": {
              "auth": {
                "type": "array",
                "description": "List of user's required authentication methods",
                "items": { "type": "string" }
              },
              "city": {
                "type": "string",
                "description": "City",
                "maxLength": 256
              },
              "country": {
                "type": "string",
                "description": "Country code ISO 3166-1 alpha-2",
                "maxLength": 256
              },
              "create_time": {
                "type": "string",
                "description": "User registration time",
                "maxLength": 36
              },
              "department": {
                "type": "string",
                "description": "Job department",
                "maxLength": 256
              },
              "features": {
                "type": "object",
                "description": "Feature flags",
                "properties": {}
              },
              "invitations": {
                "type": "array",
                "description": "List of pending invitations",
                "items": {
                  "type": "object",
                  "properties": {
                    "invite_code": {
                      "type": "string",
                      "description": "Code for accepting the invitation"
                    },
                    "invite_time": {
                      "type": "string",
                      "description": "Timestamp in ISO 8601 format, always in UTC",
                      "maxLength": 36
                    },
                    "inviting_user_email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    },
                    "project_name": {
                      "type": "string",
                      "description": "Project name",
                      "maxLength": 63
                    }
                  },
                  "required": [
                    "invite_code",
                    "invite_time",
                    "inviting_user_email",
                    "project_name"
                  ]
                }
              },
              "job_title": {
                "type": "string",
                "description": "Job title",
                "maxLength": 256
              },
              "managed_by_scim": {
                "type": "boolean",
                "description": "User management status"
              },
              "managing_organization_id": {
                "type": "string",
                "description": "Organization ID",
                "maxLength": 36
              },
              "project_membership": {
                "type": "object",
                "description": "Project membership and type of membership",
                "properties": {
                  "ANY": {
                    "type": "string",
                    "description": "Project member type",
                    "enum": [
                      "admin",
                      "developer",
                      "operator",
                      "organization:app_users:write",
                      "organization:audit_logs:read",
                      "organization:domains:write",
                      "organization:groups:write",
                      "organization:idps:write",
                      "organization:networking:read",
                      "organization:networking:write",
                      "organization:projects:write",
                      "organization:users:write",
                      "project:audit_logs:read",
                      "project:integrations:read",
                      "project:integrations:write",
                      "project:networking:read",
                      "project:networking:write",
                      "project:permissions:read",
                      "project:services:read",
                      "project:services:write",
                      "read_only",
                      "role:organization:admin",
                      "role:services:maintenance",
                      "role:services:recover",
                      "service:configuration:write",
                      "service:data:write",
                      "service:logs:read",
                      "service:secrets:read",
                      "service:users:write"
                    ]
                  }
                }
              },
              "project_memberships": {
                "type": "object",
                "description": "List of project membership and type of membership",
                "properties": {
                  "ANY": {
                    "type": "array",
                    "description": "List of project member type",
                    "items": { "type": "string" }
                  }
                }
              },
              "projects": {
                "type": "array",
                "description": "List of projects the user is a member of",
                "items": { "type": "string" }
              },
              "real_name": {
                "type": "string",
                "description": "User real name",
                "maxLength": 256
              },
              "state": {
                "type": "string",
                "description": "User account state"
              },
              "token_validity_begin": {
                "type": "string",
                "description": "Earliest valid authentication token timestamp",
                "maxLength": 36
              },
              "user": {
                "type": "string",
                "description": "User email address",
                "maxLength": 319
              },
              "user_id": { "type": "string", "description": "User ID" }
            },
            "required": [
              "auth",
              "invitations",
              "project_membership",
              "project_memberships",
              "projects",
              "real_name",
              "state",
              "user",
              "user_id"
            ]
          }
        },
        "required": ["user"]
      },
      "UserLogoutResponse": {
        "type": "object",
        "description": "UserLogoutResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "UserPasswordChangeRequestBody": {
        "type": "object",
        "description": "UserPasswordChangeRequestBody",
        "properties": {
          "new_password": {
            "type": "string",
            "description": "New password",
            "maxLength": 256
          },
          "password": {
            "type": "string",
            "description": "Current password",
            "maxLength": 256
          }
        },
        "required": ["new_password", "password"]
      },
      "UserPasswordChangeResponse": {
        "type": "object",
        "description": "UserPasswordChangeResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "token": {
            "type": "string",
            "description": "API session authentication token"
          }
        },
        "required": ["token"]
      },
      "UserPasswordResetRequestBody": {
        "type": "object",
        "description": "UserPasswordResetRequestBody",
        "properties": {
          "new_password": {
            "type": "string",
            "description": "New password",
            "maxLength": 256
          }
        },
        "required": ["new_password"]
      },
      "UserPasswordResetResponse": {
        "type": "object",
        "description": "UserPasswordResetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "UserPasswordResetRequestRequestBody": {
        "type": "object",
        "description": "UserPasswordResetRequestRequestBody",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "maxLength": 319
          }
        },
        "required": ["email"]
      },
      "UserPasswordResetRequestResponse": {
        "type": "object",
        "description": "UserPasswordResetRequestResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "UserUpdateRequestBody": {
        "type": "object",
        "description": "UserUpdateRequestBody",
        "properties": {
          "city": { "type": "string", "description": "City", "maxLength": 256 },
          "country": {
            "type": "string",
            "description": "Country code ISO 3166-1 alpha-2",
            "maxLength": 256
          },
          "department": {
            "type": "string",
            "description": "Job department",
            "maxLength": 256
          },
          "job_title": {
            "type": "string",
            "description": "Job title",
            "maxLength": 256
          },
          "real_name": {
            "type": "string",
            "description": "User real name",
            "maxLength": 256
          }
        },
        "required": ["real_name"]
      },
      "UserUpdateResponse": {
        "type": "object",
        "description": "UserUpdateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "user": {
            "type": "object",
            "description": "User information",
            "properties": {
              "auth": {
                "type": "array",
                "description": "List of user's required authentication methods",
                "items": { "type": "string" }
              },
              "city": {
                "type": "string",
                "description": "City",
                "maxLength": 256
              },
              "country": {
                "type": "string",
                "description": "Country code ISO 3166-1 alpha-2",
                "maxLength": 256
              },
              "create_time": {
                "type": "string",
                "description": "User registration time",
                "maxLength": 36
              },
              "department": {
                "type": "string",
                "description": "Job department",
                "maxLength": 256
              },
              "features": {
                "type": "object",
                "description": "Feature flags",
                "properties": {}
              },
              "invitations": {
                "type": "array",
                "description": "List of pending invitations",
                "items": {
                  "type": "object",
                  "properties": {
                    "invite_code": {
                      "type": "string",
                      "description": "Code for accepting the invitation"
                    },
                    "invite_time": {
                      "type": "string",
                      "description": "Timestamp in ISO 8601 format, always in UTC",
                      "maxLength": 36
                    },
                    "inviting_user_email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    },
                    "project_name": {
                      "type": "string",
                      "description": "Project name",
                      "maxLength": 63
                    }
                  },
                  "required": [
                    "invite_code",
                    "invite_time",
                    "inviting_user_email",
                    "project_name"
                  ]
                }
              },
              "job_title": {
                "type": "string",
                "description": "Job title",
                "maxLength": 256
              },
              "managed_by_scim": {
                "type": "boolean",
                "description": "User management status"
              },
              "managing_organization_id": {
                "type": "string",
                "description": "Organization ID",
                "maxLength": 36
              },
              "project_membership": {
                "type": "object",
                "description": "Project membership and type of membership",
                "properties": {
                  "ANY": {
                    "type": "string",
                    "description": "Project member type",
                    "enum": [
                      "admin",
                      "developer",
                      "operator",
                      "organization:app_users:write",
                      "organization:audit_logs:read",
                      "organization:domains:write",
                      "organization:groups:write",
                      "organization:idps:write",
                      "organization:networking:read",
                      "organization:networking:write",
                      "organization:projects:write",
                      "organization:users:write",
                      "project:audit_logs:read",
                      "project:integrations:read",
                      "project:integrations:write",
                      "project:networking:read",
                      "project:networking:write",
                      "project:permissions:read",
                      "project:services:read",
                      "project:services:write",
                      "read_only",
                      "role:organization:admin",
                      "role:services:maintenance",
                      "role:services:recover",
                      "service:configuration:write",
                      "service:data:write",
                      "service:logs:read",
                      "service:secrets:read",
                      "service:users:write"
                    ]
                  }
                }
              },
              "project_memberships": {
                "type": "object",
                "description": "List of project membership and type of membership",
                "properties": {
                  "ANY": {
                    "type": "array",
                    "description": "List of project member type",
                    "items": { "type": "string" }
                  }
                }
              },
              "projects": {
                "type": "array",
                "description": "List of projects the user is a member of",
                "items": { "type": "string" }
              },
              "real_name": {
                "type": "string",
                "description": "User real name",
                "maxLength": 256
              },
              "state": {
                "type": "string",
                "description": "User account state"
              },
              "token_validity_begin": {
                "type": "string",
                "description": "Earliest valid authentication token timestamp",
                "maxLength": 36
              },
              "user": {
                "type": "string",
                "description": "User email address",
                "maxLength": 319
              },
              "user_id": { "type": "string", "description": "User ID" }
            },
            "required": [
              "auth",
              "invitations",
              "project_membership",
              "project_memberships",
              "projects",
              "real_name",
              "state",
              "user",
              "user_id"
            ]
          }
        },
        "required": ["user"]
      },
      "UserVerifyEmailResponse": {
        "type": "object",
        "description": "UserVerifyEmailResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "invite_details": {
            "type": "object",
            "description": "Details of verified invite",
            "properties": {
              "user_email": {
                "type": "string",
                "description": "User email address",
                "maxLength": 319
              }
            },
            "required": ["user_email"]
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": ["invite_details"]
      },
      "ValidateCreditCodeResponse": {
        "type": "object",
        "description": "ValidateCreditCodeResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ValidateReferralCodeResponse": {
        "type": "object",
        "description": "ValidateReferralCodeResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": ["message", "status"]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      }
    },
    "responses": {},
    "requestBodies": {},
    "parameters": {
      "account_id": {
        "in": "path",
        "name": "account_id",
        "description": "Account ID",
        "schema": { "type": "string" },
        "required": true
      },
      "account_authentication_method_id": {
        "in": "path",
        "name": "account_authentication_method_id",
        "description": "Account authentication method ID",
        "schema": { "type": "string" },
        "required": true
      },
      "card_id": {
        "in": "path",
        "name": "card_id",
        "description": "Credit card ID",
        "schema": { "type": "string" },
        "required": true
      },
      "project_name": {
        "in": "path",
        "name": "project_name",
        "description": "Project name",
        "schema": { "type": "string" },
        "required": true
      },
      "team_id": {
        "in": "path",
        "name": "team_id",
        "description": "Team ID",
        "schema": { "type": "string" },
        "required": true
      },
      "user_email": {
        "in": "path",
        "name": "user_email",
        "description": "Email address",
        "schema": { "type": "string" },
        "required": true
      },
      "invite_verification_code": {
        "in": "path",
        "name": "invite_verification_code",
        "description": "Verification code received via email",
        "schema": { "type": "string" },
        "required": true
      },
      "user_id": {
        "in": "path",
        "name": "user_id",
        "description": "User ID",
        "schema": { "type": "string" },
        "required": true
      },
      "project": {
        "in": "path",
        "name": "project",
        "description": "Project name",
        "schema": { "type": "string" },
        "required": true
      },
      "organization_id": {
        "in": "path",
        "name": "organization_id",
        "description": "ID of an organization",
        "schema": { "type": "string" },
        "required": true
      },
      "token_prefix": {
        "in": "path",
        "name": "token_prefix",
        "description": "Access token prefix",
        "schema": { "type": "string" },
        "required": true
      },
      "authentication_method_id": {
        "in": "path",
        "name": "authentication_method_id",
        "description": "Organization authentication method ID",
        "schema": { "type": "string" },
        "required": true
      },
      "domain_id": {
        "in": "path",
        "name": "domain_id",
        "description": "ID of a domain",
        "schema": { "type": "string" },
        "required": true
      },
      "billing_group_id": {
        "in": "path",
        "name": "billing_group_id",
        "description": "Billing group id",
        "schema": { "type": "string" },
        "required": true
      },
      "invoice_number": {
        "in": "path",
        "name": "invoice_number",
        "description": "Invoice number",
        "schema": { "type": "string" },
        "required": true
      },
      "billinggroupinvoicecsvget_cookie": {
        "in": "query",
        "name": "cookie",
        "description": "Download cookie signature.",
        "schema": { "type": "string" },
        "required": true
      },
      "billinggroupinvoicecsvget_project": {
        "in": "query",
        "name": "project",
        "description": "Project name. Only required if the provided cookie comes from the Project Billing API.",
        "schema": { "type": "string" },
        "required": false
      },
      "download_cookie": {
        "in": "path",
        "name": "download_cookie",
        "description": "Authentication cookie for file download",
        "schema": { "type": "string" },
        "required": true
      },
      "address_id": {
        "in": "path",
        "name": "address_id",
        "description": "Address id",
        "schema": { "type": "string" },
        "required": true
      },
      "tenant": {
        "in": "path",
        "name": "tenant",
        "description": "Aiven tenant ID",
        "schema": { "type": "string" },
        "required": true
      },
      "user_group_id": {
        "in": "path",
        "name": "user_group_id",
        "description": "ID of the user group",
        "schema": { "type": "string" },
        "required": true
      },
      "project_id": {
        "in": "path",
        "name": "project_id",
        "description": "Project Id",
        "schema": { "type": "string" },
        "required": true
      },
      "resource_type": {
        "in": "path",
        "name": "resource_type",
        "description": "Resource type",
        "schema": {
          "type": "string",
          "enum": ["project", "organization", "organization_unit"]
        },
        "required": true
      },
      "resource_id": {
        "in": "path",
        "name": "resource_id",
        "description": "Resource Id",
        "schema": { "type": "string" },
        "required": true
      },
      "file_format": {
        "in": "path",
        "name": "file_format",
        "description": "of the SBOM report",
        "schema": { "type": "string" },
        "required": true
      },
      "invited_email": {
        "in": "path",
        "name": "invited_email",
        "description": "Email address of user to be invited",
        "schema": { "type": "string" },
        "required": true
      },
      "service_type": {
        "in": "path",
        "name": "service_type",
        "description": "Service type",
        "schema": { "type": "string" },
        "required": true
      },
      "service_plan": {
        "in": "path",
        "name": "service_plan",
        "description": "Service plan",
        "schema": { "type": "string" },
        "required": true
      },
      "cloud": {
        "in": "path",
        "name": "cloud",
        "description": "Cloud",
        "schema": { "type": "string" },
        "required": true
      },
      "project_vpc_id": {
        "in": "path",
        "name": "project_vpc_id",
        "description": "Project VPC ID",
        "schema": { "type": "string" },
        "required": true
      },
      "peer_cloud_account": {
        "in": "path",
        "name": "peer_cloud_account",
        "description": "AWS account ID, Google project name, Azure subscription ID, or string &quot;upcloud&quot; for UpCloud peering connections",
        "schema": { "type": "string" },
        "required": true
      },
      "peer_vpc": {
        "in": "path",
        "name": "peer_vpc",
        "description": "AWS VPC-ID, Google network name, Azure VNet name, or UpCloud VPC ID",
        "schema": { "type": "string" },
        "required": true
      },
      "peer_region": {
        "in": "path",
        "name": "peer_region",
        "description": "AWS region",
        "schema": { "type": "string" },
        "required": true
      },
      "peer_resource_group": {
        "in": "path",
        "name": "peer_resource_group",
        "description": "Azure resource group",
        "schema": { "type": "string" },
        "required": true
      },
      "service_name": {
        "in": "path",
        "name": "service_name",
        "description": "Service name",
        "schema": { "type": "string" },
        "required": true
      },
      "database": {
        "in": "path",
        "name": "database",
        "description": "Database name",
        "schema": { "type": "string" },
        "required": true
      },
      "serviceclickhousequerystats_limit": {
        "in": "query",
        "name": "limit",
        "description": "Limit for number of results",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 1000,
          "default": 100
        },
        "required": false
      },
      "serviceclickhousequerystats_offset": {
        "in": "query",
        "name": "offset",
        "description": "Offset for retrieved results based on sort order",
        "schema": { "type": "integer", "minimum": 0, "default": 0 },
        "required": false
      },
      "serviceclickhousequerystats_order_by": {
        "in": "query",
        "name": "order_by",
        "description": "Order in which to sort retrieved results",
        "schema": {
          "type": "string",
          "default": "total_time:desc",
          "enum": [
            "calls:asc",
            "calls:desc",
            "min_time:asc",
            "min_time:desc",
            "max_time:asc",
            "max_time:desc",
            "mean_time:asc",
            "mean_time:desc",
            "p95_time:asc",
            "p95_time:desc",
            "stddev_time:asc",
            "stddev_time:desc",
            "total_time:asc",
            "total_time:desc"
          ]
        },
        "required": false
      },
      "application_id": {
        "in": "path",
        "name": "application_id",
        "description": "Application Id",
        "schema": { "type": "string" },
        "required": true
      },
      "deployment_id": {
        "in": "path",
        "name": "deployment_id",
        "description": "Deployment Id",
        "schema": { "type": "string" },
        "required": true
      },
      "application_version_id": {
        "in": "path",
        "name": "application_version_id",
        "description": "ApplicationVersion Id",
        "schema": { "type": "string" },
        "required": true
      },
      "job_id": {
        "in": "path",
        "name": "job_id",
        "description": "Job Id",
        "schema": { "type": "string" },
        "required": true
      },
      "kafka_acl_id": {
        "in": "path",
        "name": "kafka_acl_id",
        "description": "Kafka ACL ID",
        "schema": { "type": "string" },
        "required": true
      },
      "connector_name": {
        "in": "path",
        "name": "connector_name",
        "description": "Connector name",
        "schema": { "type": "string" },
        "required": true
      },
      "task_id": {
        "in": "path",
        "name": "task_id",
        "description": "Service task",
        "schema": { "type": "string" },
        "required": true
      },
      "servicekafkaquotadelete_client-id": {
        "in": "query",
        "name": "client-id",
        "description": "Client ID.",
        "schema": { "type": "string" },
        "required": false
      },
      "servicekafkaquotadelete_user": {
        "in": "query",
        "name": "user",
        "description": "Username.",
        "schema": { "type": "string" },
        "required": false
      },
      "servicekafkaquotadescribe_client-id": {
        "in": "query",
        "name": "client-id",
        "description": "Client ID.",
        "schema": { "type": "string" },
        "required": false
      },
      "servicekafkaquotadescribe_user": {
        "in": "query",
        "name": "user",
        "description": "Username.",
        "schema": { "type": "string" },
        "required": false
      },
      "topic_name": {
        "in": "path",
        "name": "topic_name",
        "description": "Kafka topic name",
        "schema": { "type": "string" },
        "required": true
      },
      "schema_registry_acl_id": {
        "in": "path",
        "name": "schema_registry_acl_id",
        "description": "Kafka Schema Registry ACL ID",
        "schema": { "type": "string" },
        "required": true
      },
      "subject_name": {
        "in": "path",
        "name": "subject_name",
        "description": "Subject name",
        "schema": { "type": "string" },
        "required": true
      },
      "version_id": {
        "in": "path",
        "name": "version_id",
        "description": "Version Id",
        "schema": { "type": "string" },
        "required": true
      },
      "schema_id": {
        "in": "path",
        "name": "schema_id",
        "description": "Schema Id",
        "schema": { "type": "string" },
        "required": true
      },
      "source_cluster": {
        "in": "path",
        "name": "source_cluster",
        "description": "Source cluster alias",
        "schema": { "type": "string" },
        "required": true
      },
      "target_cluster": {
        "in": "path",
        "name": "target_cluster",
        "description": "Target cluster alias",
        "schema": { "type": "string" },
        "required": true
      },
      "index_name": {
        "in": "path",
        "name": "index_name",
        "description": "OpenSearch index name",
        "schema": { "type": "string" },
        "required": true
      },
      "pool_name": {
        "in": "path",
        "name": "pool_name",
        "description": "PgBouncer connection pool name",
        "schema": { "type": "string" },
        "required": true
      },
      "dbname": {
        "in": "path",
        "name": "dbname",
        "description": "DatabaseName",
        "schema": { "type": "string" },
        "required": true
      },
      "serviceget_include_secrets": {
        "in": "query",
        "name": "include_secrets",
        "description": "Explicitly indicates that the client wants to read secrets that might be returned by this endpoint.",
        "schema": { "type": "boolean" },
        "required": false
      },
      "ca_name": {
        "in": "path",
        "name": "ca_name",
        "description": "CA name",
        "schema": { "type": "string" },
        "required": true
      },
      "keypair_name": {
        "in": "path",
        "name": "keypair_name",
        "description": "Keypair name",
        "schema": { "type": "string" },
        "required": true
      },
      "privatelink_connection_id": {
        "in": "path",
        "name": "privatelink_connection_id",
        "description": "Privatelink connection ID",
        "schema": { "type": "string" },
        "required": true
      },
      "serviceupdate_allow_unclean_poweroff": {
        "in": "query",
        "name": "allow_unclean_poweroff",
        "description": "Allows or disallows powering off a service if some WAL segments are not available for a future restoration of the service, which might result in data loss when powering the service back on",
        "schema": { "type": "boolean", "default": true },
        "required": false
      },
      "service_username": {
        "in": "path",
        "name": "service_username",
        "description": "Service username",
        "schema": { "type": "string" },
        "required": true
      },
      "integration_id": {
        "in": "path",
        "name": "integration_id",
        "description": "Integration ID",
        "schema": { "type": "string" },
        "required": true
      },
      "integration_endpoint_id": {
        "in": "path",
        "name": "integration_endpoint_id",
        "description": "Endpoint ID",
        "schema": { "type": "string" },
        "required": true
      },
      "serviceintegrationendpointget_include_secrets": {
        "in": "query",
        "name": "include_secrets",
        "description": "Explicitly indicates that the client wants to read secrets that might be returned by this endpoint.",
        "schema": { "type": "boolean" },
        "required": false
      },
      "static_ip_address_id": {
        "in": "path",
        "name": "static_ip_address_id",
        "description": "Static IP address identifier",
        "schema": { "type": "string" },
        "required": true
      },
      "ticket_id": {
        "in": "path",
        "name": "ticket_id",
        "description": "Ticket ID",
        "schema": { "type": "string" },
        "required": true
      },
      "member_user_id": {
        "in": "path",
        "name": "member_user_id",
        "description": "ID of the organization's user",
        "schema": { "type": "string" },
        "required": true
      },
      "user_authentication_method_id": {
        "in": "path",
        "name": "user_authentication_method_id",
        "description": "User authentication method ID",
        "schema": { "type": "string" },
        "required": true
      },
      "verification_code": {
        "in": "path",
        "name": "verification_code",
        "description": "Verification code received via email",
        "schema": { "type": "string" },
        "required": true
      },
      "credit_code": {
        "in": "path",
        "name": "credit_code",
        "description": "Credit Code",
        "schema": { "type": "string" },
        "required": true
      },
      "referral_code": {
        "in": "path",
        "name": "referral_code",
        "description": "Referral Code",
        "schema": { "type": "string" },
        "required": true
      }
    },
    "securitySchemes": {
      "tokenAuth": {
        "description": "Header should be of the format `authorization: aivenv1 <TOKEN>`. Tokens can be obtained from [your Aiven profile page](https://console.aiven.io/profile/auth)",
        "scheme": "bearer",
        "type": "http"
      },
      "oauth2": {
        "type": "oauth2",
        "description": "OAuth2 security scheme",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://console.aiven.io/oauth/authorize",
            "tokenUrl": "https://api.aiven.io/v1/oauth2/token",
            "scopes": {
              "all": "Provide full access to the API",
              "accounts": "Allow enumerating and reading accounts configuration",
              "accounts:read": "Allow modifying account configuration",
              "accounts:write": "Provides full access to authentication related API",
              "authentication": "Provides full access to authentication related API",
              "authentication:read": "Allow reading authentication related configuration on resources (user profile, accounts)",
              "authentication:write": "Allow modifying authentication related configurations on resources (user profile, accounts)",
              "billing": "Provide full access to billing APIs",
              "billing:read": "Allow reading billing information and configuration",
              "billing:write": "Allow writing billing configuration",
              "payments": "Provide full access to payment method APIs",
              "payments:read": "Allow reading the payment method configurations",
              "payments:write": "Allows writing payment method configuration",
              "privatelink": "Provide full access to private link APIs",
              "privatelink:read": "Allow enumerating and reading private link items and configurations",
              "privatelink:write": "Allow writing (creating, modifying, deleting) private link items",
              "projects": "Provide full access to projects APIs",
              "projects:read": "Allow enumerating projects and reading their configuration",
              "projects:write": "Allow writing (creating, modifying, deleting) projects",
              "scim": "Provide full access to SCIM operations",
              "scim:read": "Allow reading SCIM endpoints",
              "scim:write": "Allow writing (modifying) SCIM endpoints",
              "services": "Provide full access to services APIs",
              "services:read": "Allow enumerating services and reading their configuration",
              "services:write": "Allow writing (creating, modifying, deleting) services",
              "static_ips": "Provide full access to static IPs APIs",
              "static_ips:read": "Allow enumerating and reading static IP items and configurations",
              "static_ips:write": "Allow writing (creating, modifying, deleting) static IP items",
              "tickets": "Provide full access to support ticket APIs",
              "tickets:read": "Allow enumerating and reading support tickets",
              "tickets:write": "Allow writing (creating, modifying) support tickets",
              "user": "Provide full access to user profile APIs",
              "user:read": "Allow reading user profile and configuration",
              "user:write": "Allow writing (modifying) user profile and configuration"
            }
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Aiven CLI client",
    "url": "https://github.com/aiven/aiven-client"
  },
  "info": {
    "contact": {
      "email": "support@aiven.io",
      "name": "Aiven support team",
      "url": "https://aiven.io/support-services"
    },
    "title": "Aiven API Documentation",
    "version": "v1",
    "x-logo": {
      "altText": "Aiven logo",
      "backgroundColor": "#fafafa",
      "href": "https://api.aiven.io/doc",
      "url": "https://aiven.io/assets/img/aiven-logo.png"
    },
    "description": "# Introduction\n\n[Aiven](https://aiven.io) is a modern fully-managed open source data platform for streaming, storing, and analyzing data on any public cloud. On Aiven Platform, you can operate your data infrastructure with a few devops tools: [Aiven Console](https://console.aiven.io/), [Aiven Terraform Provider](https://aiven.io/docs/tools/terraform), [Aiven CLI](https://github.com/aiven/aiven-client), and [Aiven Operator for Kubernetes](https://github.com/aiven/aiven-operator). All of them are built on an open secure powerful REST API for integration with custom tooling.\n\nThe Aiven [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer) API\nprovides programmatic access to Aiven.io services. To call the Aiven API, you can use either CLI tools (for example, `cURL` or [Aiven CLI client](https://aiven.io/docs/tools/cli)) or GUI tools, such as the [Aiven public API Postman collection](https://www.postman.com/aiven-apis).\n\nThis Aiven API documentation will help you operate your Aiven organization, projects, or services programmatically by integrating your applications and processes with Aiven.\n\n# Description\n\nAiven's APIs ([Application Programming Interfaces](https://en.wikipedia.org/wiki/API)) power its platform for data management. Aiven has a number of REST APIs that can help you build strong and robust data infrastructure for your applications.\n\nThe Aiven API is organized around core resources. Each core resource has multiple endpoints, which can be interacted with using different HTTP methods.\n\n## Core resources\n\n### Platform APIs\n\n<dl>\n  <dt>Account</dt>\n  <dd>Operations on the organization level related to accounts, projects, teams, users, invites, billing groups, payment methods, credit cards, authentication methods, and more </dd>\n  <dt>User</dt>\n  <dd>Operations related to users and users' profiles, access, authentication, authorization, user management, and more</dd>\n  <dt>Project</dt>\n  <dd>General operations on projects related to users, VPCs, invitations, alerts, peering connections, and more</dd>\n  <dt>BillingGroup</dt>\n  <dd>Operation on invoices, billing groups' credits and events </dd>\n  <dt>Support ticket</dt>\n  <dd>Operations on support tickets: listing, creating, looping users in</dd>\n</dl>\n\n### Services APIs\n\n<dl>\n  <dt>Service</dt>\n  <dd>All general (non-service-specific) operations on the service level: service creation, termination, configuration, updates, information retrieval, reset, and more</dd>\n  <dt>Service Integrations</dt>\n  <dd>Operations related to integrating services and managing service integrations</dd>\n  <dt>Service: ClickHouse</dt>\n  <dd>ClickHouse-specific operations on queries and databases </dd>\n  <dt>Service: Flink</dt>\n  <dd>Operations on Flink queries, jobs, and applications</dd>\n  <dt>Service: Kafka</dt>\n  <dd>Kafka and Kafka Connect specific operations on connectors, ACL entries, quotas, topics, topic messages, schema registry, and more</dd>\n  <dt>Service: Kafka MirrorMaker</dt>\n  <dd>Operations on replication flows</dd>\n  <dt>Service: MySQL</dt>\n  <dd>Fetching service query statistics</dd>\n  <dt>Service: OpenSearch</dt>\n  <dd>Operations on ACL configuration, security administration and configuration</dd>\n  <dt>Service: PostgreSQL</dt>\n  <dd>Operations on extensions, service query statistics, and connection pools</dd>\n</dl>\n\n# Requests\n\nThere are multiple ways you can interact with the Aiven API over HTTP. You can access it by sending requests from a client (for example, a web browser) to the Aiven's server. In this API reference, you'll find code examples of how to do that using `cURL` and a few different client libraries (programming languages).\n\nTo send an API request, you need to specify the following:\n\n* HTTP method\n* Path\n* Request headers\n\n  Typically, `content-type` needs to be set to `application/json`: `content-type: application/json`. There are a few exceptions though.\n\n* Path, query, or body parameters (either required or optional).\n\n```bash\ncurl --request POST \\\n  --url https://api.aiven.io/v1/project/{project}/vpcs \\\n  --header 'Authorization: aivenv1 REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data\n     '{\n        \"cloud_name\": \"string\",\n        \"network_cidr\": \"string\",\n        \"peering_connections\": [\n          {\n            \"peer_azure_app_id\": \"string\",\n            \"peer_azure_tenant_id\": \"string\",\n            \"peer_cloud_account\": \"string\",\n            \"peer_region\": \"string\",\n            \"peer_resource_group\": \"string\",\n            \"peer_vpc\": \"string\",\n            \"user_peer_network_cidrs\": [\n              \"string\"\n            ]\n          }\n        ]\n      }'\n```\n\n# Responses\n\nUpon receiving and processing a request, the Aiven API returns the response status code, response headers, and a response body in the `JSON` format. Response bodies include different properties, which can be either required or optional, for example, the ``message`` property, which is an optional human-readable information on the result of the action (deleted, created, or updated).\n\n```json\n{\n    \"cloud_name\": \"string\",\n    \"create_time\": \"string\",\n    \"message\": \"string\",\n    \"network_cidr\": \"string\",\n    \"peering_connections\": [\n        { ... }\n    ],\n    \"pending_build_only_peering_connections\": \"string\",\n    \"project_vpc_id\": \"string\",\n    \"state\": \"ACTIVE\",\n    \"update_time\": \"string\"\n}\n```\n\n## Successful responses\n\nA successful API response returns an HTTP result code between 200 and 299.\n\nExample of the ``created`` response\n\n```json\n  {\n      \"service\": {\n          \"service_name\": \"foobar\",\n          ...\n      }\n  }\n```\n\n## Failed responses\n\nA failed API response returns a HTTP code greater or equal to 400. Additionally, the response may return a list of errors in the response body as JSON, for example\n\n```json\n{\n  \"errors\": [\n    {\n      \"error_code\": \"authentication_failed\",\n      \"message\": \"Authentication failed\",\n      \"status\": 403,\n      \"metadata\": {\n        ...\n      }\n    }\n  ],\n  \"message\": \"Authentication failed\"\n}\n```\n\n> For information on errors' properties and error codes, check [Errors](/doc/openapi/openapi-description#errors).\n\n# Get started\n\nCheck out how to start using the Aiven API either in [API quick start](https://aiven.io/docs/tools/api#api-quickstart) or [Your first API call](https://aiven.io/blog/your-first-aiven-api-call).\n\n## Authentication\n\n<!-- ReDoc-Inject: <security-definitions> -->\n\n# Errors\n\nWhen working with the Aiven API, you may encounter different error responses when you attempt to perform operations that can fail. For example, trying to enable writes for a database that has been powered off would lead to the following error response:\n\n```json\n{\n  \"errors\": [\n    {\n      \"error_code\": \"not_powered\",\n      \"message\": \"Database not powered on\",\n      \"status\": 409\n    }\n  ],\n  \"message\": \"Database not powered on\"\n}\n```\n\n## Check a response for errors\n\nIf a request fails with a HTTP code greater or equal to 400, it returns a list of errors in the response body as JSON. `errors` objects are embedded in the failed API responses.\n\n```json\n{\n  \"errors\": [\n    {\n      \"error_code\": \"account_not_found\",\n      \"message\": \"Account does not exist\",\n      \"status\": 404\n    }\n  ],\n  \"message\": \"Account does not exist\"\n}\n```\n\n## Errors' properties\n\nIn an API response, one or more errors may be included in the ``errors`` array of objects. Each error object may contain a few properties:\n\n* ``status`` (required) is an HTTP error code, which can be used to programmatically identify the error type.\n\n  * ``200`` <= ``status``< ``300`` means a successful request.\n  * ``300`` <= ``status`` <= ``500`` means a failed request.\n\n  ``errors`` can have the following HTTPS status codes:\n\n  * 200 - OK\n  * 201 - Created\n  * 400 - Bad Request\n  * 401 - Unauthorized\n  * 403 - Forbidden\n  * 404 - Not found\n  * 405 - Method Not Allowed\n  * 409 - Conflict\n  * 500 - Internal Server Error\n\n* ``message`` (required) is human-readable information on the error.\n* ``error_code`` is a machine-readable information on the error (see [Error codes](/doc/openapi/openapi-description#error-codes)).\n\n## Error codes\n\nMachine-readable ``error_code`` fields are progressively added to Aiven endpoints to allow you to identify different failure cases programmatically. Currently, the supported values are the following:\n\n- `account_already_exists`\n- `account_already_has_organization`\n- `account_and_project_do_not_match`\n- `account_and_project_must_belong_same_tenant`\n- `account_cannot_be_own_ancestor`\n- `account_must_have_enabled_authentication_method`\n- `account_not_found`\n- `account_team_not_found`\n- `account_unit_cannot_create_for_personal_tier`\n- `account_unit_cannot_have_billing_group`\n- `account_with_child_accounts_cannot_be_deleted`\n- `account_with_projects_cannot_be_deleted`\n- `action_forbidden_for_application_users`\n- `action_forbidden_for_managed_users`\n- `action_forbidden_for_marketplace_users`\n- `action_forbidden_for_scim_users`\n- `action_forbidden_for_timescale_users`\n- `action_forbidden_missing_governance_usergroup`\n- `action_forbidden_on_application_users`\n- `action_forbidden_on_topic_request`\n- `action_forbidden_on_unmanaged_users`\n- `address_already_belongs_to_organization`\n- `address_in_use`\n- `address_not_found`\n- `api_client_ip_allowlist_blocks_caller`\n- `approval_forbidden_on_topic_request`\n- `approval_missing_on_request`\n- `auth_token_max_age_too_low`\n- `authentication_method_disable_current_not_allowed`\n- `authentication_method_does_not_allow_auto_join_user_group`\n- `authentication_method_limit_reached`\n- `authentication_method_not_found`\n- `backup_failed`\n- `billing_address_not_found`\n- `billing_group_not_found`\n- `billing_group_organization_active_trial`\n- `billing_group_owning_account_must_be_organization`\n- `ca_version_not_in_sequence`\n- `cannot_delete_active_managed_users`\n- `cannot_delete_users_with_organizations_memberships`\n- `cannot_move_project_not_assigned_to_organization`\n- `cannot_remove_managed_users_from_organization`\n- `cannot_set_groups_managed_by_scim_as_auto_join_group`\n- `client_ip_address_policy_violation`\n- `credit_card_not_found`\n- `custom_cloud_environment_internal`\n- `custom_cloud_environment_not_found`\n- `decline_forbidden_on_topic_request`\n- `deleting_forbidden_on_topic_request`\n- `discount_not_found`\n- `feature_not_enabled`\n- `free_trial_extensions_not_available`\n- `free_trial_max_extended`\n- `free_trial_not_active`\n- `free_trial_not_available`\n- `governance_configuration_already_exists`\n- `governance_configuration_not_found`\n- `governance_group_not_found`\n- `governance_invalid_service_type`\n- `idp_no_domains_linked`\n- `internal_server_error`\n- `invalid_currency_code`\n- `invalid_date_format`\n- `invalid_governance_group_provided`\n- `invalid_kafka_topic_request_type`\n- `invalid_os_migration_command`\n- `invalid_owner_user_group`\n- `invalid_scim_user_state_update`\n- `invalid_service_type`\n- `invitation_expired`\n- `invitation_not_found`\n- `ip_address_not_present`\n- `ip_address_not_valid`\n- `kafka_acl_not_supported`\n- `kafka_console_governance_enabled`\n- `kafka_governance_not_available`\n- `kafka_governance_not_enabled`\n- `kafka_governance_policy_incomplete`\n- `kafka_partition_reassignment_in_progress`\n- `kafka_service_unavailable`\n- `kafka_topic_already_exists`\n- `kafka_topic_invalid_config`\n- `kafka_topic_not_found`\n- `kafka_topic_queued_for_deletion`\n- `kafka_topic_reserved`\n- `marketplace_aws_customer_or_product_details_not_found`\n- `marketplace_subscription_already_linked_to_organization`\n- `marketplace_subscription_link_expired`\n- `marketplace_subscription_no_access`\n- `metadata_validation_failed`\n- `mfa_required_by_organization`\n- `mp_account_with_active_subscription_deleted`\n- `mp_account_with_commitment_deleted`\n- `mp_account_with_support_contract_deleted`\n- `mp_subscription_not_found`\n- `nested_account_cannot_have_authentication_method`\n- `nested_account_cannot_have_user_groups`\n- `no_failed_os_migration`\n- `node_prune_version_not_updated`\n- `not_powered`\n- `optimization_failed`\n- `optimization_not_found`\n- `organization_aiven_enterprise_contract_denied`\n- `organization_aiven_enterprise_contract_feature_denied`\n- `organization_aiven_enterprise_denied`\n- `organization_aiven_enterprise_organization_required`\n- `organization_cannot_exist_without_root_account`\n- `organization_domain_already_linked`\n- `organization_domain_not_found`\n- `organization_domain_not_root`\n- `organization_domain_verification_failed`\n- `organization_kafka_topics_invalid_filters`\n- `organization_mismatch`\n- `organization_must_have_one_super_admin`\n- `organization_not_found`\n- `organization_pending_support_contract_already_exists`\n- `organization_support_contract_tier_not_supported`\n- `organization_tier_downgrade_not_allowed`\n- `organization_user_not_found`\n- `orphaned_project_not_allowed`\n- `parent_account_cannot_be_own_ancestor`\n- `parent_account_not_found`\n- `parent_account_tenant_invalid`\n- `parent_account_too_deep`\n- `permission_denied`\n- `pg_publication_not_found`\n- `pg_replication_slot_not_found`\n- `project_account_not_active`\n- `project_already_exists`\n- `project_belongs_to_account_billing_group_must_use_api`\n- `project_does_not_exist`\n- `project_has_no_such_user`\n- `project_limitation_not_found`\n- `project_move_invalid`\n- `project_move_organizations_internal_config_not_match`\n- `project_not_found`\n- `project_without_billing_group_must_be_assigned_from_account`\n- `query_validation_failed`\n- `replication_already_exists`\n- `replication_config_invalid`\n- `replication_not_found`\n- `replication_service_not_found`\n- `request_already_exists`\n- `request_forbidden`\n- `request_not_found`\n- `resource_managed_by_governance`\n- `resource_managed_by_scim`\n- `resource_not_managed_by_scim`\n- `root_account_required`\n- `same_organization_required`\n- `schema_insights_failed`\n- `service_acl_not_found`\n- `service_acl_too_many`\n- `service_does_not_exist`\n- `service_governance_not_enabled`\n- `service_integration_endpoint_not_found`\n- `service_integration_not_found`\n- `service_integration_project_mismatch_source_destination`\n- `service_maintenance_required`\n- `service_not_found`\n- `service_type_not_allowed`\n- `shipping_address_not_found`\n- `signup_welcome_invalid_key`\n- `stripe_customer_owning_account_must_be_organization`\n- `support_contract_and_account_must_be_in_same_organization`\n- `support_contract_earliest_cancellation_date_later_than_end_date`\n- `support_contract_must_have_billing_group`\n- `support_contract_null_tier`\n- `team_limit_exceeded`\n- `team_names_must_be_unique`\n- `tenant_mismatch`\n- `topic_not_found`\n- `unable_to_parse_query`\n- `unit_cannot_be_moved_out_of_organization`\n- `unknown_user_sso_login_attempt`\n- `unsupported_resource_type`\n- `user_already_in_organization`\n- `user_already_invited_to_organization`\n- `user_config_2fa_otp_verification_failed`\n- `user_deactivated`\n- `user_domain_does_not_belong_to_organization_or_no_linked_auth_method`\n- `user_group_names_must_be_unique`\n- `user_group_not_found`\n- `user_groups_belong_to_different_accounts`\n- `user_groups_must_be_from_same_account`\n- `user_has_no_access_to_billing_info`\n- `user_has_no_access_to_project_with_current_authentication_method`\n- `user_has_to_sign_in_with_non_account_authentication_method`\n- `user_has_too_many_disk_addition_requests`\n- `user_is_internal_user`\n- `user_not_account_owner`\n- `user_not_account_owner_of_billing_group`\n- `user_not_account_owner_of_parent_account`\n- `user_not_admin_of_account_billing_group`\n- `user_not_application_user`\n- `user_not_found`\n- `user_not_managed_by_organization`\n- `user_not_organization_admin`\n- `user_not_signed_in_with_account_authentication_method`\n- `user_oauth_authentication_method_not_allowed`\n- `user_password_authentication_method_not_allowed`\n- `user_personal_token_allowed_authentication_methods_cannot_be_disabled`\n- `user_personal_token_not_allowed`\n- `user_personal_tokens_cannot_be_disabled`\n- `user_role_not_allowed_to_perform_operation`\n- `user_saml_authentication_method_not_allowed`\n- `user_weblink_action_expired`\n- `users_belong_to_different_tenant_from_user_group_account`\n"
  },
  "openapi": "3.0.1",
  "paths": {
    "/account/{account_id}/payment_methods": {
      "post": {
        "summary": "Attach payment method for account",
        "tags": ["Account"],
        "operationId": "AccountAttachPaymentMethod",
        "parameters": [{ "$ref": "#/components/parameters/account_id" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountAttachPaymentMethodRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountAttachPaymentMethodResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["accounts:write", "payments:write"] }
        ]
      },
      "get": {
        "summary": "List credit cards attached as a payment method to the account",
        "tags": ["Account"],
        "operationId": "AccountPaymentMethodsList",
        "parameters": [{ "$ref": "#/components/parameters/account_id" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountPaymentMethodsListResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["accounts:read", "payments:read"] }
        ]
      }
    },
    "/account/{account_id}/authentication": {
      "post": {
        "summary": "Create a new authentication method",
        "tags": ["Account"],
        "operationId": "AccountAuthenticationMethodCreate",
        "parameters": [{ "$ref": "#/components/parameters/account_id" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountAuthenticationMethodCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountAuthenticationMethodCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": ["accounts:write", "authentication:write"]
          }
        ]
      },
      "get": {
        "summary": "List authentication methods",
        "tags": ["Account"],
        "operationId": "AccountAuthenticationMethodsList",
        "parameters": [{ "$ref": "#/components/parameters/account_id" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountAuthenticationMethodsListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": ["accounts:read", "authentication:read"]
          }
        ]
      }
    },
    "/account/{account_id}/authentication/{account_authentication_method_id}": {
      "delete": {
        "summary": "Delete authentication method",
        "tags": ["Account"],
        "operationId": "AccountAuthenticationMethodDelete",
        "parameters": [
          { "$ref": "#/components/parameters/account_id" },
          { "$ref": "#/components/parameters/account_authentication_method_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountAuthenticationMethodDeleteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": ["accounts:write", "authentication:write"]
          }
        ]
      },
      "get": {
        "summary": "Get details of a single authentication method",
        "tags": ["Account"],
        "operationId": "AccountAuthenticationMethodGet",
        "parameters": [
          { "$ref": "#/components/parameters/account_id" },
          { "$ref": "#/components/parameters/account_authentication_method_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountAuthenticationMethodGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": ["accounts:read", "authentication:read"]
          }
        ]
      },
      "put": {
        "summary": "Update authentication method",
        "tags": ["Account"],
        "operationId": "AccountAuthenticationMethodUpdate",
        "parameters": [
          { "$ref": "#/components/parameters/account_id" },
          { "$ref": "#/components/parameters/account_authentication_method_id" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountAuthenticationMethodUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountAuthenticationMethodUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": ["accounts:write", "authentication:write"]
          }
        ]
      }
    },
    "/account/{account_id}/billing-group": {
      "get": {
        "summary": "List account billing groups",
        "tags": ["Account"],
        "operationId": "AccountBillingGroupList",
        "parameters": [{ "$ref": "#/components/parameters/account_id" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountBillingGroupListResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["accounts:read", "billing:read"] }
        ]
      }
    },
    "/account": {
      "post": {
        "summary": "Create a new account",
        "tags": ["Account"],
        "operationId": "AccountCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": [
                              "marketplace_subscription_already_linked_to_organization"
                            ],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "marketplace_subscription_already_linked_to_organization: Marketplace subscription is already linked to an organization."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": [
                              "account_unit_cannot_create_for_personal_tier"
                            ],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "account_unit_cannot_create_for_personal_tier: You cannot create organizational units in a Personal organization. Consider upgrading to a Business organization."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:write"] }]
      },
      "get": {
        "summary": "List accounts you have access to",
        "tags": ["Account"],
        "operationId": "AccountList",
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AccountListResponse" }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:read"] }]
      }
    },
    "/account/{account_id}": {
      "delete": {
        "summary": "Delete empty account",
        "tags": ["Account"],
        "operationId": "AccountDelete",
        "parameters": [{ "$ref": "#/components/parameters/account_id" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDeleteResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:write"] }]
      },
      "get": {
        "summary": "Get account details",
        "tags": ["Account"],
        "operationId": "AccountGet",
        "parameters": [{ "$ref": "#/components/parameters/account_id" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AccountGetResponse" }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:read"] }]
      },
      "put": {
        "summary": "Update existing account",
        "tags": ["Account"],
        "operationId": "AccountUpdate",
        "parameters": [{ "$ref": "#/components/parameters/account_id" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountUpdateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:write"] }]
      }
    },
    "/account/{account_id}/events": {
      "get": {
        "summary": "List account events",
        "tags": ["Account"],
        "operationId": "AccountEventList",
        "parameters": [{ "$ref": "#/components/parameters/account_id" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountEventListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:read"] }]
      }
    },
    "/account/{account_id}/parent_account": {
      "put": {
        "summary": "Move an existing organization unitself",
        "tags": ["Account"],
        "operationId": "AccountMove",
        "parameters": [{ "$ref": "#/components/parameters/account_id" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountMoveRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AccountMoveResponse" }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:write"] }]
      }
    },
    "/account/{account_id}/payment_method/{card_id}": {
      "delete": {
        "summary": "Delete credit card attached to the account as a payment method",
        "tags": ["Account"],
        "operationId": "AccountPaymentMethodDelete",
        "parameters": [
          { "$ref": "#/components/parameters/account_id" },
          { "$ref": "#/components/parameters/card_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountPaymentMethodDeleteResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["accounts:write", "payments:write"] }
        ]
      }
    },
    "/account/{account_id}/projects": {
      "get": {
        "summary": "List projects belonging to account",
        "tags": ["Account"],
        "operationId": "AccountProjectsList",
        "parameters": [{ "$ref": "#/components/parameters/account_id" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountProjectsListResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["accounts:read", "projects:read"] }
        ]
      }
    },
    "/account/{account_id}/project/{project_name}/teams": {
      "get": {
        "summary": "List account teams associated to a project",
        "tags": ["Account"],
        "operationId": "AccountProjectsTeamsList",
        "description": "<p>Teams have been deprecated and are being migrated to groups. On 2 September 2024 the Account Owners team will transition to super admin. Super admin have full access to the organization. The Account Owners and super admin are synced, so the removal of the Account Owners team will have no impact on existing permissions. From 4 November 2024 you won't be able to create new teams or update existing ones. Existing teams will be migrated to groups after this date. On 2 December 2024 all teams will be deleted and the teams feature will be completely removed.</p>",
        "deprecated": true,
        "parameters": [
          { "$ref": "#/components/parameters/account_id" },
          { "$ref": "#/components/parameters/project_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountProjectsTeamsListResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["accounts:read", "projects:read"] }
        ]
      }
    },
    "/account/{account_id}/teams": {
      "post": {
        "summary": "Create a new team",
        "tags": ["Account"],
        "operationId": "AccountTeamCreate",
        "description": "<p>Teams have been deprecated and are being migrated to groups. On 2 September 2024 the Account Owners team will transition to super admin. Super admin have full access to the organization. The Account Owners and super admin are synced, so the removal of the Account Owners team will have no impact on existing permissions. From 4 November 2024 you won't be able to create new teams or update existing ones. Existing teams will be migrated to groups after this date. On 2 December 2024 all teams will be deleted and the teams feature will be completely removed.</p>",
        "deprecated": true,
        "parameters": [{ "$ref": "#/components/parameters/account_id" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountTeamCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTeamCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["team_names_must_be_unique"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "team_names_must_be_unique: Team with the same name already exists"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": [
                              "feature_not_enabled",
                              "team_limit_exceeded"
                            ],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "feature_not_enabled: This feature is not enabled in your context, please contact support to enable it. team_limit_exceeded: Maximum number of teams reached, please contact support to increase the limit"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["account_not_found"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "account_not_found: No such account exists"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:write"] }]
      },
      "get": {
        "summary": "List teams belonging to an account",
        "tags": ["Account"],
        "operationId": "AccountTeamList",
        "description": "<p>Teams have been deprecated and are being migrated to groups. On 2 September 2024 the Account Owners team will transition to super admin. Super admin have full access to the organization. The Account Owners and super admin are synced, so the removal of the Account Owners team will have no impact on existing permissions. From 4 November 2024 you won't be able to create new teams or update existing ones. Existing teams will be migrated to groups after this date. On 2 December 2024 all teams will be deleted and the teams feature will be completely removed.</p>",
        "deprecated": true,
        "parameters": [{ "$ref": "#/components/parameters/account_id" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTeamListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:read"] }]
      }
    },
    "/account/{account_id}/team/{team_id}": {
      "delete": {
        "summary": "Delete a team",
        "tags": ["Account"],
        "operationId": "AccountTeamDelete",
        "description": "<p>Teams have been deprecated and are being migrated to groups. On 2 September 2024 the Account Owners team will transition to super admin. Super admin have full access to the organization. The Account Owners and super admin are synced, so the removal of the Account Owners team will have no impact on existing permissions. From 4 November 2024 you won't be able to create new teams or update existing ones. Existing teams will be migrated to groups after this date. On 2 December 2024 all teams will be deleted and the teams feature will be completely removed.</p>",
        "deprecated": true,
        "parameters": [
          { "$ref": "#/components/parameters/account_id" },
          { "$ref": "#/components/parameters/team_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTeamDeleteResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:write"] }]
      },
      "get": {
        "summary": "Get details for a single team",
        "tags": ["Account"],
        "operationId": "AccountTeamGet",
        "description": "<p>Teams have been deprecated and are being migrated to groups. On 2 September 2024 the Account Owners team will transition to super admin. Super admin have full access to the organization. The Account Owners and super admin are synced, so the removal of the Account Owners team will have no impact on existing permissions. From 4 November 2024 you won't be able to create new teams or update existing ones. Existing teams will be migrated to groups after this date. On 2 December 2024 all teams will be deleted and the teams feature will be completely removed.</p>",
        "deprecated": true,
        "parameters": [
          { "$ref": "#/components/parameters/account_id" },
          { "$ref": "#/components/parameters/team_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTeamGetResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:read"] }]
      },
      "put": {
        "summary": "Update team details",
        "tags": ["Account"],
        "operationId": "AccountTeamUpdate",
        "description": "<p>Teams have been deprecated and are being migrated to groups. On 2 September 2024 the Account Owners team will transition to super admin. Super admin have full access to the organization. The Account Owners and super admin are synced, so the removal of the Account Owners team will have no impact on existing permissions. From 4 November 2024 you won't be able to create new teams or update existing ones. Existing teams will be migrated to groups after this date. On 2 December 2024 all teams will be deleted and the teams feature will be completely removed.</p>",
        "deprecated": true,
        "parameters": [
          { "$ref": "#/components/parameters/account_id" },
          { "$ref": "#/components/parameters/team_id" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountTeamUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTeamUpdateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:write"] }]
      }
    },
    "/account/{account_id}/team/{team_id}/invites": {
      "get": {
        "summary": "List pending invites",
        "tags": ["Account"],
        "operationId": "AccountTeamInvitesList",
        "description": "<p>Teams have been deprecated and are being migrated to groups. On 2 September 2024 the Account Owners team will transition to super admin. Super admin have full access to the organization. The Account Owners and super admin are synced, so the removal of the Account Owners team will have no impact on existing permissions. From 4 November 2024 you won't be able to create new teams or update existing ones. Existing teams will be migrated to groups after this date. On 2 December 2024 all teams will be deleted and the teams feature will be completely removed.</p>",
        "deprecated": true,
        "parameters": [
          { "$ref": "#/components/parameters/account_id" },
          { "$ref": "#/components/parameters/team_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTeamInvitesListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:read"] }]
      }
    },
    "/account/{account_id}/team/{team_id}/invites/{user_email}": {
      "delete": {
        "summary": "Cancel pending user invite",
        "tags": ["Account"],
        "operationId": "AccountTeamMemberCancelInvite",
        "description": "<p>Teams have been deprecated and are being migrated to groups. On 2 September 2024 the Account Owners team will transition to super admin. Super admin have full access to the organization. The Account Owners and super admin are synced, so the removal of the Account Owners team will have no impact on existing permissions. From 4 November 2024 you won't be able to create new teams or update existing ones. Existing teams will be migrated to groups after this date. On 2 December 2024 all teams will be deleted and the teams feature will be completely removed.</p>",
        "deprecated": true,
        "parameters": [
          { "$ref": "#/components/parameters/account_id" },
          { "$ref": "#/components/parameters/team_id" },
          { "$ref": "#/components/parameters/user_email" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTeamMemberCancelInviteResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:write"] }]
      }
    },
    "/account/{account_id}/invite/{invite_verification_code}": {
      "post": {
        "summary": "Confirm account team invite",
        "tags": ["Account"],
        "operationId": "AccountTeamMemberVerifyInvite",
        "parameters": [
          { "$ref": "#/components/parameters/account_id" },
          { "$ref": "#/components/parameters/invite_verification_code" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTeamMemberVerifyInviteResponse"
                }
              }
            }
          }
        }
      }
    },
    "/account/{account_id}/team/{team_id}/member/{user_id}": {
      "delete": {
        "summary": "Remove a member from the team",
        "tags": ["Account"],
        "operationId": "AccountTeamMembersDelete",
        "description": "<p>Teams have been deprecated and are being migrated to groups. On 2 September 2024 the Account Owners team will transition to super admin. Super admin have full access to the organization. The Account Owners and super admin are synced, so the removal of the Account Owners team will have no impact on existing permissions. From 4 November 2024 you won't be able to create new teams or update existing ones. Existing teams will be migrated to groups after this date. On 2 December 2024 all teams will be deleted and the teams feature will be completely removed.</p>",
        "deprecated": true,
        "parameters": [
          { "$ref": "#/components/parameters/account_id" },
          { "$ref": "#/components/parameters/team_id" },
          { "$ref": "#/components/parameters/user_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTeamMembersDeleteResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:write"] }]
      }
    },
    "/account/{account_id}/team/{team_id}/members": {
      "post": {
        "summary": "Invite a new member to join the team",
        "tags": ["Account"],
        "operationId": "AccountTeamMembersInvite",
        "description": "<p>Teams have been deprecated and are being migrated to groups. On 2 September 2024 the Account Owners team will transition to super admin. Super admin have full access to the organization. The Account Owners and super admin are synced, so the removal of the Account Owners team will have no impact on existing permissions. From 4 November 2024 you won't be able to create new teams or update existing ones. Existing teams will be migrated to groups after this date. On 2 December 2024 all teams will be deleted and the teams feature will be completely removed.</p>",
        "deprecated": true,
        "parameters": [
          { "$ref": "#/components/parameters/account_id" },
          { "$ref": "#/components/parameters/team_id" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountTeamMembersInviteRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTeamMembersInviteResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:write"] }]
      },
      "get": {
        "summary": "List members of a single team",
        "tags": ["Account"],
        "operationId": "AccountTeamMembersList",
        "description": "<p>Teams have been deprecated and are being migrated to groups. On 2 September 2024 the Account Owners team will transition to super admin. Super admin have full access to the organization. The Account Owners and super admin are synced, so the removal of the Account Owners team will have no impact on existing permissions. From 4 November 2024 you won't be able to create new teams or update existing ones. Existing teams will be migrated to groups after this date. On 2 December 2024 all teams will be deleted and the teams feature will be completely removed.</p>",
        "deprecated": true,
        "parameters": [
          { "$ref": "#/components/parameters/account_id" },
          { "$ref": "#/components/parameters/team_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTeamMembersListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:read"] }]
      }
    },
    "/account/{account_id}/team/{team_id}/project/{project}": {
      "post": {
        "summary": "Associate team to a project",
        "tags": ["Account"],
        "operationId": "AccountTeamProjectAssociate",
        "description": "<p>Teams have been deprecated and are being migrated to groups. On 2 September 2024 the Account Owners team will transition to super admin. Super admin have full access to the organization. The Account Owners and super admin are synced, so the removal of the Account Owners team will have no impact on existing permissions. From 4 November 2024 you won't be able to create new teams or update existing ones. Existing teams will be migrated to groups after this date. On 2 December 2024 all teams will be deleted and the teams feature will be completely removed.</p>",
        "deprecated": true,
        "parameters": [
          { "$ref": "#/components/parameters/account_id" },
          { "$ref": "#/components/parameters/team_id" },
          { "$ref": "#/components/parameters/project" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountTeamProjectAssociateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTeamProjectAssociateResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["accounts:write", "projects:read"] }
        ]
      },
      "put": {
        "summary": "Update team-project association",
        "tags": ["Account"],
        "operationId": "AccountTeamProjectAssociationUpdate",
        "description": "<p>Teams have been deprecated and are being migrated to groups. On 2 September 2024 the Account Owners team will transition to super admin. Super admin have full access to the organization. The Account Owners and super admin are synced, so the removal of the Account Owners team will have no impact on existing permissions. From 4 November 2024 you won't be able to create new teams or update existing ones. Existing teams will be migrated to groups after this date. On 2 December 2024 all teams will be deleted and the teams feature will be completely removed.</p>",
        "deprecated": true,
        "parameters": [
          { "$ref": "#/components/parameters/account_id" },
          { "$ref": "#/components/parameters/team_id" },
          { "$ref": "#/components/parameters/project" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountTeamProjectAssociationUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTeamProjectAssociationUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["accounts:write", "projects:read"] }
        ]
      },
      "delete": {
        "summary": "Disassociate team from a project",
        "tags": ["Account"],
        "operationId": "AccountTeamProjectDisassociate",
        "description": "<p>Teams have been deprecated and are being migrated to groups. On 2 September 2024 the Account Owners team will transition to super admin. Super admin have full access to the organization. The Account Owners and super admin are synced, so the removal of the Account Owners team will have no impact on existing permissions. From 4 November 2024 you won't be able to create new teams or update existing ones. Existing teams will be migrated to groups after this date. On 2 December 2024 all teams will be deleted and the teams feature will be completely removed.</p>",
        "deprecated": true,
        "parameters": [
          { "$ref": "#/components/parameters/account_id" },
          { "$ref": "#/components/parameters/team_id" },
          { "$ref": "#/components/parameters/project" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTeamProjectDisassociateResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["accounts:write", "projects:read"] }
        ]
      }
    },
    "/account/{account_id}/team/{team_id}/projects": {
      "get": {
        "summary": "List projects associated to a team",
        "tags": ["Account"],
        "operationId": "AccountTeamProjectList",
        "description": "<p>Teams have been deprecated and are being migrated to groups. On 2 September 2024 the Account Owners team will transition to super admin. Super admin have full access to the organization. The Account Owners and super admin are synced, so the removal of the Account Owners team will have no impact on existing permissions. From 4 November 2024 you won't be able to create new teams or update existing ones. Existing teams will be migrated to groups after this date. On 2 December 2024 all teams will be deleted and the teams feature will be completely removed.</p>",
        "deprecated": true,
        "parameters": [
          { "$ref": "#/components/parameters/account_id" },
          { "$ref": "#/components/parameters/team_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTeamProjectListResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["accounts:read", "projects:read"] }
        ]
      }
    },
    "/account/{account_id}/user/{user_id}/projects": {
      "get": {
        "summary": "List projects associated with this account that user has access to",
        "tags": ["Account"],
        "operationId": "AccountUserProjectsList",
        "parameters": [
          { "$ref": "#/components/parameters/account_id" },
          { "$ref": "#/components/parameters/user_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountUserProjectsListResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["accounts:read", "projects:read"] }
        ]
      }
    },
    "/account/{account_id}/user/{user_id}/teams": {
      "get": {
        "summary": "List all teams for user",
        "tags": ["Account"],
        "operationId": "AccountUserTeamsList",
        "description": "<p>Teams have been deprecated and are being migrated to groups. On 2 September 2024 the Account Owners team will transition to super admin. Super admin have full access to the organization. The Account Owners and super admin are synced, so the removal of the Account Owners team will have no impact on existing permissions. From 4 November 2024 you won't be able to create new teams or update existing ones. Existing teams will be migrated to groups after this date. On 2 December 2024 all teams will be deleted and the teams feature will be completely removed.</p>",
        "deprecated": true,
        "parameters": [
          { "$ref": "#/components/parameters/account_id" },
          { "$ref": "#/components/parameters/user_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountUserTeamsListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:read"] }]
      }
    },
    "/account/{account_id}/users/search": {
      "post": {
        "summary": "List/search users who are members of any team on this account",
        "tags": ["Account"],
        "operationId": "AccountUsersSearch",
        "parameters": [{ "$ref": "#/components/parameters/account_id" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountUsersSearchRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountUsersSearchResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:read"] }]
      }
    },
    "/organization/{organization_id}/application-users/{user_id}/access-tokens": {
      "post": {
        "summary": "Create an application token",
        "tags": ["Application_Users"],
        "operationId": "ApplicationUserAccessTokenCreate",
        "description": "<p>Creates a token for an application user.</p>",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/user_id" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUserAccessTokenCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationUserAccessTokenCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": ["accounts:write", "authentication:write"]
          }
        ]
      },
      "get": {
        "summary": "List application tokens",
        "tags": ["Application_Users"],
        "operationId": "ApplicationUserAccessTokensList",
        "description": "<p>Returns a list of tokens for an application user.</p>",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/user_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationUserAccessTokensListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": ["accounts:read", "authentication:read"]
          }
        ]
      }
    },
    "/organization/{organization_id}/application-users/{user_id}/access-tokens/{token_prefix}": {
      "delete": {
        "summary": "Delete an application token",
        "tags": ["Application_Users"],
        "operationId": "ApplicationUserAccessTokenDelete",
        "description": "<p>Deletes an application user's token.</p>",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/user_id" },
          { "$ref": "#/components/parameters/token_prefix" }
        ],
        "responses": {
          "204": { "description": "Delete an application token", "content": {} }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": ["accounts:write", "authentication:write"]
          }
        ]
      }
    },
    "/organization/{organization_id}/application-users": {
      "post": {
        "summary": "Create an application user",
        "tags": ["Application_Users"],
        "operationId": "ApplicationUserCreate",
        "description": "<p>Creates an application user in an organization.</p>",
        "parameters": [{ "$ref": "#/components/parameters/organization_id" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUserCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationUserCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": ["accounts:write", "authentication:write"]
          }
        ]
      },
      "get": {
        "summary": "List application users",
        "tags": ["Application_Users"],
        "operationId": "ApplicationUsersList",
        "description": "<p>Returns a list of application users for an organization.</p>",
        "parameters": [{ "$ref": "#/components/parameters/organization_id" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationUsersListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": ["accounts:read", "authentication:read"]
          }
        ]
      }
    },
    "/organization/{organization_id}/application-users/{user_id}": {
      "delete": {
        "summary": "Delete an application user",
        "tags": ["Application_Users"],
        "operationId": "ApplicationUserDelete",
        "description": "<p>Deletes an application user.</p>",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/user_id" }
        ],
        "responses": {
          "204": { "description": "Delete an application user", "content": {} }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": ["accounts:write", "authentication:write"]
          }
        ]
      },
      "get": {
        "summary": "Get an application user",
        "tags": ["Application_Users"],
        "operationId": "ApplicationUserGet",
        "description": "<p>Gets profile information for an application user.</p>",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/user_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationUserGetResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": [
                              "organization_not_found",
                              "organization_user_not_found"
                            ],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "organization_not_found: Organization not found.. organization_user_not_found: User not in organization"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["user_is_internal_user"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "user_is_internal_user: User is internal"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["user_not_application_user"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "user_not_application_user: User is not an application user"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": ["accounts:read", "authentication:read"]
          }
        ]
      },
      "patch": {
        "summary": "Update details on an application user of the organization",
        "tags": ["Application_Users"],
        "operationId": "ApplicationUserUpdate",
        "description": "<p>Update details on an application user of the organization.</p>",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/user_id" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationUserUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationUserUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": [
                              "organization_not_found",
                              "organization_user_not_found"
                            ],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "organization_not_found: Organization not found.. organization_user_not_found: User not in organization"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["user_is_internal_user"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "user_is_internal_user: User is internal"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["user_not_application_user"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "user_not_application_user: User is not an application user"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:write"] }]
      }
    },
    "/organization/{organization_id}/authentication-methods/{authentication_method_id}/domains": {
      "put": {
        "summary": "Link a domain to an organization's identity provider",
        "tags": ["Authentication_Methods"],
        "operationId": "OrganizationAuthDomainLink",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/authentication_method_id" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationAuthDomainLinkRequestBody"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Link a domain to an organization's identity provider",
            "content": {}
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["organization_not_found"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "organization_not_found: Organization not found."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["organization_mismatch"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "organization_mismatch: Resources must belong to the same organization."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["user_not_organization_admin"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "user_not_organization_admin: User is not organization administrator."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:write"] }]
      },
      "get": {
        "summary": "List domains linked to an organization's identity provider",
        "tags": ["Authentication_Methods"],
        "operationId": "OrganizationAuthDomainList",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/authentication_method_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationAuthDomainListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["user_not_organization_admin"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "user_not_organization_admin: User is not organization administrator."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:read"] }]
      }
    },
    "/organization/{organization_id}/authentication-methods/{authentication_method_id}/domains/{domain_id}": {
      "delete": {
        "summary": "Unlink domain from authentication method",
        "tags": ["Authentication_Methods"],
        "operationId": "OrganizationAuthDomainUnlink",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/authentication_method_id" },
          { "$ref": "#/components/parameters/domain_id" }
        ],
        "responses": {
          "204": {
            "description": "Unlink domain from authentication method",
            "content": {}
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["organization_not_found"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "organization_not_found: Organization not found."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["user_not_organization_admin"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "user_not_organization_admin: User is not organization administrator."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:write"] }]
      }
    },
    "/billing-group": {
      "post": {
        "summary": "Create a billing group",
        "tags": ["BillingGroup"],
        "operationId": "BillingGroupCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingGroupCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingGroupCreateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["billing:write"] }]
      },
      "get": {
        "summary": "List billing groups",
        "tags": ["BillingGroup"],
        "operationId": "BillingGroupList",
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingGroupListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["billing:read"] }]
      }
    },
    "/billing-group/{billing_group_id}/credits": {
      "post": {
        "summary": "Claim a credit code",
        "tags": ["BillingGroup"],
        "operationId": "BillingGroupCreditsClaim",
        "parameters": [{ "$ref": "#/components/parameters/billing_group_id" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingGroupCreditsClaimRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingGroupCreditsClaimResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["billing:write"] }]
      },
      "get": {
        "summary": "List billing group credits",
        "tags": ["BillingGroup"],
        "operationId": "BillingGroupCreditsList",
        "parameters": [{ "$ref": "#/components/parameters/billing_group_id" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingGroupCreditsListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["billing:read"] }]
      }
    },
    "/billing-group/{billing_group_id}": {
      "delete": {
        "summary": "Delete billing group",
        "tags": ["BillingGroup"],
        "operationId": "BillingGroupDelete",
        "parameters": [{ "$ref": "#/components/parameters/billing_group_id" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingGroupDeleteResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["billing:write"] }]
      },
      "get": {
        "summary": "Get billing group details",
        "tags": ["BillingGroup"],
        "operationId": "BillingGroupGet",
        "parameters": [{ "$ref": "#/components/parameters/billing_group_id" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingGroupGetResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["billing:read"] }]
      },
      "put": {
        "summary": "Update billing group",
        "tags": ["BillingGroup"],
        "operationId": "BillingGroupUpdate",
        "parameters": [{ "$ref": "#/components/parameters/billing_group_id" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingGroupUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingGroupUpdateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["billing:write"] }]
      }
    },
    "/billing-group/{billing_group_id}/events": {
      "get": {
        "summary": "List billing group events",
        "tags": ["BillingGroup"],
        "operationId": "BillingGroupEventList",
        "parameters": [{ "$ref": "#/components/parameters/billing_group_id" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingGroupEventListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["billing:read"] }]
      }
    },
    "/billing-group/{billing_group_id}/invoice/{invoice_number}/csv": {
      "get": {
        "summary": "Get a single invoice as a CSV of invoice lines",
        "tags": ["BillingGroup"],
        "operationId": "BillingGroupInvoiceCsvGet",
        "parameters": [
          { "$ref": "#/components/parameters/billing_group_id" },
          { "$ref": "#/components/parameters/invoice_number" },
          {
            "$ref": "#/components/parameters/billinggroupinvoicecsvget_cookie"
          },
          {
            "$ref": "#/components/parameters/billinggroupinvoicecsvget_project"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a CSV report",
            "content": {
              "text/csv": { "schema": { "type": "string", "format": "binary" } }
            }
          }
        }
      }
    },
    "/billing-group/{billing_group_id}/invoice/{invoice_number}/{download_cookie}": {
      "get": {
        "summary": "Download PDF invoice",
        "tags": ["BillingGroup"],
        "operationId": "BillingGroupInvoiceDownload",
        "parameters": [
          { "$ref": "#/components/parameters/billing_group_id" },
          { "$ref": "#/components/parameters/invoice_number" },
          { "$ref": "#/components/parameters/download_cookie" }
        ],
        "responses": {
          "200": {
            "description": "Returns a PDF report",
            "content": {
              "application/pdf": {
                "schema": { "type": "string", "format": "binary" }
              }
            }
          }
        }
      }
    },
    "/billing-group/{billing_group_id}/invoice/{invoice_number}": {
      "get": {
        "summary": "Get a single invoice",
        "tags": ["BillingGroup"],
        "operationId": "BillingGroupInvoiceGet",
        "deprecated": true,
        "description": "<p>Use GET /invoices/{invoice_number}</p>",
        "parameters": [
          { "$ref": "#/components/parameters/billing_group_id" },
          { "$ref": "#/components/parameters/invoice_number" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingGroupInvoiceGetResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["billing:read"] }]
      }
    },
    "/billing-group/{billing_group_id}/invoice/{invoice_number}/lines": {
      "get": {
        "summary": "Get invoice lines for a single invoice",
        "tags": ["BillingGroup"],
        "operationId": "BillingGroupInvoiceLinesList",
        "parameters": [
          { "$ref": "#/components/parameters/billing_group_id" },
          { "$ref": "#/components/parameters/invoice_number" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingGroupInvoiceLinesListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["billing:read"] }]
      }
    },
    "/billing-group/{billing_group_id}/invoice": {
      "get": {
        "summary": "Get invoices generated for billing group",
        "tags": ["BillingGroup"],
        "operationId": "BillingGroupInvoiceList",
        "parameters": [{ "$ref": "#/components/parameters/billing_group_id" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingGroupInvoiceListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["billing:read"] }]
      }
    },
    "/billing-group/{billing_group_id}/project-assign/{project}": {
      "post": {
        "summary": "Assign project to billing group",
        "tags": ["BillingGroup"],
        "operationId": "BillingGroupProjectAssign",
        "parameters": [
          { "$ref": "#/components/parameters/billing_group_id" },
          { "$ref": "#/components/parameters/project" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingGroupProjectAssignResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["billing:write"] }]
      }
    },
    "/billing-group/{billing_group_id}/projects": {
      "get": {
        "summary": "Get projects assigned to billing group",
        "tags": ["BillingGroup"],
        "operationId": "BillingGroupProjectList",
        "parameters": [{ "$ref": "#/components/parameters/billing_group_id" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingGroupProjectListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["billing:read"] }]
      }
    },
    "/billing-group/{billing_group_id}/projects-assign": {
      "post": {
        "summary": "Assign projects to billing group",
        "tags": ["BillingGroup"],
        "operationId": "BillingGroupProjectsAssign",
        "parameters": [{ "$ref": "#/components/parameters/billing_group_id" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingGroupProjectsAssignRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingGroupProjectsAssignResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["billing:write"] }]
      }
    },
    "/invoices/{invoice_number}": {
      "get": {
        "summary": "Get a single invoice",
        "tags": ["Billing"],
        "operationId": "InvoiceGet",
        "parameters": [{ "$ref": "#/components/parameters/invoice_number" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvoiceGetResponse" }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["billing:read"] }]
      }
    },
    "/organizations/{organization_id}/addresses": {
      "post": {
        "summary": "[EXPERIMENTAL] Create new address for an organization",
        "tags": ["Billing"],
        "operationId": "OrganizationAddressCreate",
        "x-experimental": true,
        "description": "<p><strong>[EXPERIMENTAL]:</strong> This endpoint is experimental. It may change or even disappear at any time. Do not rely on it for production purposes.<p>",
        "parameters": [{ "$ref": "#/components/parameters/organization_id" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationAddressCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationAddressCreateResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["organization_not_found"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "organization_not_found: Organization not found."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["user_not_organization_admin"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "user_not_organization_admin: User is not organization administrator."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["accounts:write", "billing:write"] }
        ]
      },
      "get": {
        "summary": "[EXPERIMENTAL] List addresses of an organization",
        "tags": ["Billing"],
        "operationId": "OrganizationAddressList",
        "x-experimental": true,
        "description": "<p><strong>[EXPERIMENTAL]:</strong> This endpoint is experimental. It may change or even disappear at any time. Do not rely on it for production purposes.<p>",
        "parameters": [{ "$ref": "#/components/parameters/organization_id" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationAddressListResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["organization_not_found"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "organization_not_found: Organization not found."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["accounts:read", "billing:read"] }
        ]
      }
    },
    "/organizations/{organization_id}/addresses/{address_id}": {
      "delete": {
        "summary": "[EXPERIMENTAL] Delete an address of an organization",
        "tags": ["Billing"],
        "operationId": "OrganizationAddressDelete",
        "x-experimental": true,
        "description": "<p><strong>[EXPERIMENTAL]:</strong> This endpoint is experimental. It may change or even disappear at any time. Do not rely on it for production purposes.<p>",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/address_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationAddressDeleteResponse"
                }
              }
            }
          },
          "403": {
            "description": "Operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["user_not_organization_admin"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "user_not_organization_admin: User is not organization administrator."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["organization_not_found"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "organization_not_found: Organization not found."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["accounts:write", "billing:write"] }
        ]
      },
      "get": {
        "summary": "[EXPERIMENTAL] Get organization address",
        "tags": ["Billing"],
        "operationId": "OrganizationAddressGet",
        "x-experimental": true,
        "description": "<p><strong>[EXPERIMENTAL]:</strong> This endpoint is experimental. It may change or even disappear at any time. Do not rely on it for production purposes.<p>",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/address_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationAddressGetResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["organization_not_found"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "organization_not_found: Organization not found."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["accounts:read", "billing:read"] }
        ]
      },
      "patch": {
        "summary": "[EXPERIMENTAL] Update an address of an organization",
        "tags": ["Billing"],
        "operationId": "OrganizationAddressUpdate",
        "x-experimental": true,
        "description": "<p><strong>[EXPERIMENTAL]:</strong> This endpoint is experimental. It may change or even disappear at any time. Do not rely on it for production purposes.<p>",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/address_id" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationAddressUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationAddressUpdateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["user_not_organization_admin"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "user_not_organization_admin: User is not organization administrator."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["organization_not_found"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "organization_not_found: Organization not found."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["accounts:write", "billing:write"] }
        ]
      }
    },
    "/clouds": {
      "get": {
        "summary": "List cloud platforms",
        "tags": ["Cloud_platforms"],
        "operationId": "ListClouds",
        "description": "<p>Returns a list of available cloud platforms.</p>",
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListCloudsResponse" }
              }
            }
          }
        }
      }
    },
    "/project/{project}/clouds": {
      "get": {
        "summary": "List cloud platforms for a project",
        "tags": ["Cloud_platforms"],
        "operationId": "ListProjectClouds",
        "description": "<p>Returns a list of cloud platforms available for a project.</p>",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListProjectCloudsResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:read"] }]
      }
    },
    "/tenants/{tenant}/privatelink-availability": {
      "get": {
        "summary": "List privatelink clouds and prices",
        "tags": ["Cloud_platforms"],
        "operationId": "PublicPrivatelinkAvailabilityList",
        "description": "<p>Returns a list of cloud platforms supporting privatelink along with privatelink costs for specific cloud platforms.</p>",
        "parameters": [{ "$ref": "#/components/parameters/tenant" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicPrivatelinkAvailabilityListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenant}/static-ip-availability": {
      "get": {
        "summary": "List static IP clouds and prices",
        "tags": ["Cloud_platforms"],
        "operationId": "PublicStaticIPAvailabilityList",
        "description": "<p>Returns a list of cloud platforms supporting static IP addresses along with static IP addresses costs for specific cloud platforms.</p>",
        "parameters": [{ "$ref": "#/components/parameters/tenant" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicStaticIPAvailabilityListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/organization/{organization_id}/domains": {
      "post": {
        "summary": "Create a domain",
        "tags": ["Domains"],
        "operationId": "OrganizationDomainAdd",
        "description": "<p>Creates a new domain in an organization.</p>",
        "parameters": [{ "$ref": "#/components/parameters/organization_id" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationDomainAddRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDomainAddResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:write"] }]
      },
      "get": {
        "summary": "List domains",
        "tags": ["Domains"],
        "operationId": "OrganizationDomainsList",
        "description": "<p>Returns a list of all verified domains in an organization.</p>",
        "parameters": [{ "$ref": "#/components/parameters/organization_id" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDomainsListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:read"] }]
      }
    },
    "/organization/{organization_id}/domains/{domain_id}": {
      "patch": {
        "summary": "Update a domain",
        "tags": ["Domains"],
        "operationId": "OrganizationDomainUpdate",
        "description": "<p>Updates a domain in an organization.</p>",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/domain_id" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationDomainUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDomainUpdateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:write"] }]
      },
      "delete": {
        "summary": "Delete a domain",
        "tags": ["Domains"],
        "operationId": "OrganizationDomainsRemove",
        "description": "<p>Deletes a domain from an organization.</p>",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/domain_id" }
        ],
        "responses": {
          "204": { "description": "Delete a domain", "content": {} }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:write"] }]
      }
    },
    "/organization/{organization_id}/domains/{domain_id}/verify": {
      "post": {
        "summary": "Verify a domain",
        "tags": ["Domains"],
        "operationId": "OrganizationDomainVerify",
        "description": "<p>Verifies a domain in an organization. If a user signs up to the Aiven platform with a verified domain, they are automatically added as managed users to the organization that has this domain verified.</p>",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/domain_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDomainVerifyResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:write"] }]
      }
    },
    "/organization/{organization_id}/user-groups": {
      "post": {
        "summary": "Create a group",
        "tags": ["Groups"],
        "operationId": "UserGroupCreate",
        "description": "<p>Create a new user group in an organization</p>",
        "parameters": [{ "$ref": "#/components/parameters/organization_id" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupCreateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:write"] }]
      },
      "get": {
        "summary": "List groups",
        "tags": ["Groups"],
        "operationId": "UserGroupsList",
        "description": "<p>List all user groups within an organization</p>",
        "parameters": [{ "$ref": "#/components/parameters/organization_id" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupsListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:read"] }]
      }
    },
    "/organization/{organization_id}/user-groups/{user_group_id}": {
      "delete": {
        "summary": "Delete a group",
        "tags": ["Groups"],
        "operationId": "UserGroupDelete",
        "description": "<p>Delete a user group from an organization</p>",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/user_group_id" }
        ],
        "responses": {
          "204": { "description": "Delete a group", "content": {} },
          "409": {
            "description": "Request conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["resource_managed_by_scim"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "resource_managed_by_scim: Cannot perform operation on SCIM managed resource"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:write"] }]
      },
      "get": {
        "summary": "Retrieve a group",
        "tags": ["Groups"],
        "operationId": "UserGroupGet",
        "description": "<p>Retrieve the details of a user group</p>",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/user_group_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupGetResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:read"] }]
      },
      "patch": {
        "summary": "Update a group",
        "tags": ["Groups"],
        "operationId": "UserGroupUpdate",
        "description": "<p>Update details of a user group</p>",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/user_group_id" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupUpdateResponse"
                }
              }
            }
          },
          "409": {
            "description": "Request conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["resource_managed_by_scim"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "resource_managed_by_scim: Cannot perform operation on SCIM managed resource"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:write"] }]
      }
    },
    "/organization/{organization_id}/user-groups/{user_group_id}/members": {
      "get": {
        "summary": "List group members",
        "tags": ["Groups"],
        "operationId": "UserGroupMemberList",
        "description": "<p>List members of a user group</p>",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/user_group_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupMemberListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:read"] }]
      },
      "patch": {
        "summary": "Add or remove group members",
        "tags": ["Groups"],
        "operationId": "UserGroupMembersUpdate",
        "description": "<p>Add or remove members of a user group</p>",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/user_group_id" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupMembersUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Add or remove group members",
            "content": {}
          },
          "409": {
            "description": "Request conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["resource_managed_by_scim"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "resource_managed_by_scim: Cannot perform operation on SCIM managed resource"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:write"] }]
      }
    },
    "/organization/{organization_id}/config/authentication": {
      "get": {
        "summary": "Retrieve authentication configuration",
        "tags": ["Organizations"],
        "operationId": "OrganizationAuthenticationConfigGet",
        "description": "<p>Retrieve current authentication configuration for an organization.</p>",
        "parameters": [{ "$ref": "#/components/parameters/organization_id" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationAuthenticationConfigGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": ["accounts:read", "authentication:read"]
          }
        ]
      },
      "patch": {
        "summary": "Update authentication configuration",
        "tags": ["Organizations"],
        "operationId": "OrganizationAuthenticationConfigUpdate",
        "description": "<p>Update current authentication configuration for an organization.</p>",
        "parameters": [{ "$ref": "#/components/parameters/organization_id" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationAuthenticationConfigUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationAuthenticationConfigUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": ["accounts:write", "authentication:write"]
          }
        ]
      }
    },
    "/organization/{organization_id}": {
      "get": {
        "summary": "Get information about an organization",
        "tags": ["Organizations"],
        "operationId": "OrganizationGet",
        "parameters": [{ "$ref": "#/components/parameters/organization_id" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationGetResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:read"] }]
      },
      "patch": {
        "summary": "Update organization's details",
        "tags": ["Organizations"],
        "operationId": "OrganizationUpdate",
        "parameters": [{ "$ref": "#/components/parameters/organization_id" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUpdateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:write"] }]
      }
    },
    "/organization/{organization_id}/projects": {
      "post": {
        "summary": "[EXPERIMENTAL] Create project under the organization",
        "tags": ["Organizations"],
        "operationId": "OrganizationProjectsCreate",
        "x-experimental": true,
        "description": "<p><strong>[EXPERIMENTAL]:</strong> This endpoint is experimental. It may change or even disappear at any time. Do not rely on it for production purposes.<p>",
        "parameters": [{ "$ref": "#/components/parameters/organization_id" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationProjectsCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationProjectsCreateResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": [
                              "project_not_found",
                              "organization_not_found"
                            ],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "project_not_found: Project not found. organization_not_found: Organization not found."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["user_not_organization_admin"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "user_not_organization_admin: User is not organization administrator."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Request conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["project_already_exists"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "project_already_exists: Project already exists"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["accounts:write", "projects:write"] }
        ]
      },
      "get": {
        "summary": "[EXPERIMENTAL] List projects under the organization",
        "tags": ["Organizations"],
        "operationId": "OrganizationProjectsList",
        "x-experimental": true,
        "description": "<p><strong>[EXPERIMENTAL]:</strong> This endpoint is experimental. It may change or even disappear at any time. Do not rely on it for production purposes.<p>",
        "parameters": [{ "$ref": "#/components/parameters/organization_id" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationProjectsListResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["project_not_found"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "project_not_found: Project not found"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["accounts:read", "projects:read"] }
        ]
      }
    },
    "/organization/{organization_id}/projects/{project_id}": {
      "delete": {
        "summary": "[EXPERIMENTAL] Delete project under the organization",
        "tags": ["Organizations"],
        "operationId": "OrganizationProjectsDelete",
        "x-experimental": true,
        "description": "<p><strong>[EXPERIMENTAL]:</strong> This endpoint is experimental. It may change or even disappear at any time. Do not rely on it for production purposes.<p>",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/project_id" }
        ],
        "responses": {
          "204": {
            "description": "Delete project under the organization",
            "content": {}
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["project_not_found"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "project_not_found: Project not found"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["user_not_organization_admin"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "user_not_organization_admin: User is not organization administrator."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["accounts:write", "projects:write"] }
        ]
      },
      "patch": {
        "summary": "[EXPERIMENTAL] Update project under the organization",
        "tags": ["Organizations"],
        "operationId": "OrganizationProjectsUpdate",
        "x-experimental": true,
        "description": "<p><strong>[EXPERIMENTAL]:</strong> This endpoint is experimental. It may change or even disappear at any time. Do not rely on it for production purposes.<p>",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/project_id" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationProjectsUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationProjectsUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["project_not_found"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "project_not_found: Project not found"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": [
                              "user_not_organization_admin",
                              "project_move_organizations_internal_config_not_match"
                            ],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "user_not_organization_admin: User is not organization administrator.. project_move_organizations_internal_config_not_match: Project internal configuration does not match between organizations"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["accounts:write", "projects:write"] }
        ]
      }
    },
    "/organization/{organization_id}/invitation/{user_email}": {
      "post": {
        "summary": "Accept a user invitation to the organization",
        "tags": ["Organizations"],
        "operationId": "OrganizationUserInvitationAccept",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/user_email" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationUserInvitationAcceptRequestBody"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Accept a user invitation to the organization",
            "content": {}
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:read"] }]
      },
      "delete": {
        "summary": "Remove an invitation to the organization",
        "tags": ["Organizations"],
        "operationId": "OrganizationUserInvitationDelete",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/user_email" }
        ],
        "responses": {
          "204": {
            "description": "Remove an invitation to the organization",
            "content": {}
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:read"] }]
      }
    },
    "/organization/{organization_id}/invitation": {
      "get": {
        "summary": "List user invitations to the organization",
        "tags": ["Organizations"],
        "operationId": "OrganizationUserInvitationsList",
        "parameters": [{ "$ref": "#/components/parameters/organization_id" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUserInvitationsListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:read"] }]
      },
      "post": {
        "summary": "Invite a user to the organization",
        "tags": ["Organizations"],
        "operationId": "OrganizationUserInvite",
        "parameters": [{ "$ref": "#/components/parameters/organization_id" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationUserInviteRequestBody"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Invite a user to the organization",
            "content": {}
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:read"] }]
      }
    },
    "/organizations": {
      "post": {
        "summary": "Create an organization",
        "tags": ["Organizations"],
        "operationId": "UserOrganizationCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserOrganizationCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOrganizationCreateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:write"] }]
      },
      "get": {
        "summary": "List organizations the user belongs to",
        "tags": ["Organizations"],
        "operationId": "UserOrganizationsList",
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOrganizationsListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:read"] }]
      }
    },
    "/card": {
      "post": {
        "summary": "Add credit card for user",
        "tags": ["Payment"],
        "operationId": "UserCreditCardAdd",
        "deprecated": true,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreditCardAddRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreditCardAddResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["payments:write"] }]
      },
      "get": {
        "summary": "List user's credit cards",
        "tags": ["Payment"],
        "operationId": "UserCreditCardsList",
        "deprecated": true,
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreditCardsListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["payments:read"] }]
      }
    },
    "/card/{card_id}": {
      "delete": {
        "summary": "Delete user's credit card",
        "tags": ["Payment"],
        "operationId": "UserCreditCardDelete",
        "deprecated": true,
        "parameters": [{ "$ref": "#/components/parameters/card_id" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreditCardDeleteResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["payments:write"] }]
      },
      "put": {
        "summary": "Update user's credit card",
        "tags": ["Payment"],
        "operationId": "UserCreditCardUpdate",
        "deprecated": true,
        "parameters": [{ "$ref": "#/components/parameters/card_id" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreditCardUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreditCardUpdateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["payments:read"] }]
      }
    },
    "/organization/{organization_id}/permissions/{resource_type}/{resource_id}": {
      "get": {
        "summary": "[EXPERIMENTAL] List of permissions",
        "tags": ["Permissions"],
        "operationId": "PermissionsGet",
        "description": "<p><strong>[EXPERIMENTAL]:</strong> This endpoint is experimental. It may change or even disappear at any time. Do not rely on it for production purposes.<p>\n\n<p>Returns a list of permissions for a resource.</p>",
        "x-experimental": true,
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/resource_type" },
          { "$ref": "#/components/parameters/resource_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionsGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["unsupported_resource_type"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "unsupported_resource_type: The resource type is not supported for the current operation"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": ["accounts:read", "authentication:read"]
          }
        ]
      },
      "put": {
        "summary": "[EXPERIMENTAL] Set permissions",
        "tags": ["Permissions"],
        "operationId": "PermissionsSet",
        "description": "<p><strong>[EXPERIMENTAL]:</strong> This endpoint is experimental. It may change or even disappear at any time. Do not rely on it for production purposes.<p>\n\n<p>Replaces permissions for a resource. The entries entry provided in the request body are applied, replacing all the previously defined permissions defined on the specified resource. Updates are not atomic (changes are computed and each are individually applied); if an error occurs, permissions may have been partially updated. They are however idempotent, so in case of transient errors it is possible to simply retry the request.</p>",
        "x-experimental": true,
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/resource_type" },
          { "$ref": "#/components/parameters/resource_id" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionsSetRequestBody"
              }
            }
          }
        },
        "responses": {
          "204": { "description": "Set permissions", "content": {} },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["unsupported_resource_type"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "unsupported_resource_type: The resource type is not supported for the current operation"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": ["accounts:write", "authentication:write"]
          }
        ]
      },
      "patch": {
        "summary": "[EXPERIMENTAL] Update permissions",
        "tags": ["Permissions"],
        "operationId": "PermissionsUpdate",
        "description": "<p><strong>[EXPERIMENTAL]:</strong> This endpoint is experimental. It may change or even disappear at any time. Do not rely on it for production purposes.<p>\n\n<p>Updates permissions for a resource. Each entry provided in the request body is applied, replacing the previous assignment for the target principal. To remove permission assignments an entry with an empty set of permissions must be provided. Updates are not atomic (each entry is individually applied); if an error occurs, permissions may have been partially updated. They are however idempotent, so in case of transient errors it is possible to simply retry the request.</p>",
        "x-experimental": true,
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/resource_type" },
          { "$ref": "#/components/parameters/resource_id" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionsUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "204": { "description": "Update permissions", "content": {} },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["unsupported_resource_type"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "unsupported_resource_type: The resource type is not supported for the current operation"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": ["accounts:write", "authentication:write"]
          }
        ]
      }
    },
    "/project/{project}/vpc-peering-connection-types": {
      "get": {
        "summary": "List VPC peering connection types for a project",
        "tags": ["Project"],
        "operationId": "ListProjectVpcPeeringConnectionTypes",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListProjectVpcPeeringConnectionTypesResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:read"] }]
      }
    },
    "/project/{project}/alerts": {
      "get": {
        "summary": "List active alerts for a project",
        "tags": ["Project"],
        "operationId": "ProjectAlertsList",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectAlertsListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:read"] }]
      }
    },
    "/project": {
      "post": {
        "summary": "Create a project",
        "tags": ["Project"],
        "operationId": "ProjectCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCreateResponse"
                }
              }
            }
          },
          "409": {
            "description": "Request conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["project_already_exists"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "project_already_exists: Project already exists"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:write"] }]
      },
      "get": {
        "summary": "List projects",
        "tags": ["Project"],
        "operationId": "ProjectList",
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProjectListResponse" }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:read"] }]
      }
    },
    "/project/{project}": {
      "delete": {
        "summary": "Delete project",
        "tags": ["Project"],
        "operationId": "ProjectDelete",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDeleteResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:write"] }]
      },
      "get": {
        "summary": "Get project details",
        "tags": ["Project"],
        "operationId": "ProjectGet",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProjectGetResponse" }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:read"] }]
      },
      "put": {
        "summary": "Update project",
        "tags": ["Project"],
        "operationId": "ProjectUpdate",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectUpdateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:write"] }]
      }
    },
    "/project/{project}/download-sbom/{file_format}/{download_cookie}": {
      "get": {
        "summary": "Download SBOM report",
        "tags": ["Project"],
        "operationId": "ProjectDownloadSBOMReport",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/file_format" },
          { "$ref": "#/components/parameters/download_cookie" }
        ],
        "responses": {
          "200": {
            "description": "Returns a SBOM report",
            "content": {
              "text/csv": {
                "schema": { "type": "string", "format": "binary" }
              },
              "text/json": {
                "schema": { "type": "string", "format": "binary" }
              }
            }
          }
        }
      }
    },
    "/project/{project}/generate-sbom-download-url/{file_format}": {
      "get": {
        "summary": "Generate SBOM for project",
        "tags": ["Project"],
        "operationId": "ProjectGenerateSbomDownloadUrl",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/file_format" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectGenerateSbomDownloadUrlResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:read"] }]
      }
    },
    "/project/{project}/events": {
      "get": {
        "summary": "Get project event log entries",
        "tags": ["Project"],
        "operationId": "ProjectGetEventLogs",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectGetEventLogsResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:read"] }]
      }
    },
    "/project/{project}/invite": {
      "post": {
        "summary": "Send project membership invitation",
        "tags": ["Project"],
        "operationId": "ProjectInvite",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectInviteRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectInviteResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:write"] }]
      }
    },
    "/project/{project}/invite/{invite_verification_code}": {
      "post": {
        "summary": "Confirm project invite",
        "tags": ["Project"],
        "operationId": "ProjectInviteAccept",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/invite_verification_code" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectInviteAcceptResponse"
                }
              }
            }
          }
        }
      }
    },
    "/project/{project}/invite/{invited_email}": {
      "delete": {
        "summary": "Delete an invitation to a project",
        "tags": ["Project"],
        "operationId": "ProjectInviteDelete",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/invited_email" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectInviteDeleteResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:write"] }]
      }
    },
    "/project/{project}/privatelink-availability": {
      "get": {
        "summary": "List Privatelink cloud availability and prices for a project",
        "tags": ["Project"],
        "operationId": "ProjectPrivatelinkAvailabilityList",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectPrivatelinkAvailabilityListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["privatelink:read"] }]
      }
    },
    "/project/{project}/service-types/{service_type}/plans": {
      "get": {
        "summary": "List service plans",
        "tags": ["Project"],
        "operationId": "ProjectServicePlanList",
        "description": "<p>Returns a list of the plans available for a service type.</p>",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_type" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectServicePlanListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:read"] }]
      }
    },
    "/project/{project}/pricing/service-types/{service_type}/plans/{service_plan}/clouds/{cloud}": {
      "get": {
        "summary": "Get plan pricing",
        "tags": ["Project"],
        "operationId": "ProjectServicePlanPriceGet",
        "description": "<p>Returns pricing information for a service plan.</p>",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_type" },
          { "$ref": "#/components/parameters/service_plan" },
          { "$ref": "#/components/parameters/cloud" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectServicePlanPriceGetResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:read"] }]
      }
    },
    "/project/{project}/service-types/{service_type}/plans/{service_plan}": {
      "get": {
        "summary": "Get service plan details",
        "tags": ["Project"],
        "operationId": "ProjectServicePlanSpecsGet",
        "description": "<p>Returns information about a plan for a service type such as the disk storage and backup configuration.</p>",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_type" },
          { "$ref": "#/components/parameters/service_plan" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectServicePlanSpecsGetResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:read"] }]
      }
    },
    "/project/{project}/service-types/{service_type}": {
      "get": {
        "summary": "Get service type details",
        "tags": ["Project"],
        "operationId": "ProjectServiceTypesGet",
        "description": "<p>Returns the configuration options for a service type.</p>",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_type" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectServiceTypesGetResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:read"] }]
      }
    },
    "/project/{project}/service-types": {
      "get": {
        "summary": "List service types",
        "tags": ["Project"],
        "operationId": "ProjectServiceTypesList",
        "description": "<p>Returns a list of all available service types and their configuration options.</p>",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectServiceTypesListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:read"] }]
      }
    },
    "/project/{project}/tags": {
      "get": {
        "summary": "List all tags attached to this project",
        "tags": ["Project"],
        "operationId": "ProjectTagsList",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTagsListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:read"] }]
      },
      "put": {
        "summary": "Replace all project tags with a new set of tags, deleting old ones",
        "tags": ["Project"],
        "operationId": "ProjectTagsReplace",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectTagsReplaceRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTagsReplaceResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:write"] }]
      },
      "patch": {
        "summary": "Update one or more tags, creating ones that don't exist, and deleting ones given NULL value",
        "tags": ["Project"],
        "operationId": "ProjectTagsUpdate",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectTagsUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTagsUpdateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:write"] }]
      }
    },
    "/project/{project}/users": {
      "get": {
        "summary": "List users with access to the project. May contain same user multiple times if they belong to multiple teams associated to the project",
        "tags": ["Project"],
        "operationId": "ProjectUserList",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectUserListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:read"] }]
      }
    },
    "/project/{project}/user/{user_email}": {
      "delete": {
        "summary": "Remove user from the project",
        "tags": ["Project"],
        "operationId": "ProjectUserRemove",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/user_email" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectUserRemoveResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:write"] }]
      },
      "put": {
        "summary": "Update a project user",
        "tags": ["Project"],
        "operationId": "ProjectUserUpdate",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/user_email" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectUserUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectUserUpdateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:write"] }]
      }
    },
    "/project/{project}/vpcs": {
      "post": {
        "summary": "Create a VPC in a cloud for the project",
        "tags": ["Project"],
        "operationId": "VpcCreate",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VpcCreateRequestBody" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VpcCreateResponse" }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:write"] }]
      },
      "get": {
        "summary": "List VPCs for a project",
        "tags": ["Project"],
        "operationId": "VpcList",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VpcListResponse" }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:read"] }]
      }
    },
    "/project/{project}/vpcs/{project_vpc_id}": {
      "delete": {
        "summary": "Delete a project VPC",
        "tags": ["Project"],
        "operationId": "VpcDelete",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/project_vpc_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VpcDeleteResponse" }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:write"] }]
      },
      "get": {
        "summary": "Get VPC information",
        "tags": ["Project"],
        "operationId": "VpcGet",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/project_vpc_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VpcGetResponse" }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:read"] }]
      }
    },
    "/project/{project}/vpcs/{project_vpc_id}/peering-connections": {
      "post": {
        "summary": "Create a peering connection for a project VPC",
        "tags": ["Project"],
        "operationId": "VpcPeeringConnectionCreate",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/project_vpc_id" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcPeeringConnectionCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcPeeringConnectionCreateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:write"] }]
      }
    },
    "/project/{project}/vpcs/{project_vpc_id}/peering-connections/peer-accounts/{peer_cloud_account}/peer-vpcs/{peer_vpc}": {
      "delete": {
        "summary": "Delete a peering connection for a project VPC",
        "tags": ["Project"],
        "operationId": "VpcPeeringConnectionDelete",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/project_vpc_id" },
          { "$ref": "#/components/parameters/peer_cloud_account" },
          { "$ref": "#/components/parameters/peer_vpc" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcPeeringConnectionDeleteResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:write"] }]
      }
    },
    "/project/{project}/vpcs/{project_vpc_id}/user-peer-network-cidrs": {
      "put": {
        "summary": "Update user-defined peer network CIDRs for a project VPC",
        "tags": ["Project"],
        "operationId": "VpcPeeringConnectionUpdate",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/project_vpc_id" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcPeeringConnectionUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcPeeringConnectionUpdateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:write"] }]
      }
    },
    "/project/{project}/vpcs/{project_vpc_id}/peering-connections/peer-accounts/{peer_cloud_account}/peer-vpcs/{peer_vpc}/peer-regions/{peer_region}": {
      "delete": {
        "summary": "Delete a peering connection for a project VPC",
        "tags": ["Project"],
        "operationId": "VpcPeeringConnectionWithRegionDelete",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/project_vpc_id" },
          { "$ref": "#/components/parameters/peer_cloud_account" },
          { "$ref": "#/components/parameters/peer_vpc" },
          { "$ref": "#/components/parameters/peer_region" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcPeeringConnectionWithRegionDeleteResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:write"] }]
      }
    },
    "/project/{project}/vpcs/{project_vpc_id}/peering-connections/peer-accounts/{peer_cloud_account}/peer-resource-groups/{peer_resource_group}/peer-vpcs/{peer_vpc}": {
      "delete": {
        "summary": "Delete a peering connection for a project VPC",
        "tags": ["Project"],
        "operationId": "VpcPeeringConnectionWithResourceGroupDelete",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/project_vpc_id" },
          { "$ref": "#/components/parameters/peer_cloud_account" },
          { "$ref": "#/components/parameters/peer_resource_group" },
          { "$ref": "#/components/parameters/peer_vpc" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcPeeringConnectionWithResourceGroupDeleteResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:write"] }]
      }
    },
    "/project/{project}/credits": {
      "post": {
        "summary": "Claim a credit code",
        "tags": ["Project_Billing"],
        "operationId": "ProjectCreditsClaim",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreditsClaimRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCreditsClaimResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["projects:write", "billing:write"] }
        ]
      },
      "get": {
        "summary": "List project credits",
        "tags": ["Project_Billing"],
        "operationId": "ProjectCreditsList",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCreditsListResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["projects:read", "billing:read"] }
        ]
      }
    },
    "/project/{project}/invoice/{invoice_number}/{download_cookie}": {
      "get": {
        "summary": "Download PDF invoice",
        "tags": ["Project_Billing"],
        "operationId": "ProjectInvoiceGet",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/invoice_number" },
          { "$ref": "#/components/parameters/download_cookie" }
        ],
        "responses": {
          "200": {
            "description": "Returns a PDF report",
            "content": {
              "application/pdf": {
                "schema": { "type": "string", "format": "binary" }
              }
            }
          }
        }
      }
    },
    "/project/{project}/invoice": {
      "get": {
        "summary": "List project invoices",
        "tags": ["Project_Billing"],
        "operationId": "ProjectInvoiceList",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectInvoiceListResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["projects:read", "billing:read"] }
        ]
      }
    },
    "/project/{project}/kms/ca": {
      "get": {
        "summary": "Retrieve project CA certificate",
        "tags": ["Project_Key_Management"],
        "operationId": "ProjectKmsGetCA",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectKmsGetCAResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/alloydbomni/google_cloud_private_key": {
      "get": {
        "summary": "Get Google service account key",
        "tags": ["Service:_AlloyDB_Omni"],
        "operationId": "AlloyDbOmniGoogleCloudPrivateKeyIdentify",
        "description": "<p>Retrieve an identifier of the Google Cloud service account key registered for Aiven for AlloyDB Omni AI model integrations.</p>",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlloyDbOmniGoogleCloudPrivateKeyIdentifyResponse"
                }
              }
            }
          },
          "403": {
            "description": "Operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["request_forbidden"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "request_forbidden: Not authorized to view the request"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["project_not_found"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "project_not_found: Project not found"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Request conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["invalid_service_type"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "invalid_service_type: Invalid service type for this operation"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      },
      "delete": {
        "summary": "Delete Google service account key",
        "tags": ["Service:_AlloyDB_Omni"],
        "operationId": "AlloyDbOmniGoogleCloudPrivateKeyRemove",
        "description": "<p>Delete an identifier of the Google Cloud service account key from your Aiven for AlloyDB Omni service. As a consequence, you won't be able to access or use AI models with this service.</p>",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlloyDbOmniGoogleCloudPrivateKeyRemoveResponse"
                }
              }
            }
          },
          "403": {
            "description": "Operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["request_forbidden"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "request_forbidden: Not authorized to view the request"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["project_not_found"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "project_not_found: Project not found"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Request conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["invalid_service_type"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "invalid_service_type: Invalid service type for this operation"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["services:read", "services:write"] }
        ]
      },
      "post": {
        "summary": "Add Google service account key",
        "tags": ["Service:_AlloyDB_Omni"],
        "operationId": "AlloyDbOmniGoogleCloudPrivateKeySet",
        "description": "<p>Register an identifier of the Google Cloud service account key for Aiven for AlloyDB Omni AI model integrations.</p>",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlloyDbOmniGoogleCloudPrivateKeySetRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlloyDbOmniGoogleCloudPrivateKeySetResponse"
                }
              }
            }
          },
          "403": {
            "description": "Operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["request_forbidden"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "request_forbidden: Not authorized to view the request"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["project_not_found"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "project_not_found: Project not found"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Request conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["invalid_service_type"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "invalid_service_type: Invalid service type for this operation"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["services:read", "services:write"] }
        ]
      }
    },
    "/project/{project}/service/{service_name}/clickhouse/query": {
      "get": {
        "summary": "List active queries",
        "tags": ["Service:_ClickHouse"],
        "operationId": "ServiceClickHouseCurrentQueries",
        "description": "<p>Returns a list of active queries on a cluster.</p>",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceClickHouseCurrentQueriesResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      },
      "post": {
        "summary": "Execute an SQL query",
        "tags": ["Service:_ClickHouse"],
        "operationId": "ServiceClickHouseQuery",
        "description": "<p>Executes an SQL query.</p>",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceClickHouseQueryRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceClickHouseQueryResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/clickhouse/db": {
      "post": {
        "summary": "Create a database",
        "tags": ["Service:_ClickHouse"],
        "operationId": "ServiceClickHouseDatabaseCreate",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceClickHouseDatabaseCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceClickHouseDatabaseCreateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "get": {
        "summary": "List all databases",
        "tags": ["Service:_ClickHouse"],
        "operationId": "ServiceClickHouseDatabaseList",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceClickHouseDatabaseListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/clickhouse/db/{database}": {
      "delete": {
        "summary": "Delete a database",
        "tags": ["Service:_ClickHouse"],
        "operationId": "ServiceClickHouseDatabaseDelete",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/database" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceClickHouseDatabaseDeleteResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/clickhouse/query/stats": {
      "get": {
        "summary": "Return statistics on recent queries",
        "tags": ["Service:_ClickHouse"],
        "operationId": "ServiceClickHouseQueryStats",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          {
            "$ref": "#/components/parameters/serviceclickhousequerystats_limit"
          },
          {
            "$ref": "#/components/parameters/serviceclickhousequerystats_offset"
          },
          {
            "$ref": "#/components/parameters/serviceclickhousequerystats_order_by"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceClickHouseQueryStatsResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/clickhouse/tiered-storage/summary": {
      "get": {
        "summary": "Get the ClickHouse tiered storage summary",
        "tags": ["Service:_ClickHouse"],
        "operationId": "ServiceClickHouseTieredStorageSummary",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceClickHouseTieredStorageSummaryResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/flink/application/{application_id}/deployment/{deployment_id}/cancel": {
      "post": {
        "summary": "Cancel an ApplicationDeployment",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkCancelApplicationDeployment",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/application_id" },
          { "$ref": "#/components/parameters/deployment_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkCancelApplicationDeploymentResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/flink/jar_application/{application_id}/deployment/{deployment_id}/cancel": {
      "post": {
        "summary": "[EXPERIMENTAL] Cancel a JarApplicationDeployment",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkCancelJarApplicationDeployment",
        "x-experimental": true,
        "description": "<p><strong>[EXPERIMENTAL]:</strong> This endpoint is experimental. It may change or even disappear at any time. Do not rely on it for production purposes.<p>",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/application_id" },
          { "$ref": "#/components/parameters/deployment_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkCancelJarApplicationDeploymentResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/flink/application": {
      "post": {
        "summary": "Create a Flink Application",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkCreateApplication",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceFlinkCreateApplicationRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkCreateApplicationResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "get": {
        "summary": "Get all Flink Applications",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkListApplications",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkListApplicationsResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/flink/application/{application_id}/deployment": {
      "post": {
        "summary": "Create an ApplicationDeployment",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkCreateApplicationDeployment",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/application_id" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceFlinkCreateApplicationDeploymentRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkCreateApplicationDeploymentResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "get": {
        "summary": "Get all ApplicationDeployments",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkListApplicationDeployments",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/application_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkListApplicationDeploymentsResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/flink/application/{application_id}/version": {
      "post": {
        "summary": "Create a Flink ApplicationVersion",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkCreateApplicationVersion",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/application_id" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceFlinkCreateApplicationVersionRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkCreateApplicationVersionResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/flink/jar_application": {
      "post": {
        "summary": "[EXPERIMENTAL] Create a Flink JarApplication",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkCreateJarApplication",
        "x-experimental": true,
        "description": "<p><strong>[EXPERIMENTAL]:</strong> This endpoint is experimental. It may change or even disappear at any time. Do not rely on it for production purposes.<p>",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceFlinkCreateJarApplicationRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkCreateJarApplicationResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "get": {
        "summary": "[EXPERIMENTAL] Get all Flink JarApplications",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkListJarApplications",
        "x-experimental": true,
        "description": "<p><strong>[EXPERIMENTAL]:</strong> This endpoint is experimental. It may change or even disappear at any time. Do not rely on it for production purposes.<p>",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkListJarApplicationsResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/flink/jar_application/{application_id}/deployment": {
      "post": {
        "summary": "[EXPERIMENTAL] Create an JarApplicationDeployment",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkCreateJarApplicationDeployment",
        "x-experimental": true,
        "description": "<p><strong>[EXPERIMENTAL]:</strong> This endpoint is experimental. It may change or even disappear at any time. Do not rely on it for production purposes.<p>",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/application_id" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceFlinkCreateJarApplicationDeploymentRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkCreateJarApplicationDeploymentResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "get": {
        "summary": "[EXPERIMENTAL] Get all JarApplicationDeployments",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkListJarApplicationDeployments",
        "x-experimental": true,
        "description": "<p><strong>[EXPERIMENTAL]:</strong> This endpoint is experimental. It may change or even disappear at any time. Do not rely on it for production purposes.<p>",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/application_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkListJarApplicationDeploymentsResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/flink/jar_application/{application_id}/version": {
      "post": {
        "summary": "[EXPERIMENTAL] Create a Flink JarApplicationVersion",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkCreateJarApplicationVersion",
        "x-experimental": true,
        "description": "<p><strong>[EXPERIMENTAL]:</strong> This endpoint is experimental. It may change or even disappear at any time. Do not rely on it for production purposes.<p>",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/application_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkCreateJarApplicationVersionResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/flink/application/{application_id}": {
      "delete": {
        "summary": "Delete a Flink Application",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkDeleteApplication",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/application_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkDeleteApplicationResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "get": {
        "summary": "Get a Flink Application",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkGetApplication",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/application_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkGetApplicationResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      },
      "put": {
        "summary": "Update a Flink Application",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkUpdateApplication",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/application_id" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceFlinkUpdateApplicationRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkUpdateApplicationResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/flink/application/{application_id}/deployment/{deployment_id}": {
      "delete": {
        "summary": "Delete an ApplicationDeployment",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkDeleteApplicationDeployment",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/application_id" },
          { "$ref": "#/components/parameters/deployment_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkDeleteApplicationDeploymentResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "get": {
        "summary": "Get an ApplicationDeployment",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkGetApplicationDeployment",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/application_id" },
          { "$ref": "#/components/parameters/deployment_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkGetApplicationDeploymentResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/flink/application/{application_id}/version/{application_version_id}": {
      "delete": {
        "summary": "Delete a Flink ApplicationVersion",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkDeleteApplicationVersion",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/application_id" },
          { "$ref": "#/components/parameters/application_version_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkDeleteApplicationVersionResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "get": {
        "summary": "Get a Flink ApplicationVersion",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkGetApplicationVersion",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/application_id" },
          { "$ref": "#/components/parameters/application_version_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkGetApplicationVersionResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/flink/jar_application/{application_id}": {
      "delete": {
        "summary": "[EXPERIMENTAL] Delete a Flink JarApplication",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkDeleteJarApplication",
        "x-experimental": true,
        "description": "<p><strong>[EXPERIMENTAL]:</strong> This endpoint is experimental. It may change or even disappear at any time. Do not rely on it for production purposes.<p>",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/application_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkDeleteJarApplicationResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "get": {
        "summary": "[EXPERIMENTAL] Get a Flink JarApplication",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkGetJarApplication",
        "x-experimental": true,
        "description": "<p><strong>[EXPERIMENTAL]:</strong> This endpoint is experimental. It may change or even disappear at any time. Do not rely on it for production purposes.<p>",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/application_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkGetJarApplicationResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      },
      "put": {
        "summary": "[EXPERIMENTAL] Update a Flink JarApplication",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkUpdateJarApplication",
        "x-experimental": true,
        "description": "<p><strong>[EXPERIMENTAL]:</strong> This endpoint is experimental. It may change or even disappear at any time. Do not rely on it for production purposes.<p>",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/application_id" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceFlinkUpdateJarApplicationRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkUpdateJarApplicationResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/flink/jar_application/{application_id}/deployment/{deployment_id}": {
      "delete": {
        "summary": "[EXPERIMENTAL] Delete a JarApplicationDeployment",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkDeleteJarApplicationDeployment",
        "x-experimental": true,
        "description": "<p><strong>[EXPERIMENTAL]:</strong> This endpoint is experimental. It may change or even disappear at any time. Do not rely on it for production purposes.<p>",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/application_id" },
          { "$ref": "#/components/parameters/deployment_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkDeleteJarApplicationDeploymentResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "get": {
        "summary": "[EXPERIMENTAL] Get a JarApplicationDeployment",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkGetJarApplicationDeployment",
        "x-experimental": true,
        "description": "<p><strong>[EXPERIMENTAL]:</strong> This endpoint is experimental. It may change or even disappear at any time. Do not rely on it for production purposes.<p>",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/application_id" },
          { "$ref": "#/components/parameters/deployment_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkGetJarApplicationDeploymentResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/flink/jar_application/{application_id}/version/{application_version_id}": {
      "delete": {
        "summary": "[EXPERIMENTAL] Delete a Flink JarApplicationVersion",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkDeleteJarApplicationVersion",
        "x-experimental": true,
        "description": "<p><strong>[EXPERIMENTAL]:</strong> This endpoint is experimental. It may change or even disappear at any time. Do not rely on it for production purposes.<p>",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/application_id" },
          { "$ref": "#/components/parameters/application_version_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkDeleteJarApplicationVersionResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "get": {
        "summary": "[EXPERIMENTAL] Get a Flink JarApplicationVersion",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkGetJarApplicationVersion",
        "x-experimental": true,
        "description": "<p><strong>[EXPERIMENTAL]:</strong> This endpoint is experimental. It may change or even disappear at any time. Do not rely on it for production purposes.<p>",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/application_id" },
          { "$ref": "#/components/parameters/application_version_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkGetJarApplicationVersionResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/flink/job/{job_id}": {
      "get": {
        "summary": "Get a Flink job info",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkJobDetails",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/job_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkJobDetailsResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/flink/job": {
      "get": {
        "summary": "Get all Flink jobs",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkJobsList",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkJobsListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/flink/overview": {
      "get": {
        "summary": "Get a cluster overview",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkOverview",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkOverviewResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/flink/application/{application_id}/deployment/{deployment_id}/stop": {
      "post": {
        "summary": "Stop an ApplicationDeployment",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkStopApplicationDeployment",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/application_id" },
          { "$ref": "#/components/parameters/deployment_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkStopApplicationDeploymentResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/flink/jar_application/{application_id}/deployment/{deployment_id}/stop": {
      "post": {
        "summary": "[EXPERIMENTAL] Stop an JarApplicationDeployment",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkStopJarApplicationDeployment",
        "x-experimental": true,
        "description": "<p><strong>[EXPERIMENTAL]:</strong> This endpoint is experimental. It may change or even disappear at any time. Do not rely on it for production purposes.<p>",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/application_id" },
          { "$ref": "#/components/parameters/deployment_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkStopJarApplicationDeploymentResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/flink/application/{application_id}/version/validate": {
      "post": {
        "summary": "Validate a Flink ApplicationVersion",
        "tags": ["Service:_Flink"],
        "operationId": "ServiceFlinkValidateApplicationVersion",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/application_id" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceFlinkValidateApplicationVersionRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkValidateApplicationVersionResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/acl": {
      "post": {
        "summary": "Add Aiven Kafka ACL entry",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaAclAdd",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceKafkaAclAddRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaAclAddResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["service_acl_too_many"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "service_acl_too_many: Maximum number of service ACLs reached"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "get": {
        "summary": "List Aiven ACL entries for Kafka service",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaAclList",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaAclListResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["service_not_found"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "service_not_found: Service not found"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/acl/{kafka_acl_id}": {
      "delete": {
        "summary": "Delete a Kafka ACL entry",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaAclDelete",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/kafka_acl_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaAclDeleteResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["service_acl_not_found"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "service_acl_not_found: No such service ACL exists"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/connectors": {
      "post": {
        "summary": "Create a Kafka Connect connector",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaConnectCreateConnector",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceKafkaConnectCreateConnectorRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaConnectCreateConnectorResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "get": {
        "summary": "Lists Kafka connectors",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaConnectList",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaConnectListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/connectors/{connector_name}": {
      "delete": {
        "summary": "Delete Kafka Connect connector",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaConnectDeleteConnector",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/connector_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaConnectDeleteConnectorResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "put": {
        "summary": "Edit Kafka Connect connector",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaConnectEditConnector",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/connector_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceKafkaConnectEditConnectorRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaConnectEditConnectorResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/available-connectors": {
      "get": {
        "summary": "Get available Kafka Connect connectors",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaConnectGetAvailableConnectors",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaConnectGetAvailableConnectorsResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/connector-plugins/{connector_name}/configuration": {
      "get": {
        "summary": "Get Kafka Connect connector configuration schema",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaConnectGetConnectorConfiguration",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/connector_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaConnectGetConnectorConfigurationResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/connectors/{connector_name}/status": {
      "get": {
        "summary": "Get a Kafka Connect Connector status",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaConnectGetConnectorStatus",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/connector_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaConnectGetConnectorStatusResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/connectors/{connector_name}/pause": {
      "post": {
        "summary": "Pause a Kafka Connect Connector",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaConnectPauseConnector",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/connector_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaConnectPauseConnectorResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/connectors/{connector_name}/restart": {
      "post": {
        "summary": "Restart a Kafka Connect Connector",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaConnectRestartConnector",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/connector_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaConnectRestartConnectorResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/connectors/{connector_name}/tasks/{task_id}/restart": {
      "post": {
        "summary": "Restart a Kafka Connect Connector task",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaConnectRestartConnectorTask",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/connector_name" },
          { "$ref": "#/components/parameters/task_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaConnectRestartConnectorTaskResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/connectors/{connector_name}/resume": {
      "post": {
        "summary": "Resume a Kafka Connect Connector",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaConnectResumeConnector",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/connector_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaConnectResumeConnectorResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/kafka/acl": {
      "post": {
        "summary": "Add a Kafka-native ACL entry",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaNativeAclAdd",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceKafkaNativeAclAddRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaNativeAclAddResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["service_acl_too_many"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "service_acl_too_many: Maximum number of service ACLs reached"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Request conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["kafka_acl_not_supported"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "kafka_acl_not_supported: Unsupported Kafka-native ACL"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "get": {
        "summary": "List Kafka-native ACL entries",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaNativeAclList",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaNativeAclListResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["service_not_found"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "service_not_found: Service not found"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Request conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["service_maintenance_required"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "service_maintenance_required: The service does not support the functionality. A maintenance update is required."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/kafka/acl/{kafka_acl_id}": {
      "delete": {
        "summary": "Delete a Kafka-native ACL entry",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaNativeAclDelete",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/kafka_acl_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaNativeAclDeleteResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["service_acl_not_found"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "service_acl_not_found: No such service ACL exists"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "get": {
        "summary": "Get single Kafka-native ACL entry",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaNativeAclGet",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/kafka_acl_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaNativeAclGetResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["service_acl_not_found"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "service_acl_not_found: No such service ACL exists"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/quota": {
      "post": {
        "summary": "Create Kafka quota",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaQuotaCreate",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceKafkaQuotaCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaQuotaCreateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "delete": {
        "summary": "Delete Kafka quota",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaQuotaDelete",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          {
            "$ref": "#/components/parameters/servicekafkaquotadelete_client-id"
          },
          { "$ref": "#/components/parameters/servicekafkaquotadelete_user" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaQuotaDeleteResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "get": {
        "summary": "List Kafka quotas",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaQuotaList",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaQuotaListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/quota/describe": {
      "get": {
        "summary": "Describe Specific Kafka quotas",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaQuotaDescribe",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          {
            "$ref": "#/components/parameters/servicekafkaquotadescribe_client-id"
          },
          { "$ref": "#/components/parameters/servicekafkaquotadescribe_user" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaQuotaDescribeResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/kafka/tiered-storage/storage-usage/by-topic": {
      "get": {
        "summary": "Get the Kafka tiered storage object storage usage by topic",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaTieredStorageStorageUsageByTopic",
        "description": "<p>Return &quot;400 Bad Request&quot; if tiered storage feature is not enabled for this service. Rarely, the data may be not available. In this case, &quot;503 Service Unavailable&quot; is returned and the client should try later.</p>",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaTieredStorageStorageUsageByTopicResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/kafka/tiered-storage/storage-usage/total": {
      "get": {
        "summary": "Get the Kafka tiered storage total object storage usage",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaTieredStorageStorageUsageTotal",
        "description": "<p>Return &quot;400 Bad Request&quot; if tiered storage feature is not enabled for this service. Rarely, the data may be not available. In this case, &quot;503 Service Unavailable&quot; is returned and the client should try later.</p>",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaTieredStorageStorageUsageTotalResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/kafka/tiered-storage/summary": {
      "get": {
        "summary": "Get the Kafka tiered storage summary",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaTieredStorageSummary",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaTieredStorageSummaryResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/topic": {
      "post": {
        "summary": "Create a Kafka topic",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaTopicCreate",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceKafkaTopicCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaTopicCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["kafka_topic_invalid_config"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "kafka_topic_invalid_config: Topic configuration either invalid or conflicting with kafka setup"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Request conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["kafka_topic_already_exists"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "kafka_topic_already_exists: Topic already exists and cannot be created"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The server cannot process the request due to a high load",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["kafka_service_unavailable"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "kafka_service_unavailable: Kafka service is currently unavailable"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "get": {
        "summary": "Get Kafka topic list",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaTopicList",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaTopicListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/topic/{topic_name}": {
      "delete": {
        "summary": "Delete a Kafka topic",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaTopicDelete",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/topic_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaTopicDeleteResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["kafka_topic_not_found"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "kafka_topic_not_found: No such topic exists"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Request conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["kafka_topic_reserved"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "kafka_topic_reserved: Topic is reserved for internal use"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The server cannot process the request due to a high load",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["kafka_service_unavailable"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "kafka_service_unavailable: Kafka service is currently unavailable"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "get": {
        "summary": "Get Kafka topic info",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaTopicGet",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/topic_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaTopicGetResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["kafka_topic_not_found"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "kafka_topic_not_found: No such topic exists"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      },
      "put": {
        "summary": "Update a Kafka topic",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaTopicUpdate",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/topic_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceKafkaTopicUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaTopicUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["kafka_topic_invalid_config"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "kafka_topic_invalid_config: Topic configuration either invalid or conflicting with kafka setup"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["kafka_topic_not_found"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "kafka_topic_not_found: No such topic exists"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Request conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": [
                              "kafka_partition_reassignment_in_progress"
                            ],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "kafka_partition_reassignment_in_progress: Unable to update partitions during partition reassignment"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The server cannot process the request due to a high load",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["kafka_service_unavailable"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "kafka_service_unavailable: Kafka service is currently unavailable"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/kafka/rest/topics/{topic_name}/messages": {
      "post": {
        "summary": "List kafka topic messages",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaTopicMessageList",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/topic_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceKafkaTopicMessageListRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaTopicMessageListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/kafka/rest/topics/{topic_name}/produce": {
      "post": {
        "summary": "Produce message into a kafka topic",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceKafkaTopicMessageProduce",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/topic_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceKafkaTopicMessageProduceRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaTopicMessageProduceResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/kafka/schema-registry/acl": {
      "post": {
        "summary": "Add a Schema Registry ACL entry",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceSchemaRegistryAclAdd",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceSchemaRegistryAclAddRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistryAclAddResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "get": {
        "summary": "List Schema Registry ACL entries",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceSchemaRegistryAclList",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistryAclListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/kafka/schema-registry/acl/{schema_registry_acl_id}": {
      "delete": {
        "summary": "Delete a Schema Registry ACL entry",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceSchemaRegistryAclDelete",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/schema_registry_acl_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistryAclDeleteResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/kafka/schema/compatibility/subjects/{subject_name}/versions/{version_id}": {
      "post": {
        "summary": "Check compatibility of schema in Schema Registry",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceSchemaRegistryCompatibility",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/subject_name" },
          { "$ref": "#/components/parameters/version_id" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceSchemaRegistryCompatibilityRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistryCompatibilityResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/kafka/schema/config": {
      "get": {
        "summary": "Get global configuration for Schema Registry",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceSchemaRegistryGlobalConfigGet",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistryGlobalConfigGetResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      },
      "put": {
        "summary": "Edit global configuration for Schema Registry",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceSchemaRegistryGlobalConfigPut",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceSchemaRegistryGlobalConfigPutRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistryGlobalConfigPutResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/kafka/schema/schemas/ids/{schema_id}": {
      "get": {
        "summary": "Get schema in Schema Registry",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceSchemaRegistrySchemaGet",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/schema_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistrySchemaGetResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/kafka/schema/config/{subject_name}": {
      "get": {
        "summary": "Get configuration for Schema Registry subject",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceSchemaRegistrySubjectConfigGet",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/subject_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistrySubjectConfigGetResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      },
      "put": {
        "summary": "Edit configuration for Schema Registry subject",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceSchemaRegistrySubjectConfigPut",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/subject_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceSchemaRegistrySubjectConfigPutRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistrySubjectConfigPutResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/kafka/schema/subjects/{subject_name}": {
      "delete": {
        "summary": "Delete Schema Registry subject",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceSchemaRegistrySubjectDelete",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/subject_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistrySubjectDeleteResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/kafka/schema/subjects/{subject_name}/versions/{version_id}": {
      "delete": {
        "summary": "Delete Schema Registry subject version",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceSchemaRegistrySubjectVersionDelete",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/subject_name" },
          { "$ref": "#/components/parameters/version_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistrySubjectVersionDeleteResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "get": {
        "summary": "Get Schema Registry Subject version",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceSchemaRegistrySubjectVersionGet",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/subject_name" },
          { "$ref": "#/components/parameters/version_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistrySubjectVersionGetResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/kafka/schema/subjects/{subject_name}/versions": {
      "post": {
        "summary": "Register a new Schema in Schema Registry",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceSchemaRegistrySubjectVersionPost",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/subject_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceSchemaRegistrySubjectVersionPostRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistrySubjectVersionPostResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "get": {
        "summary": "Get Schema Registry subject versions",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceSchemaRegistrySubjectVersionsGet",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/subject_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistrySubjectVersionsGetResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/kafka/schema/subjects/{subject_name}/versions/{version_id}/schema": {
      "get": {
        "summary": "DEPRECATED: Get raw schema of a specific version in Schema Registry",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceSchemaRegistrySubjectVersionSchemaGet",
        "deprecated": true,
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/subject_name" },
          { "$ref": "#/components/parameters/version_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistrySubjectVersionSchemaGetResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/kafka/schema/subjects": {
      "get": {
        "summary": "Lists Schema Registry subjects",
        "tags": ["Service:_Kafka"],
        "operationId": "ServiceSchemaRegistrySubjects",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistrySubjectsResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/mirrormaker/replication-flows": {
      "post": {
        "summary": "Create a replication flow",
        "tags": ["Service:_Kafka_MirrorMaker"],
        "operationId": "ServiceKafkaMirrorMakerCreateReplicationFlow",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceKafkaMirrorMakerCreateReplicationFlowRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaMirrorMakerCreateReplicationFlowResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "get": {
        "summary": "Get replication flows",
        "tags": ["Service:_Kafka_MirrorMaker"],
        "operationId": "ServiceKafkaMirrorMakerGetReplicationFlows",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaMirrorMakerGetReplicationFlowsResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/mirrormaker/replication-flows/{source_cluster}/{target_cluster}": {
      "delete": {
        "summary": "Delete a replication flow",
        "tags": ["Service:_Kafka_MirrorMaker"],
        "operationId": "ServiceKafkaMirrorMakerDeleteReplicationFlow",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/source_cluster" },
          { "$ref": "#/components/parameters/target_cluster" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaMirrorMakerDeleteReplicationFlowResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "get": {
        "summary": "Get a replication flow",
        "tags": ["Service:_Kafka_MirrorMaker"],
        "operationId": "ServiceKafkaMirrorMakerGetReplicationFlow",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/source_cluster" },
          { "$ref": "#/components/parameters/target_cluster" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaMirrorMakerGetReplicationFlowResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      },
      "put": {
        "summary": "Update a replication flow",
        "tags": ["Service:_Kafka_MirrorMaker"],
        "operationId": "ServiceKafkaMirrorMakerPatchReplicationFlow",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/source_cluster" },
          { "$ref": "#/components/parameters/target_cluster" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceKafkaMirrorMakerPatchReplicationFlowRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaMirrorMakerPatchReplicationFlowResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/mysql/query/stats": {
      "post": {
        "summary": "Fetch MySQL service query statistics",
        "tags": ["Service:_MySQL"],
        "operationId": "MySQLServiceQueryStatistics",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MySQLServiceQueryStatisticsRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MySQLServiceQueryStatisticsResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/opensearch/acl": {
      "get": {
        "summary": "Show OpenSearch ACL configuration",
        "tags": ["Service:_OpenSearch"],
        "operationId": "ServiceOpenSearchAclGet",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceOpenSearchAclGetResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      },
      "post": {
        "summary": "Set OpenSearch ACL configuration",
        "tags": ["Service:_OpenSearch"],
        "operationId": "ServiceOpenSearchAclSet",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceOpenSearchAclSetRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceOpenSearchAclSetResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "put": {
        "summary": "Update OpenSearch ACL configuration",
        "tags": ["Service:_OpenSearch"],
        "operationId": "ServiceOpenSearchAclUpdate",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceOpenSearchAclUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceOpenSearchAclUpdateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/index/{index_name}": {
      "delete": {
        "summary": "Delete an OpenSearch index",
        "tags": ["Service:_OpenSearch"],
        "operationId": "ServiceOpenSearchIndexDelete",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/index_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceOpenSearchIndexDeleteResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/index": {
      "get": {
        "summary": "List OpenSearch indexes",
        "tags": ["Service:_OpenSearch"],
        "operationId": "ServiceOpenSearchIndexList",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceOpenSearchIndexListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/opensearch/security": {
      "get": {
        "summary": "Show OpenSearch security configuration status",
        "tags": ["Service:_OpenSearch"],
        "operationId": "ServiceOpenSearchSecurityGet",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceOpenSearchSecurityGetResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/opensearch/security/admin": {
      "put": {
        "summary": "Change Opensearch Security Admin password",
        "tags": ["Service:_OpenSearch"],
        "operationId": "ServiceOpenSearchSecurityReset",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceOpenSearchSecurityResetRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceOpenSearchSecurityResetResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "post": {
        "summary": "Enable Opensearch Security Admin by setting the password",
        "tags": ["Service:_OpenSearch"],
        "operationId": "ServiceOpenSearchSecuritySet",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceOpenSearchSecuritySetRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceOpenSearchSecuritySetResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/pg/available-extensions": {
      "get": {
        "summary": "List PostgreSQL extensions that can be loaded with CREATE EXTENSION in this service",
        "tags": ["Service:_PostgreSQL"],
        "operationId": "PGServiceAvailableExtensions",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PGServiceAvailableExtensionsResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/pg/query/stats": {
      "post": {
        "summary": "Fetch PostgreSQL service query statistics",
        "tags": ["Service:_PostgreSQL"],
        "operationId": "PGServiceQueryStatistics",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PGServiceQueryStatisticsRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PGServiceQueryStatisticsResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/query/stats": {
      "post": {
        "summary": "Fetch PostgreSQL service query statistics (DEPRECATED: Use /project/$project/service/$service/pg/query/stats instead)",
        "tags": ["Service:_PostgreSQL"],
        "operationId": "PGServiceQueryStatisticsDeprecated",
        "deprecated": true,
        "description": "<p>DEPRECATED: Use /project/$project/service/$service/pg/query/stats instead</p>",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PGServiceQueryStatisticsDeprecatedRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PGServiceQueryStatisticsDeprecatedResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/connection_pool": {
      "post": {
        "summary": "Create a new connection pool for service",
        "tags": ["Service:_PostgreSQL"],
        "operationId": "ServicePGBouncerCreate",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServicePGBouncerCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePGBouncerCreateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/connection_pool/{pool_name}": {
      "delete": {
        "summary": "Delete a connection pool",
        "tags": ["Service:_PostgreSQL"],
        "operationId": "ServicePGBouncerDelete",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/pool_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePGBouncerDeleteResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "put": {
        "summary": "Update a connection pool",
        "tags": ["Service:_PostgreSQL"],
        "operationId": "ServicePGBouncerUpdate",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/pool_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServicePGBouncerUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePGBouncerUpdateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/thanos/storage/summary": {
      "get": {
        "summary": "Get Thanos object storage summary",
        "tags": ["Service:_Thanos"],
        "operationId": "ServiceThanosStorageSummary",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceThanosStorageSummaryResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": [
                              "project_does_not_exist",
                              "service_does_not_exist"
                            ],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "project_does_not_exist: Project does not exist. service_does_not_exist: Service does not exist"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service_types": {
      "get": {
        "summary": "List service types for a project",
        "tags": ["Service"],
        "operationId": "ListProjectServiceTypes",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListProjectServiceTypesResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["projects:read"] }]
      }
    },
    "/service_types": {
      "get": {
        "summary": "List publicly available service types",
        "tags": ["Service"],
        "operationId": "ListPublicServiceTypes",
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPublicServiceTypesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/service_versions": {
      "get": {
        "summary": "List service versions",
        "tags": ["Service"],
        "operationId": "ListServiceVersions",
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListServiceVersionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenant}/pg-available-extensions": {
      "get": {
        "summary": "List PostgreSQL extensions available for this tenant grouped by PG version",
        "tags": ["Service"],
        "operationId": "PgAvailableExtensions",
        "parameters": [{ "$ref": "#/components/parameters/tenant" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PgAvailableExtensionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/project/{project}/service/{service_name}/logs": {
      "post": {
        "summary": "Get service log entries",
        "tags": ["Service"],
        "operationId": "ProjectGetServiceLogs",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectGetServiceLogsRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectGetServiceLogsResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/tags": {
      "get": {
        "summary": "List all tags attached to the service",
        "tags": ["Service"],
        "operationId": "ProjectServiceTagsList",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectServiceTagsListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      },
      "put": {
        "summary": "Replace all project tags with a new set of tags, deleting old ones",
        "tags": ["Service"],
        "operationId": "ProjectServiceTagsReplace",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectServiceTagsReplaceRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectServiceTagsReplaceResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "patch": {
        "summary": "Update one or more tags, creating ones that don't exist, and deleting ones given NULL value",
        "tags": ["Service"],
        "operationId": "ProjectServiceTagsUpdate",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectServiceTagsUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectServiceTagsUpdateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/alerts": {
      "get": {
        "summary": "List active alerts for service",
        "tags": ["Service"],
        "operationId": "ServiceAlertsList",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAlertsListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/backup_to_another_region/report": {
      "post": {
        "summary": "Get service's backup to another region information",
        "tags": ["Service"],
        "operationId": "ServiceBackupToAnotherRegionReport",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceBackupToAnotherRegionReportRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceBackupToAnotherRegionReportResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/backups": {
      "get": {
        "summary": "Get service backup information",
        "tags": ["Service"],
        "operationId": "ServiceBackupsGet",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceBackupsGetResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/query/cancel": {
      "post": {
        "summary": "Cancel specified query from service",
        "tags": ["Service"],
        "operationId": "ServiceCancelQuery",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceCancelQueryRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceCancelQueryResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service": {
      "post": {
        "summary": "Create a service",
        "tags": ["Service"],
        "operationId": "ServiceCreate",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceCreateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "get": {
        "summary": "List services",
        "tags": ["Service"],
        "operationId": "ServiceList",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ServiceListResponse" }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/db": {
      "post": {
        "summary": "Create a new logical database for service",
        "tags": ["Service"],
        "operationId": "ServiceDatabaseCreate",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceDatabaseCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDatabaseCreateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "get": {
        "summary": "List service databases",
        "tags": ["Service"],
        "operationId": "ServiceDatabaseList",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDatabaseListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/db/{dbname}": {
      "delete": {
        "summary": "Delete a logical database",
        "tags": ["Service"],
        "operationId": "ServiceDatabaseDelete",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/dbname" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDatabaseDeleteResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}": {
      "delete": {
        "summary": "Terminate a service",
        "tags": ["Service"],
        "operationId": "ServiceDelete",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDeleteResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "get": {
        "summary": "Get service information",
        "tags": ["Service"],
        "operationId": "ServiceGet",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/serviceget_include_secrets" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ServiceGetResponse" }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      },
      "put": {
        "summary": "Update service configuration",
        "tags": ["Service"],
        "operationId": "ServiceUpdate",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          {
            "$ref": "#/components/parameters/serviceupdate_allow_unclean_poweroff"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUpdateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/enable-writes": {
      "post": {
        "summary": "Temporarily enable writes for a service in read-only mode. Will only work if disk usage is lower than 99.0%",
        "tags": ["Service"],
        "operationId": "ServiceEnableWrites",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceEnableWritesResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/migration": {
      "get": {
        "summary": "Get migration status",
        "tags": ["Service"],
        "operationId": "ServiceGetMigrationStatus",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceGetMigrationStatusResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/influxdb/stats": {
      "get": {
        "summary": "List stats for influxdb",
        "tags": ["Service"],
        "operationId": "ServiceInfluxDBStats",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceInfluxDBStatsResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/kms/ca/{ca_name}": {
      "get": {
        "summary": "Retrieve a service CA",
        "tags": ["Service"],
        "operationId": "ServiceKmsGetCA",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/ca_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKmsGetCAResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/kms/keypairs/{keypair_name}": {
      "get": {
        "summary": "Retrieve service keypair",
        "tags": ["Service"],
        "operationId": "ServiceKmsGetKeypair",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/keypair_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKmsGetKeypairResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/maintenance/start": {
      "put": {
        "summary": "Start maintenance updates",
        "tags": ["Service"],
        "operationId": "ServiceMaintenanceStart",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceMaintenanceStartResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/metrics": {
      "post": {
        "summary": "Fetch service metrics",
        "tags": ["Service"],
        "operationId": "ServiceMetricsFetch",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceMetricsFetchRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceMetricsFetchResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/privatelink/aws/connections": {
      "get": {
        "summary": "List VPC Endpoint connections for an AWS Privatelink Endpoint Service",
        "tags": ["Service"],
        "operationId": "ServicePrivatelinkAWSConnectionList",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePrivatelinkAWSConnectionListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["privatelink:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/privatelink/aws": {
      "post": {
        "summary": "Create an AWS Privatelink Endpoint Service",
        "tags": ["Service"],
        "operationId": "ServicePrivatelinkAWSCreate",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServicePrivatelinkAWSCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePrivatelinkAWSCreateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["privatelink:write"] }]
      },
      "delete": {
        "summary": "Delete an AWS Privatelink Endpoint Service",
        "tags": ["Service"],
        "operationId": "ServicePrivatelinkAWSDelete",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePrivatelinkAWSDeleteResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["privatelink:write"] }]
      },
      "get": {
        "summary": "Get AWS Privatelink Endpoint Service information",
        "tags": ["Service"],
        "operationId": "ServicePrivatelinkAWSGet",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePrivatelinkAWSGetResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["privatelink:read"] }]
      },
      "put": {
        "summary": "Update an AWS Privatelink Endpoint Service",
        "tags": ["Service"],
        "operationId": "ServicePrivatelinkAWSUpdate",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServicePrivatelinkAWSUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePrivatelinkAWSUpdateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["privatelink:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/privatelink/azure/connections/{privatelink_connection_id}/approve": {
      "post": {
        "summary": "Approve an Azure private endpoint connection pending user approval",
        "tags": ["Service"],
        "operationId": "ServicePrivatelinkAzureConnectionApproval",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/privatelink_connection_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePrivatelinkAzureConnectionApprovalResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["privatelink:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/privatelink/azure/connections": {
      "get": {
        "summary": "List private endpoint connections for an Azure Privatelink Service",
        "tags": ["Service"],
        "operationId": "ServicePrivatelinkAzureConnectionList",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePrivatelinkAzureConnectionListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["privatelink:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/privatelink/azure/connections/{privatelink_connection_id}": {
      "put": {
        "summary": "Update a private endpoint connection for an Azure Privatelink Service",
        "tags": ["Service"],
        "operationId": "ServicePrivatelinkAzureConnectionUpdate",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/privatelink_connection_id" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServicePrivatelinkAzureConnectionUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePrivatelinkAzureConnectionUpdateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["privatelink:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/privatelink/azure": {
      "post": {
        "summary": "Create an Azure Privatelink Service",
        "tags": ["Service"],
        "operationId": "ServicePrivatelinkAzureCreate",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServicePrivatelinkAzureCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePrivatelinkAzureCreateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["privatelink:write"] }]
      },
      "delete": {
        "summary": "Delete an Azure Privatelink Service",
        "tags": ["Service"],
        "operationId": "ServicePrivatelinkAzureDelete",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePrivatelinkAzureDeleteResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["privatelink:write"] }]
      },
      "get": {
        "summary": "Get Azure Privatelink Service information",
        "tags": ["Service"],
        "operationId": "ServicePrivatelinkAzureGet",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePrivatelinkAzureGetResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["privatelink:read"] }]
      },
      "put": {
        "summary": "Update an Azure Privatelink Service",
        "tags": ["Service"],
        "operationId": "ServicePrivatelinkAzureUpdate",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServicePrivatelinkAzureUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePrivatelinkAzureUpdateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["privatelink:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/query/activity": {
      "post": {
        "summary": "Fetch current queries for the service",
        "tags": ["Service"],
        "operationId": "ServiceQueryActivity",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceQueryActivityRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceQueryActivityResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/query/stats/reset": {
      "put": {
        "summary": "Reset service's query statistics",
        "tags": ["Service"],
        "operationId": "ServiceQueryStatisticsReset",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceQueryStatisticsResetResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/service_type": {
      "patch": {
        "summary": "Update the service type of a service",
        "tags": ["Service"],
        "operationId": "ServiceServiceTypeUpdate",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceServiceTypeUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceServiceTypeUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["service_type_not_allowed"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "service_type_not_allowed: Service type not allowed"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["service_not_found"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "service_not_found: Service not found"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Request conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["service_maintenance_required"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "service_maintenance_required: The service does not support the functionality. A maintenance update is required."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/task": {
      "post": {
        "summary": "Create a new task for service",
        "tags": ["Service"],
        "operationId": "ServiceTaskCreate",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceTaskCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceTaskCreateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/task/{task_id}": {
      "get": {
        "summary": "Get task result",
        "tags": ["Service"],
        "operationId": "ServiceTaskGet",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/task_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceTaskGetResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/user": {
      "post": {
        "summary": "Create a new (sub) user for service",
        "tags": ["Service"],
        "operationId": "ServiceUserCreate",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceUserCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUserCreateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/service/{service_name}/user/{service_username}": {
      "put": {
        "summary": "Modify service user credentials",
        "tags": ["Service"],
        "operationId": "ServiceUserCredentialsModify",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/service_username" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceUserCredentialsModifyRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUserCredentialsModifyResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "delete": {
        "summary": "Delete a service user",
        "tags": ["Service"],
        "operationId": "ServiceUserDelete",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/service_username" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUserDeleteResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "get": {
        "summary": "Get details for a single user",
        "tags": ["Service"],
        "operationId": "ServiceUserGet",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/service_username" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUserGetResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/user/{service_username}/credentials/reset": {
      "put": {
        "summary": "Reset service user credentials",
        "tags": ["Service"],
        "operationId": "ServiceUserCredentialsReset",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" },
          { "$ref": "#/components/parameters/service_username" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUserCredentialsResetResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/integration": {
      "post": {
        "summary": "Create a new service integration",
        "tags": ["Service_Integrations"],
        "operationId": "ServiceIntegrationCreate",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceIntegrationCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceIntegrationCreateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/integration/{integration_id}": {
      "delete": {
        "summary": "Delete a service integration",
        "tags": ["Service_Integrations"],
        "operationId": "ServiceIntegrationDelete",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/integration_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceIntegrationDeleteResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "get": {
        "summary": "Get service integration",
        "tags": ["Service_Integrations"],
        "operationId": "ServiceIntegrationGet",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/integration_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceIntegrationGetResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      },
      "put": {
        "summary": "Update a service integration",
        "tags": ["Service_Integrations"],
        "operationId": "ServiceIntegrationUpdate",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/integration_id" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceIntegrationUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceIntegrationUpdateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/integration_endpoint": {
      "post": {
        "summary": "Create a new service integration endpoint",
        "tags": ["Service_Integrations"],
        "operationId": "ServiceIntegrationEndpointCreate",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceIntegrationEndpointCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceIntegrationEndpointCreateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "get": {
        "summary": "List available integration endpoints for project",
        "tags": ["Service_Integrations"],
        "operationId": "ServiceIntegrationEndpointList",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceIntegrationEndpointListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/integration_endpoint/{integration_endpoint_id}": {
      "delete": {
        "summary": "Delete a service integration endpoint",
        "tags": ["Service_Integrations"],
        "operationId": "ServiceIntegrationEndpointDelete",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/integration_endpoint_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceIntegrationEndpointDeleteResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      },
      "get": {
        "summary": "Get service integration endpoint",
        "tags": ["Service_Integrations"],
        "operationId": "ServiceIntegrationEndpointGet",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/integration_endpoint_id" },
          {
            "$ref": "#/components/parameters/serviceintegrationendpointget_include_secrets"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceIntegrationEndpointGetResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      },
      "put": {
        "summary": "Update service integration endpoint",
        "tags": ["Service_Integrations"],
        "operationId": "ServiceIntegrationEndpointUpdate",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/integration_endpoint_id" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceIntegrationEndpointUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceIntegrationEndpointUpdateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:write"] }]
      }
    },
    "/project/{project}/integration_endpoint_types": {
      "get": {
        "summary": "List available service integration endpoint types",
        "tags": ["Service_Integrations"],
        "operationId": "ServiceIntegrationEndpointTypes",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceIntegrationEndpointTypesResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/service/{service_name}/integration": {
      "get": {
        "summary": "List available integrations for a service",
        "tags": ["Service_Integrations"],
        "operationId": "ServiceIntegrationList",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/service_name" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceIntegrationListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/integration_types": {
      "get": {
        "summary": "List available service integration types",
        "tags": ["Service_Integrations"],
        "operationId": "ServiceIntegrationTypes",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceIntegrationTypesResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["services:read"] }]
      }
    },
    "/project/{project}/static-ips/{static_ip_address_id}/association": {
      "post": {
        "summary": "Associate a static IP address with a service",
        "tags": ["StaticIP"],
        "operationId": "ProjectStaticIPAssociate",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/static_ip_address_id" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectStaticIPAssociateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectStaticIPAssociateResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["static_ips:read", "projects:write"] }
        ]
      },
      "delete": {
        "summary": "Dissociate a static IP address from a service",
        "tags": ["StaticIP"],
        "operationId": "ProjectStaticIPDissociate",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/static_ip_address_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectStaticIPDissociateResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["static_ips:read", "projects:write"] }
        ]
      }
    },
    "/project/{project}/static-ip-availability": {
      "get": {
        "summary": "List static IP address cloud availability and prices for a project",
        "tags": ["StaticIP"],
        "operationId": "ProjectStaticIPAvailabilityList",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectStaticIPAvailabilityListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["static_ips:read"] }]
      }
    },
    "/project/{project}/static-ips/{static_ip_address_id}": {
      "patch": {
        "summary": "Update a static IP address configuration",
        "tags": ["StaticIP"],
        "operationId": "ProjectStaticIPPatch",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/static_ip_address_id" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectStaticIPPatchRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectStaticIPPatchResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["static_ips:write"] }]
      }
    },
    "/project/{project}/static-ips": {
      "post": {
        "summary": "Create static IP address",
        "tags": ["StaticIP"],
        "operationId": "StaticIPCreate",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaticIPCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaticIPCreateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["static_ips:write"] }]
      },
      "get": {
        "summary": "List static IP addresses",
        "tags": ["StaticIP"],
        "operationId": "StaticIPList",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaticIPListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["static_ips:read"] }]
      }
    },
    "/organization/{organization_id}/tickets": {
      "get": {
        "summary": "List organization support tickets",
        "tags": ["Ticket_[deprecated]"],
        "operationId": "OrganizationTicketList",
        "deprecated": true,
        "description": "<p>DEPRECATED: Support tickets have been moved to https://support.aiven.io/.</p>",
        "parameters": [{ "$ref": "#/components/parameters/organization_id" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationTicketListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["tickets:read"] }]
      }
    },
    "/project/{project}/tickets": {
      "post": {
        "summary": "Create a support ticket",
        "tags": ["Ticket_[deprecated]"],
        "operationId": "ProjectTicketCreate",
        "deprecated": true,
        "description": "<p>DEPRECATED: Support tickets have been moved to https://support.aiven.io/.</p>",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTicketCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["projects:write", "tickets:write"] }
        ]
      },
      "get": {
        "summary": "List support tickets",
        "tags": ["Ticket_[deprecated]"],
        "operationId": "ProjectTicketList",
        "deprecated": true,
        "description": "<p>DEPRECATED: Support tickets have been moved to https://support.aiven.io/.</p>",
        "parameters": [{ "$ref": "#/components/parameters/project" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTicketListResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["projects:read", "tickets:read"] }
        ]
      }
    },
    "/project/{project}/tickets/{ticket_id}/invite": {
      "post": {
        "summary": "Invite a user to a ticket",
        "tags": ["Ticket_[deprecated]"],
        "operationId": "ProjectTicketInvite",
        "deprecated": true,
        "description": "<p>DEPRECATED: Support tickets have been moved to https://support.aiven.io/.</p>",
        "parameters": [
          { "$ref": "#/components/parameters/project" },
          { "$ref": "#/components/parameters/ticket_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTicketInviteResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["projects:write", "tickets:write"] }
        ]
      }
    },
    "/access_token": {
      "post": {
        "summary": "Create new access token",
        "tags": ["Users"],
        "operationId": "AccessTokenCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessTokenCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["user:write", "authentication:write"] }
        ]
      },
      "get": {
        "summary": "List all valid access tokens",
        "tags": ["Users"],
        "operationId": "AccessTokenList",
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenListResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["user:read", "authentication:read"] }
        ]
      }
    },
    "/access_token/{token_prefix}": {
      "delete": {
        "summary": "Revoke an access token",
        "tags": ["Users"],
        "operationId": "AccessTokenRevoke",
        "parameters": [{ "$ref": "#/components/parameters/token_prefix" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenRevokeResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["user:write", "authentication:write"] }
        ]
      },
      "put": {
        "summary": "Update an existing access token",
        "tags": ["Users"],
        "operationId": "AccessTokenUpdate",
        "parameters": [{ "$ref": "#/components/parameters/token_prefix" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessTokenUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["user:write", "authentication:write"] }
        ]
      }
    },
    "/me/password_strength": {
      "post": {
        "summary": "Check password strength for an existing user",
        "tags": ["Users"],
        "operationId": "CheckPasswordStrengthExistingUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckPasswordStrengthExistingUserRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckPasswordStrengthExistingUserResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": [] }]
      }
    },
    "/user/password_strength": {
      "post": {
        "summary": "Check password strength for a new user",
        "tags": ["Users"],
        "operationId": "CheckPasswordStrengthNewUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckPasswordStrengthNewUserRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckPasswordStrengthNewUserResponse"
                }
              }
            }
          }
        }
      }
    },
    "/organization/{organization_id}/user/{member_user_id}/user-groups": {
      "get": {
        "summary": "List user groups of the organization's member",
        "tags": ["Users"],
        "operationId": "OrganizationMemberGroupsList",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/member_user_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationMemberGroupsListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:read"] }]
      }
    },
    "/organization/{organization_id}/user/{member_user_id}/permissions": {
      "get": {
        "summary": "[EXPERIMENTAL] List resources permissions of the organization's member",
        "tags": ["Users"],
        "operationId": "OrganizationMemberPermissionsList",
        "description": "<p><strong>[EXPERIMENTAL]:</strong> This endpoint is experimental. It may change or even disappear at any time. Do not rely on it for production purposes.<p>\n\n<p>Returns a comprehensive list of resources within an organization, including units, projects, and the organization itself, along with the specific permissions assigned to the user for each resource.</p>",
        "x-experimental": true,
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/member_user_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationMemberPermissionsListResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["organization_not_found"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "organization_not_found: Organization not found."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["authentication:read"] }]
      }
    },
    "/organization/{organization_id}/user/{member_user_id}/authentication_methods": {
      "get": {
        "summary": "List authentication methods for a user in the organization",
        "tags": ["Users"],
        "operationId": "OrganizationUserAuthenticationMethodsList",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/member_user_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUserAuthenticationMethodsListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:read"] }]
      }
    },
    "/organization/{organization_id}/user/{member_user_id}": {
      "delete": {
        "summary": "Remove a user from the organization",
        "tags": ["Users"],
        "operationId": "OrganizationUserDelete",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/member_user_id" }
        ],
        "responses": {
          "204": {
            "description": "Remove a user from the organization",
            "content": {}
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": [
                              "cannot_remove_managed_users_from_organization",
                              "organization_must_have_one_super_admin"
                            ],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "cannot_remove_managed_users_from_organization: Cannot remove managed users from organization. organization_must_have_one_super_admin: Organization must contain at least one super admin."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["action_forbidden_for_managed_users"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "action_forbidden_for_managed_users: Requested action not allowed for managed users"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:write"] }]
      },
      "get": {
        "summary": "Get details on a user of the organization",
        "tags": ["Users"],
        "operationId": "OrganizationUserGet",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/member_user_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUserGetResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:read"] }]
      },
      "patch": {
        "summary": "Update details on a user of the organization",
        "tags": ["Users"],
        "operationId": "OrganizationUserUpdate",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/member_user_id" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationUserUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUserUpdateResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:write"] }]
      }
    },
    "/organization/{organization_id}/user": {
      "get": {
        "summary": "List users of the organization",
        "tags": ["Users"],
        "operationId": "OrganizationUserList",
        "parameters": [{ "$ref": "#/components/parameters/organization_id" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUserListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:read"] }]
      }
    },
    "/organization/{organization_id}/user/{member_user_id}/reset_password": {
      "post": {
        "summary": "Reset the password of a managed user in the organization",
        "tags": ["Users"],
        "operationId": "OrganizationUserPasswordReset",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/member_user_id" }
        ],
        "responses": {
          "204": {
            "description": "Reset the password of a managed user in the organization",
            "content": {}
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:write"] }]
      }
    },
    "/organization/{organization_id}/user/{member_user_id}/access-token/{token_prefix}": {
      "delete": {
        "summary": "Revoke the token of a managed user in the organization",
        "tags": ["Users"],
        "operationId": "OrganizationUserRevokeToken",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/member_user_id" },
          { "$ref": "#/components/parameters/token_prefix" }
        ],
        "responses": {
          "204": {
            "description": "Revoke the token of a managed user in the organization",
            "content": {}
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["user:write", "authentication:write"] }
        ]
      }
    },
    "/organization/{organization_id}/user/{member_user_id}/access-tokens": {
      "get": {
        "summary": "List tokens from an organization's member",
        "tags": ["Users"],
        "operationId": "OrganizationUserTokensList",
        "description": "<p>Returns tokens generated using general authentication methods or authentication methods linked to the organization.</p>",
        "parameters": [
          { "$ref": "#/components/parameters/organization_id" },
          { "$ref": "#/components/parameters/member_user_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUserTokensListResponse"
                }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["accounts:read"] }]
      }
    },
    "/me/2fa": {
      "put": {
        "summary": "Configure two-factor authentication",
        "tags": ["Users"],
        "operationId": "TwoFactorAuthConfigure",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TwoFactorAuthConfigureRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorAuthConfigureResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["user:write", "authentication:write"] }
        ]
      }
    },
    "/me/2fa/otp": {
      "put": {
        "summary": "Complete one-time password configuration",
        "tags": ["Users"],
        "operationId": "TwoFactorAuthConfigureOTP",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TwoFactorAuthConfigureOTPRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorAuthConfigureOTPResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["user:write", "authentication:write"] }
        ]
      }
    },
    "/user/{user_id}": {
      "delete": {
        "summary": "Delete user account",
        "tags": ["Users"],
        "operationId": "UserAccountDelete",
        "parameters": [{ "$ref": "#/components/parameters/user_id" }],
        "responses": {
          "204": { "description": "Delete user account", "content": {} },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": [
                              "cannot_delete_active_managed_users",
                              "cannot_delete_users_with_organizations_memberships"
                            ],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "cannot_delete_active_managed_users: Managed users must be deactivated before deletion. Please deactivate the user first.. cannot_delete_users_with_organizations_memberships: Users must leave all organizations before their account can be deleted"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": [
                              "action_forbidden_for_managed_users",
                              "action_forbidden_on_application_users",
                              "action_forbidden_on_unmanaged_users",
                              "user_not_organization_admin"
                            ],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "action_forbidden_for_managed_users: Requested action not allowed for managed users. action_forbidden_on_application_users: Requested action not allowed on application users. action_forbidden_on_unmanaged_users: Requested action not allowed on unmanaged users. user_not_organization_admin: User is not organization administrator."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["user:write", "authentication:write"] }
        ]
      }
    },
    "/me/account/invites/accept": {
      "post": {
        "summary": "Accept all invites for a single account",
        "tags": ["Users"],
        "operationId": "UserAccountInvitesAccept",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAccountInvitesAcceptRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAccountInvitesAcceptResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["user:write", "authentication:write"] }
        ]
      }
    },
    "/me/account/invites": {
      "get": {
        "summary": "List pending account invites",
        "tags": ["Users"],
        "operationId": "UserAccountInvitesList",
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAccountInvitesListResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["user:read", "authentication:read"] }
        ]
      }
    },
    "/me/account/invites/reject": {
      "post": {
        "summary": "Reject invite to a team",
        "tags": ["Users"],
        "operationId": "UserAccountInvitesReject",
        "deprecated": true,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAccountInvitesRejectRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAccountInvitesRejectResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["user:write", "authentication:write"] }
        ]
      }
    },
    "/userauth": {
      "post": {
        "summary": "Authenticate user",
        "tags": ["Users"],
        "operationId": "UserAuth",
        "description": "<p>Authenticate user and return token for following authorizations</p>",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserAuthRequestBody" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserAuthResponse" }
              }
            }
          },
          "403": {
            "description": "Operation not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "title": "Human readable error message"
                    },
                    "errors": {
                      "type": "array",
                      "title": "List of error details. Typically there is only one element",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "title": "Human readable error message"
                          },
                          "error_code": {
                            "type": "string",
                            "enum": ["user_deactivated"],
                            "title": "Machine processable error code. Clients must be prepared to handle new codes.",
                            "description": "user_deactivated: Your account has been temporary suspended. Please contact your organization admin."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/userauth/login_options": {
      "post": {
        "summary": "Get available login options",
        "tags": ["Users"],
        "operationId": "UserAuthLoginOptions",
        "description": "<p>Get available user login options</p>",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAuthLoginOptionsRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAuthLoginOptionsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/me/authentication_methods/{user_authentication_method_id}": {
      "delete": {
        "summary": "Delete linked authentication method, and revoke all associated access tokens",
        "tags": ["Users"],
        "operationId": "UserAuthenticationMethodDelete",
        "parameters": [
          { "$ref": "#/components/parameters/user_authentication_method_id" }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAuthenticationMethodDeleteResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["user:write", "authentication:write"] }
        ]
      }
    },
    "/me/authentication_methods": {
      "get": {
        "summary": "List linked authentication methods",
        "tags": ["Users"],
        "operationId": "UserAuthenticationMethodsList",
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAuthenticationMethodsListResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["user:read", "authentication:read"] }
        ]
      }
    },
    "/user": {
      "post": {
        "summary": "Create a user",
        "tags": ["Users"],
        "operationId": "UserCreate",
        "deprecated": true,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserCreateRequestBody" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserCreateResponse" }
              }
            }
          }
        }
      }
    },
    "/me/expire_tokens": {
      "post": {
        "summary": "Expire all authorization tokens",
        "tags": ["Users"],
        "operationId": "UserExpireTokens",
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserExpireTokensResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["user:write", "authentication:write"] }
        ]
      }
    },
    "/me": {
      "get": {
        "summary": "Get information for the current session's user",
        "tags": ["Users"],
        "operationId": "UserInfo",
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserInfoResponse" }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["user:read"] }]
      },
      "patch": {
        "summary": "Edit profile",
        "tags": ["Users"],
        "operationId": "UserUpdate",
        "description": "<p>Updates details for the user. Returns user's updated information upon success.</p>",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserUpdateRequestBody" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserUpdateResponse" }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": ["user:write"] }]
      }
    },
    "/me/logout": {
      "post": {
        "summary": "Logout user, removing current authentication token",
        "tags": ["Users"],
        "operationId": "UserLogout",
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserLogoutResponse" }
              }
            }
          }
        },
        "security": [{ "tokenAuth": [], "oauth2": [] }]
      }
    },
    "/me/password": {
      "put": {
        "summary": "Change user password",
        "tags": ["Users"],
        "operationId": "UserPasswordChange",
        "description": "<p>Sets a new password for the user. Immediately expires all existing authentication tokens.</p>",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPasswordChangeRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPasswordChangeResponse"
                }
              }
            }
          }
        },
        "security": [
          { "tokenAuth": [], "oauth2": ["user:write", "authentication:write"] }
        ]
      }
    },
    "/user/password_reset/{verification_code}": {
      "post": {
        "summary": "Confirm user password reset",
        "tags": ["Users"],
        "operationId": "UserPasswordReset",
        "parameters": [{ "$ref": "#/components/parameters/verification_code" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPasswordResetRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPasswordResetResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/password_reset_request": {
      "post": {
        "summary": "Request user password reset",
        "tags": ["Users"],
        "operationId": "UserPasswordResetRequest",
        "description": "<p>Request a password reset code to be sent to the user's email address.</p>",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPasswordResetRequestRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPasswordResetRequestResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/verify_email/{verification_code}": {
      "post": {
        "summary": "Confirm user email address",
        "tags": ["Users"],
        "operationId": "UserVerifyEmail",
        "description": "<p>Confirm user email address after user has received the confirm code via email.</p>",
        "parameters": [{ "$ref": "#/components/parameters/verification_code" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserVerifyEmailResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/credit_code/{credit_code}": {
      "get": {
        "summary": "Validate campaign credit code",
        "tags": ["Users"],
        "operationId": "ValidateCreditCode",
        "parameters": [{ "$ref": "#/components/parameters/credit_code" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateCreditCodeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/me/referral/validation/{referral_code}": {
      "get": {
        "summary": "Validate referral_code code",
        "tags": ["Users"],
        "operationId": "ValidateReferralCode",
        "parameters": [{ "$ref": "#/components/parameters/referral_code" }],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateReferralCodeResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [{ "url": "https://api.aiven.io/v1" }],
  "tags": [
    { "name": "Account", "x-displayName": "Account" },
    { "name": "Application_Users", "x-displayName": "Application Users" },
    {
      "name": "Authentication_Methods",
      "x-displayName": "Authentication Methods"
    },
    { "name": "BillingGroup", "x-displayName": "BillingGroup" },
    { "name": "Billing", "x-displayName": "Billing" },
    { "name": "Cloud_platforms", "x-displayName": "Cloud platforms" },
    { "name": "Domains", "x-displayName": "Domains" },
    { "name": "Groups", "x-displayName": "Groups" },
    { "name": "Organizations", "x-displayName": "Organizations" },
    { "name": "Payment", "x-displayName": "Payment" },
    { "name": "Permissions", "x-displayName": "Permissions" },
    { "name": "Project", "x-displayName": "Project" },
    { "name": "Project_Billing", "x-displayName": "Project Billing" },
    {
      "name": "Project_Key_Management",
      "x-displayName": "Project Key Management"
    },
    {
      "name": "Service:_AlloyDB_Omni",
      "x-displayName": "Service: AlloyDB Omni"
    },
    { "name": "Service:_ClickHouse", "x-displayName": "Service: ClickHouse" },
    { "name": "Service:_Flink", "x-displayName": "Service: Flink" },
    { "name": "Service:_Kafka", "x-displayName": "Service: Kafka" },
    {
      "name": "Service:_Kafka_MirrorMaker",
      "x-displayName": "Service: Kafka MirrorMaker"
    },
    { "name": "Service:_MySQL", "x-displayName": "Service: MySQL" },
    { "name": "Service:_OpenSearch", "x-displayName": "Service: OpenSearch" },
    { "name": "Service:_PostgreSQL", "x-displayName": "Service: PostgreSQL" },
    { "name": "Service:_Thanos", "x-displayName": "Service: Thanos" },
    { "name": "Service", "x-displayName": "Service" },
    { "name": "Service_Integrations", "x-displayName": "Service Integrations" },
    { "name": "StaticIP", "x-displayName": "StaticIP" },
    { "name": "Ticket_[deprecated]", "x-displayName": "Ticket [deprecated]" },
    { "name": "Users", "x-displayName": "Users" }
  ]
}
