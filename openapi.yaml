openapi: 3.0.0
info:
  description: |
    Aiven is a modern fully-managed open source data platform for streaming, storing, and analyzing data on any public cloud. On Aiven Platform, you can operate your data infrastructure with a few devops tools: Aiven Console, Aiven Terraform Provider, Aiven CLI, and Aiven Operator for Kubernetes. All of them are built on an open secure powerful REST API for integration with custom tooling.

    The Aiven REST API provides programmatic access to Aiven.io services. To call the Aiven API, you can use either CLI tools (for example, cURL or Aiven CLI client) or GUI tools, such as the Aiven public API Postman collection.

    This Aiven API documentation will help you operate your Aiven organization, projects, or services programmatically by integrating your applications and processes with Aiven.

    Aiven's APIs (Application Programming Interfaces) power its platform for data management. Aiven has a number of REST APIs that can help you build strong and robust data infrastructure for your applications.

    The Aiven API is organized around core resources. Each core resource has multiple endpoints, which can be interacted with using different HTTP methods.

    ## Getting started

    Some content here.
  version: 1.0.0
  title: Aiven API docs
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
externalDocs:
  description: See our docs. about Swagger
  url: "https://aiven.io/docs/tools/cli"
servers:
  - url: "http://petstore.swagger.io/v2"
tags:
  - name: Accounts
    description: Operations on the organization level related to accounts, projects, teams, users, invites, billing groups, payment methods, credit cards, authentication methods, and more
    externalDocs:
      description: See our docs.
      url: "http://swagger.io"
  - name: Groups
    description: Groups of users in your organization to make it easier to manage access to your organization's resources.
    externalDocs:
      description: See our docs.
      url: "https://aiven.io/docs/platform/howto/manage-groups"
paths:
  "/organization/{organization_id}/user-groups":
    post:
      summary: Create a group
      tags:
        - Groups
      operationId: UserGroupCreate
      description: Create a new user group in an organization. You can also do this via the Aiven Console. See [the docs](https://aiven.io/docs/platform/howto/manage-groups).
      parameters:
        - $ref: "#/components/parameters/organization_id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserGroupCreateRequestBody"
      responses:
        "200":
          description: Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroupCreateResponse"
      security:
        - tokenAuth: []
          oauth2:
            - "accounts:write"
    get:
      summary: List groups
      tags:
        - Groups
      operationId: UserGroupsList
      description: "List all user groups within an organization"
      parameters:
        - $ref: "#/components/parameters/organization_id"
      responses:
        "200":
          description: Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroupsListResponse"
      security:
        - tokenAuth: []
          oauth2:
            - "accounts:read"
  "/organization/{organization_id}/user-groups/{user_group_id}":
    delete:
      summary: Delete a group
      tags:
        - Groups
      operationId: UserGroupDelete
      description: "Delete a user group from an organization"
      parameters:
        - $ref: "#/components/parameters/organization_id"
        - $ref: "#/components/parameters/user_group_id"
      responses:
        "204":
          description: Delete a group
          content: {}
        "409":
          $ref: "#/components/schemas/error409"
      security:
        - tokenAuth: []
          oauth2:
            - "accounts:write"
    get:
      summary: Retrieve a group
      tags:
        - Groups
      operationId: UserGroupGet
      description: "Retrieve the details of a user group"
      parameters:
        - $ref: "#/components/parameters/organization_id"
        - $ref: "#/components/parameters/user_group_id"
      responses:
        "200":
          description: Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroupGetResponse"
      security:
        - tokenAuth: []
          oauth2:
            - "accounts:read"
    patch:
      summary: Update a group
      tags:
        - Groups
      operationId: UserGroupUpdate
      description: "Update details of a user group"
      parameters:
        - $ref: "#/components/parameters/organization_id"
        - $ref: "#/components/parameters/user_group_id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserGroupUpdateRequestBody"
      responses:
        "200":
          description: Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroupUpdateResponse"
        "409":
          $ref: "#/components/schemas/error409"
      security:
        - tokenAuth: []
          oauth2:
            - "accounts:write"
  "/organization/{organization_id}/user-groups/{user_group_id}/members":
    get:
      summary: List group members
      tags:
        - Groups
      operationId: UserGroupMemberList
      description: "List members of a user group"
      parameters:
        - $ref: "#/components/parameters/organization_id"
        - $ref: "#/components/parameters/user_group_id"
      responses:
        "200":
          description: Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroupMemberListResponse"
      security:
        - tokenAuth: []
          oauth2:
            - "accounts:read"
securitySchemes:
  tokenAuth:
    description: "Header should be of the format `authorization: aivenv1 <TOKEN>`. Tokens can be obtained from [your Aiven profile page](https://console.aiven.io/profile/auth)"
    scheme: bearer
    type: http
  oauth2:
    type: oauth2
    description: OAuth2 security scheme
    flows:
      authorizationCode:
        authorizationUrl: "https://console.aiven.io/oauth/authorize"
        tokenUrl: "https://api.aiven.io/v1/oauth2/token"
        scopes:
          all: Provide full access to the API
          accounts: Allow enumerating and reading accounts configuration
          "accounts:read": Allow modifying account configuration
          "accounts:write": Provides full access to authentication related API
          authentication: Provides full access to authentication related API
          "authentication:read": "Allow reading authentication related configuration on resources (user profile, accounts)"
          "authentication:write": "Allow modifying authentication related configurations on resources (user profile, accounts)"
          billing: Provide full access to billing APIs
          "billing:read": Allow reading billing information and configuration
          "billing:write": Allow writing billing configuration
          payments: Provide full access to payment method APIs
          "payments:read": Allow reading the payment method configurations
          "payments:write": Allows writing payment method configuration
          privatelink: Provide full access to private link APIs
          "privatelink:read": Allow enumerating and reading private link items and configurations
          "privatelink:write": "Allow writing (creating, modifying, deleting) private link items"
          projects: Provide full access to projects APIs
          "projects:read": Allow enumerating projects and reading their configuration
          "projects:write": "Allow writing (creating, modifying, deleting) projects"
          scim: Provide full access to SCIM operations
          "scim:read": Allow reading SCIM endpoints
          "scim:write": Allow writing (modifying) SCIM endpoints
          services: Provide full access to services APIs
          "services:read": Allow enumerating services and reading their configuration
          "services:write": "Allow writing (creating, modifying, deleting) services"
          static_ips: Provide full access to static IPs APIs
          "static_ips:read": Allow enumerating and reading static IP items and configurations
          "static_ips:write": "Allow writing (creating, modifying, deleting) static IP items"
          tickets: Provide full access to support ticket APIs
          "tickets:read": Allow enumerating and reading support tickets
          "tickets:write": "Allow writing (creating, modifying) support tickets"
          user: Provide full access to user profile APIs
          "user:read": Allow reading user profile and configuration
          "user:write": Allow writing (modifying) user profile and configuration
components:
  schemas:
    group:
      type: object
      description: Group
      properties:
        create_time:
          type: string
          description: User group creation time in RFC format.
          maxLength: 36
          example: 2021-09-01T12:00:00Z
        description:
          type: string
          description: Human-readable description of the group.
          maxLength: 4096
          example: Users based in Helsinki
        managed_by_scim:
          type: boolean
          description: Managed By Scim
          example: false
        update_time:
          type: string
          description: User group last update time
          maxLength: 36
          example: 2021-09-03T12:00:00Z
        user_group_id:
          type: string
          description: User Group ID
          maxLength: 36
          example: 12345678-1234-1234-1234-123456789012
        user_group_name:
          type: string
          description: User Group Name
          maxLength: 128
          example: Helsinki Users
    error409:
      description: Request conflict
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Human readable error message
              errors:
                type: array
                description: List of error details. Typically there is only one element.
                items:
                  type: object
                  properties:
                    message:
                      type: string
                      description: Human readable error message.
                      example: Cannot perform operation on SCIM managed resource
                    error_code:
                      type: string
                      enum:
                        - resource_managed_by_scim
                      description: |
                        Possible values:
                          - `resource_managed_by_scim`: Cannot perform operation on SCIM managed resource
      required:
        - description
        - user_group_name
    UserGroupCreateRequestBody:
      type: object
      description: UserGroupCreateRequestBody
      properties:
        description:
          type: string
          description: The human-readable description of the group.
          maxLength: 4096
          example: Users based in Helsinki
        user_group_name:
          type: string
          description: User Group Name
          maxLength: 128
          example: Helsinki Users
      required:
        - description
        - user_group_name
    UserGroupCreateResponse:
      $ref: "#/components/schemas/group"
      required:
        - create_time
        - description
        - managed_by_scim
        - update_time
        - user_group_id
        - user_group_name
    UserGroupGetResponse:
      type: object
      description: UserGroupGetResponse
      $ref: "#/components/schemas/group"
      required:
        - create_time
        - description
        - managed_by_scim
        - update_time
        - user_group_id
        - user_group_name
    UserGroupMemberListResponse:
      type: object
      description: UserGroupMemberListResponse
      properties:
        members:
          type: array
          description: User group members
          items:
            type: object
            properties:
              last_activity_time:
                type: string
                description: Last Activity Time
                maxLength: 36
              user_id:
                type: string
                description: User ID
              user_info:
                type: object
                description: OrganizationUserInfo
                properties:
                  city:
                    type: string
                    description: City
                  country:
                    type: string
                    description: Country
                  create_time:
                    type: string
                    description: Creation time
                    maxLength: 36
                  department:
                    type: string
                    description: Department
                  is_application_user:
                    type: boolean
                    description: Is Application User
                  job_title:
                    type: string
                    description: Job Title
                  managed_by_scim:
                    type: boolean
                    description: Managed By Scim
                  managing_organization_id:
                    type: string
                    description: Managing Organization ID
                    maxLength: 36
                  real_name:
                    type: string
                    description: Real Name
                    maxLength: 256
                  state:
                    type: string
                    description: State
                  user_email:
                    type: string
                    description: User Email
                required:
                  - create_time
                  - is_application_user
                  - managed_by_scim
                  - real_name
                  - state
                  - user_email
            required:
              - user_id
              - user_info
      required:
        - members
    UserGroupMembersUpdateRequestBody:
      type: object
      description: UserGroupMembersUpdateRequestBody
      properties:
        member_ids:
          type: array
          description: List of user IDs to apply the operation on
          maxItems: 1024
          items:
            type: string
        operation:
          type: string
          description: Operation to be performed on the group
          enum:
            - add_members
            - remove_members
      required:
        - member_ids
        - operation
    UserGroupUpdateRequestBody:
      $ref: "#/components/schemas/UserGroupCreateRequestBody"
    UserGroupUpdateResponse:
      type: object
      description: UserGroupUpdateResponse
      $ref: "#/components/schemas/group"
      required:
        - create_time
        - description
        - managed_by_scim
        - update_time
        - user_group_id
        - user_group_name
    UserGroupsListResponse:
      type: object
      description: UserGroupsListResponse
      properties:
        user_groups:
          type: array
          description: User Groups
          items:
            $ref: "#/components/schemas/group"
            required:
              - create_time
              - description
              - managed_by_scim
              - member_count
              - update_time
              - user_group_id
              - user_group_name
      required:
        - user_groups
    OrganizationAuthenticationConfigGetResponse:
      type: object
      description: OrganizationAuthenticationConfigGetResponse
      properties:
        oauth_enabled:
          type: boolean
          description: Organization users are able to use OAuth authentication.
        password_auth_enabled:
          type: boolean
          description: Organization users are able to use password authentication.
        personal_tokens_enabled:
          type: boolean
          description: Organization users can use their personal tokens to access the organization through the Aiven API or other applications.
        personal_tokens_require_allowed_auth_method:
          type: boolean
          description: Organization users are able to use personal tokens that were generated from one of the allowed authentication methods.
        saml_allow_external:
          type: boolean
          description: Organization users are able to use SAML authentication of other organizations.
        saml_enabled:
          type: boolean
          description: Organization users are able to use SAML authentication.
        two_factor_required:
          type: boolean
          description: 2FA is required to access resources in this organization.
  parameters:
    user_group_id:
      in: path
      name: user_group_id
      description: ID of the user group
      example: 12345678-1234-1234-1234-123456789012
      schema:
        type: string
        required: true
    organization_id:
      in: "path"
      name: organization_id
      description: "ID of an organization"
      example: "12345678-1234-1234-1234-123456789012"
      schema:
        type: string
        required: true
